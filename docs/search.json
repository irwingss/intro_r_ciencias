[{"path":"index.html","id":"bienvenida","chapter":"Bienvenida","heading":"Bienvenida","text":" Esta es la página web del libro Introducción R para Ciencias, publicado por IC Press, Fondo Editorial del Instituto de Ciencias Antonio Brack. Para solicitar una copia electrónica del libro en formato PDF, hacerlo través de Amazon o IC PRESS.Este libro busca:Democratizar el uso del lenguaje de programación R en investigación científica, través de una explicación amigable, con ejemplos sencillos y ejercicios de refuerzo.Democratizar el uso del lenguaje de programación R en investigación científica, través de una explicación amigable, con ejemplos sencillos y ejercicios de refuerzo.Ser el libro de referencia de los primeros módulos del programa Data Science: Análisis Estadístico para Ciencias con R, el cual contiene cinco cursos dictados por el profesor Irwing S. saldaña en el Instituto de Ciencias Antonio Brack través de la plataforma educativa online masterX.Ser el libro de referencia de los primeros módulos del programa Data Science: Análisis Estadístico para Ciencias con R, el cual contiene cinco cursos dictados por el profesor Irwing S. saldaña en el Instituto de Ciencias Antonio Brack través de la plataforma educativa online masterX.En tal sentido, para usar este libro, se necesita saber de antemano el lenguaje de programación R ni conocimientos estadísticos.Este libro ha sido completamente escrito en R Markdown, utilizando RStudio. Si tienes alguna sugerencia, o detectas algún fallo ortográfico, error de forma o de fondo, por favor envía un mensaje isaldanau@gmail.com con el asunto de correo “Corrección Libro Estadística”.Esta página web es de libre uso dentro de los términos autorizados bajo la Licencia Internacional Reconocimiento Comercial - Sin Derivadas 4.0. Además, esta obra utiliza un Código de conducta para colaboradores. Al contribuir este libro, acepta cumplir sus términos. Finalmente, esta obra está alojada en Netlify, con código abierto disponible en la cuenta de Github del autor.La portada del libro ha sido creada utilizando una fotografía de acceso abierto de Pawel Czerwinski publicada en Unsplash.","code":""},{"path":"index.html","id":"cómo-usar-el-libro","chapter":"Bienvenida","heading":"¿Cómo usar el libro?","text":"El libro cuenta con capítulos secuenciales. Si es tu primera vez con R, se sugiere continuar la secuencia. La información está organizada de manera que permita al lector identificar la teoría y ejemplos, junto con ciertos contenidos resaltados como se muestra continuación:","code":""},{"path":"prefacio.html","id":"prefacio","chapter":"Prefacio","heading":"Prefacio","text":"","code":""},{"path":"prefacio.html","id":"por-qué-aprender-r","chapter":"Prefacio","heading":"¿Por qué aprender R?","text":"Sin importar tu carrera de origen, es más que seguro nunca pensaste que algún día terminarías queriendo aprender programar. Esta necesidad se está haciendo cada vez más frecuentes entre profesionales de distintas ramas de la ciencia. Las razones de aprender programar pueden ser diversas, pero casi siempre se centran en la necesidad de analizar datos, hacer ciencia, participar en un grupo de investigación, o para tener herramientas analíticas para el doctorado. Pero ¿Por qué R?.\nFIGURA 0.1: Fortalezas que presenta el lenguaje de programación R y lo destacan por sobre otros lenguajes como Python o Julia.\nR es uno de los lenguajes más populares para ciencia de datos e investigación científica. Es considerado uno de los lenguajes de programación más sencillos de aprender. Tres razones técnicas por las cuales aprender R por sobre otros lenguajes implican:Estuvo orientado al desarrollo estadístico desde su concepción. Casi cualquier análisis puede ejecutarse con él.Estuvo orientado al desarrollo estadístico desde su concepción. Casi cualquier análisis puede ejecutarse con él.necesita compilarse para interpretarse. Es suficiente con usar un interprete como RStudio para que las órdenes se ejecuten.necesita compilarse para interpretarse. Es suficiente con usar un interprete como RStudio para que las órdenes se ejecuten.Una de las particularidades del lenguajes que es basado en vectores. Esto simplifica el uso de funciones hacia conjuntos de datos, haciendo del lenguaje rápido en procesamientos básicos.Una de las particularidades del lenguajes que es basado en vectores. Esto simplifica el uso de funciones hacia conjuntos de datos, haciendo del lenguaje rápido en procesamientos básicos.Su amplia comunidad de desarrollo genera constantemente paquetes, manteniendo los usuarios en la vanguardia del avance científico.Su amplia comunidad de desarrollo genera constantemente paquetes, manteniendo los usuarios en la vanguardia del avance científico.Cuenta con una comunidad de soporte enorme en plataformas como StackOverflow, RStudio Community, R-Bloggers.Cuenta con una comunidad de soporte enorme en plataformas como StackOverflow, RStudio Community, R-Bloggers.Masiva cantidad de repositorios en la nube como GitHub, GitLab o Bioconductor donde se alberga toda la información que ha sido alguna vez creada y publicada con R.Masiva cantidad de repositorios en la nube como GitHub, GitLab o Bioconductor donde se alberga toda la información que ha sido alguna vez creada y publicada con R.","code":""},{"path":"prefacio.html","id":"a-quién-está-dirigido-este-libro","chapter":"Prefacio","heading":"¿A quién está dirigido este libro?","text":"El libro está planeado para llevarte desde cero en el manejo del lenguaje de programación R, sin importar el campo de la ciencia del que provengas. Los capítulos están diseñados para ser independientes entre sí. Siéntete libre de saltar entre los capítulos y seleccionar aquellos que sean de tu interés en el momento, si es que ya dominas conceptos más básicos.La progresión temática está adaptada los primeros dos cursos del programa Data Science: Estadística y Análisis de Datos en R, ofrecido por el autor de este libro Irwing S. Saldaña, Instituto de Ciencias Antonio Brack:Introducción R para CienciasGráficos estadísticos avanzados con REl programa comenzó ser dictado en 2020, y ha recibido estudiantes de diferentes partes de América Latina, El Caribe, y países como Estados Unidos o España. Nuestros alumnos cuentan con diversos perfiles profesionales: biólogos, médicos y otros profesionales de la salud, ingenieros, psicólogos, entre otros; además, profesionales de otras ramas tan afines las ciencias básicas o aplicada, como economistas, tecnólogos o especialistas en finanzas.","code":""},{"path":"prefacio.html","id":"agradecimientos","chapter":"Prefacio","heading":"Agradecimientos","text":"FALTA","code":""},{"path":"esencialesRRStudio.html","id":"esencialesRRStudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Capítulo 1 Esenciales de R y RStudio","text":"Comenzar el aprendizaje de un lenguaje de programación puede resultar doblemente engorroso si nunca se estuvo en contacto con un editor de texto, o un interprete de lenguaje de programación. Este primer capítulo está enteramente dedicado brindarle al lector los puntos esenciales para entender el uso de RStudio, el principal editor de texto especializado para el lenguaje R. Se recomienda realizar los pasos de instalación y configuración, además de una revisión concienzuda de los tópicos aquí presentados, antes de pasar tener el primer contacto con la sintaxis del código de R (sección 2. Primer contacto con R).\nFIGURA 1.1: Estructura temática del capítulo “Esenciales de R y RStudio”.\n","code":""},{"path":"esencialesRRStudio.html","id":"instalación-de-r-y-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.1 Instalación de R y RStudio","text":"Para utilizar el lenguaje de programación R (en adelante R), proponemos el uso del ambiente de desarrollo integrado RStudio. Este programa mejorará enormemente el flujo, la velocidad y la eficiencia de trabajo con R. RStudio es más que un editor de texto que resalta la sintaxis del código de R, sino que también permite tener paneles de trabajo organizados que facilitan su uso.Requerimientos mínimos del sistema para ejecutar RStudio:Sistema con CPU de 64 bits. Con 32 bits es posible instalar R pero las versiones más recientes de RStudio.Procesadores de 2 núcleos (equivalente Intel® Core™ i3 o AMD Ryzen™ 3).4 Gb RAM.Espacio en almacenamiento de 100 Gb.Requerimientos recomendados del sistema para ejecutar RStudio:Procesadores de 4 más núcleos (equivalente Intel® Core™ i5 más o AMD Ryzen™ 5 más).8 más Gb RAM.Más de 100 Gb de espacio de almacenamiento.\nPara efectos de este libro, se deberá utilizar las versiones listadas (o posteriores) de los siguientes programas, según el sistema operativo:","code":""},{"path":"esencialesRRStudio.html","id":"para-windows","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Para Windows:","text":"R version 4.1.2 (2021-11-01) – “Bird Hippie” DescargaRStudio Desktop 2022.02.0+443 DescargaRtools4.0 Descarga","code":""},{"path":"esencialesRRStudio.html","id":"para-macos","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Para macOS:","text":"R version 4.1.2 (2021-11-01) – “Bird Hippie” DescargaRStudio Desktop 2021.09.1+372 DescargaXQuartz 2.8.1. Descarga","code":""},{"path":"esencialesRRStudio.html","id":"para-ubuntudebian","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Para Ubuntu/Debian:","text":"lo largo del libro brindamos comentarios o soporte para el uso de R o RStudio en UNIX/GNU/Linux/Ubuntu. Las principales razones son que la mayoría de usuarios que aprenden R suelen utilizar sistemas operativos de código libre, además de que algunos paquetes han presentado problemas al ser instalados.Primero, se debe preparar el índice de paquetes del sistema:Luego, ejecuta:Con lo anterior ya se tiene R instalado. Más adelante, cuando se desee actualizar R, ejecuta el código:Luego, añadir el repositorio de CRAN:Para Instalar RStudio para Ubuntu 18, Ubuntu 20 o Debian 10Los pasos aquí detallados están publicados en la web oficial de RStudio. Otros códigos interesantes puedes hallarlos en diferentes referencias como las del Center Open Middleware.","code":"sudo apt updatesudo apt -y upgradesudo apt -y install r-basesudo apt-get remove --purge r-base*sudo gedit /etc/apt/source.listsudo apt-get install gdebi-core\nwget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-2022.02.0-443-amd64.deb\nsudo gdebi rstudio-server-2021.09.2-382-amd64.deb"},{"path":"esencialesRRStudio.html","id":"configuración-de-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.2 Configuración de RStudio","text":"La siguiente es una configuración sugerida para que RStudio sea visualizado de igual manera por todos los estudiantes que usen este libro, y se guíen mejor con la sintaxis del código, ordenamiento de paneles, codificación, idioma del texto, entre otros.\nFIGURA 1.2: Para iniciar la configuración de RStudio, clic en tools/ Global Options.\n\nFIGURA 0.1: Abrirá la ventana de configuraciones. En la pestaña General se verifica la versión de R que está ejecutando RStudio.\n\nFIGURA 1.3: En la pestaña Code se configura la mayor cantidad de puntos necesarios para que el código sea legible. Aquí se muestra la configuración de las pestañas Editing y Display. Las dos opciones nuevas en la versión de RStudio 1.4+ son (con flechas rojas), son importantes en mejorar la lectura del código para principiantes: una permite identificar los pares de paréntesis con colores diferenciables (Rainbow parentheses en pestaña Display), y la otra es un primer intento de crear un operador pipe nativo para el código básico de R (Use native pipe operator, |>). Este último lo habilitaremos para seguir usando el pipe de tidyverse %>%.\n\nFIGURA 1.4: En la pestaña Saving es importante definir la codificación que usarán los archivos generados por RStudio. Se recomienda dar clic en Change... y luego seleccionar la codificación UTF-8.\n\nFIGURA 1.5: Las pestañas Completion y Diagnóstico se modifican mucho, pero sí es necesario mencionar que si notáse que el programa se ejecuta muy lento, se debe considerar desactivar las opciones de diagnóstico (marcadas en rojo).\n\nFIGURA 1.6: La organización de los paneles descritos en la sección 1.4 Paneles de RStudio se configuran previamente en la pestaña Pane Layout. la izquierda: la organización por defecto. la derecha: se deberá seleccionar todas las pestañas (excepto VCS y Connections) con un check dentro del panel superior derecho. Eso hará que el panel inferior derecho cambie de nombre “TabSet”.\n\nFIGURA 1.7: El siguiente paso es cambiar la ubicación de TabSet haciendo clic y cambiando el panel por Console. Clic en Aplicar para definir los cambios.\n\nFIGURA 1.8: La configuración de R Markdown es solo para evitar que se cuelgue al usar los documentos. Definir todas las casillas y selectores como se muestra continuación en las pestañas Basic y Advanced.\n\nFIGURA 1.9: Para trabajar correctamente con los documentos R Markdown y evitar que se cuelguen, desmarcar la casilla con flecha roja. En la pestaña Spelling, se especifica el uso del lenguaje para el texto de los documentos. Selecciona de la lista “Spanish”. Clic en Aplicar para definir los cambios.\n","code":""},{"path":"esencialesRRStudio.html","id":"nuevas-características-de-rstudio-versión-2022-actualizado-23-02-22","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.3 Nuevas características de RStudio versión 2022 (Actualizado: 23-02-22)","text":"Durante febrero de 2022 se actualizó RStudio la primera versión del año: 2022.02.0+443. En esta versión, el soporte gráfico fue actualizado, además de permitir algunos cambios en la visualización de R Markdown. El detalle de la actualización publicada por Studio Blog está disponible aquí.\nFIGURA 1.10: En la sección de R Markdown, pestaña Visual, apareció una nueva opción para numerar las líneas de código dentro de cada code chunk (flecha roja izquierda, cambio visualizado en la flecha roja derecha). Además, la forma de cambiar del modo editor visual (Visual) editor de código (Source) está dispuesto de manera más elegante. Estos cambios, están acompañados en mejoras en la salida gráfica y corrección de algunos problemas menores de los R Markdown.\n","code":""},{"path":"esencialesRRStudio.html","id":"tema-brackinstitute-2022","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.4 Tema BrackInstitute (2022)","text":"Este es un requerimiento especial para los estudiantes que usen este libro en las clases, en vivo o grabadas, del Instituto de Ciencias Antonio Brack través de la plataforma educativa online masterX. Se les solicita instalen el tema de color de RStudio BrackInstitute para que la sintaxis del código sea del mismo color que el mostrado en clase, facilitando así su comprensión. Si eres un lector que está llevando el programa, sientete libre instalar el tema también.\nFIGURA 1.11: Vista previa del tema BrackInstitute.\nPara instalarlo, copia las líneas de código completas en la consola.Como se muestra continuación:\nFIGURA 1.12: Código de instalación del tema BrackInstitute en la consola, listo para ser ejecutado.\nFinalmente, presiona enter para comenzar su ejecución.Si todo va bien, el tema cambiará automáticamente. Para más temas desarrollados para el Instituto de Ciencias Antonio Brack, visita el repositorio Primolius-Theme de Irwing S. Saldaña.","code":"\ninstall.packages(\"rstudioapi\")\ntema_BrackInstitute <- fs::path_temp(\"tema_BrackInstitute\", ext = \"tmTheme\")\ndownload.file(\"https://raw.githubusercontent.com/irwingss/Primolius-Theme/main/BrackInstitute.tmTheme\",tema_BrackInstitute)\nrstudioapi::addTheme(tema_BrackInstitute, apply = TRUE)"},{"path":"esencialesRRStudio.html","id":"panelesRStudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.5 Paneles de RStudio","text":"Existen diversos editores de código que permiten trabajar con R, pero ninguno con la versatilidad de RStudio. El programa está dividido en paneles que uno puede reorganizar conveniencia. Más allá de la posición o el orden de los paneles, es necesario que se sepa reconocerlos por su contenido, las pestañas que contiene, entre otros. Aquí se presentan los paneles en su posición clásica, junto con algunas barras y botones que se deben conocer al iniciar con RStudio.\nFIGURA 1.13: Panel de Trabajo. Aquí aparecerán los archivos de trabajo de R, sean R script o R Markdown. Además, es donde aparecen las bases de datos cuando se pide visualizarlas en RStudio.\n\nFIGURA 1.14: Consola. Es el panel donde se imprimen los resultados textuales y numéricos junto con el código que los genera.\n\nFIGURA 1.15: Panel de pestañas: aquí encontrarás: el ambiente (Environment) donde se guardan los objetos creados o cargados en RStudio; la historia (History) de las ejecuciones realizadas durante la sesión de RStudio; archivos (Files) para visualizar los archivos de la carpeta de trabajo actual (definida como la carpeta “documentos” por defecto); la pestaña de visualización de gráficos estáticos (Plots); pestaña de instalación y actualización de paquetes (Packages); la pestaña de ayuda (Help); y el visualizador (Viewer) de gráficos animados, gráficos 3D, objetos HTML. las conexiones (Connections) que se pueden realizar con bases de datos (Oracle, SQL, Salesforce, Spark, Hipe, entre otros); tutoriales (tutorial) precargados usando shiny para el uso básico de R y RStudio.\n\nFIGURA 1.16: Barra de opciones rápidas.\n\nFIGURA 1.17: Barra de menús. De las pestañas más importantes: File nos permite crear o cargar archivos; Session, definir espacio de trabajo actual; y Tools, ingresar las configuraciones de RStudio. Usos más avanzados, como la depuración de código o el uso de versiones de control (Git), también se manejan desde las opciones de esta barra.\n","code":""},{"path":"esencialesRRStudio.html","id":"librerías-y-repositorios","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.6 Librerías y Repositorios","text":"Una de las mayores virtudes de R es la enorme comunidad de desarrollo que ha creado asombrosas funcionalidades para simplificarle el flujo de trabajo otras personas. Estas funcionalidades en realidad son funciones (para mayor detalle sobre ellas, visita la sección 2.7 Funciones). La estructura que almacena funciones se conoce como librería o paquete. Para poder una función en RStudio, se debe instalar previamente el paquete que la contiene. Los paquetes están publicados en repositorios. Los principales son:CRAN (de Comprehensive R Archive Network en inglés), el repositorio oficial de R. Solo los paquetes aprobados y con soporte de fallos constante son publicados aquí.CRAN (de Comprehensive R Archive Network en inglés), el repositorio oficial de R. Solo los paquetes aprobados y con soporte de fallos constante son publicados aquí.GitHub, el repositorio más grande oficial en el que se pueden encontrar paquetes de R. Muchos repositorios en CRAN mantienen versiones beta en GitHub para su testeo.GitHub, el repositorio más grande oficial en el que se pueden encontrar paquetes de R. Muchos repositorios en CRAN mantienen versiones beta en GitHub para su testeo.Bioconductor, el mayor repositorio de paquetes asociados bioinformática y ciencias afines.Bioconductor, el mayor repositorio de paquetes asociados bioinformática y ciencias afines.\nFIGURA 1.18: Instalación manual de paquetes.\nSi se requiere instalar paquetes de CRAN (e.g., tidyverse) con código, se utilizará un código similar este:Para paquetes desde GitHub (eg., rbrack del repositorio de la cuenta irwingss), se instalará previamente el paquete de CRAN devtools, para luego usar una función almacenada en él install_github():","code":"\ninstall.packages(\"tidyverse\")\ninstall.packages(\"devtools\")\ndevtools::install_github(\"irwingss/rbrack\")"},{"path":"esencialesRRStudio.html","id":"actualización-de-librerías","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.7 Actualización de librerías","text":"Es importante mantener actualizada la paquetería. En los repositorios de cada paquete se suelen reportar fallos o inconsistencias que son resueltas y liberadas como una actualización. Se recomienda hacer esto al menos una vez por mes.\nFIGURA 1.19: Actualización manual de paquetes de CRAN.\nLos paquetes instalados desde repositorio oficial, deberán ser actualizados “reinstalándolos” de manera forzada. Para forzar la instalación de un paquete ya instalado desde github, se usa el argumento force=TRUE:Para activar un paquete utiliza la función library():Desde el momento que se ejecuta el código anterior, tidyverse estará activo hasta que se cierre o reinicie el programa RStudio.Para acceder puntualmente la función bind_cols() de la librería dplyr, se usa:","code":"\ninstall.packages(\"devtools\")\ndevtools::install_github(\"irwingss/rbrack\", force=TRUE)\nlibrary(tidyverse)\ndplyr::bind_cols()"},{"path":"esencialesRRStudio.html","id":"tipos-de-documentos-en-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.8 Tipos de documentos en RStudio","text":"Luego de conocer los paneles de RStudio, es necesario crear los espacios donde se escribirán las órdenes modo de código. Estos documentos, como cualquier editor de texto, se pueden guardar o compartir, por ejemplo, mediante un correo electrónico.","code":""},{"path":"esencialesRRStudio.html","id":"r-script-.r","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.8.1 R Script (.R)","text":"Es el documento más simple donde puedo escribir R. Es un editor de texto como el bloc de notas de cualquier sistema operativo. obstante, este editor lee y colorea la sintaxis especial del código de R. Esto permite identificar cada parte del código según lo que sea: una variable, una función, un número, un texto, símbolos especiales, operadores, entre otros; simplificando enormemente la lectura del código y el aprendizaje de R.\nFIGURA 1.20: Procedimiento para abrir un documento de RScript usando el menú File/ New File/ R script.\n\nFIGURA 1.21: Apariencia de un R script con código. Notar los colores diferenciales para cada parte del código.\n","code":""},{"path":"esencialesRRStudio.html","id":"r-markdown-.rmd","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.8.2 R Markdown (.Rmd)","text":"Es un formato de archivo para la creación de documentos dinámicos. Estos pueden ser: páginas web, aplicaciones shiny, diapositivas, o cualquier tipo de reporte que puede ser exportado en formato .docx, .pdf o .html. Utiliza la sintaxis de Markdown pero posibilitando la inclusión de “pedacitos de código”, la traducción literal de code chunk. Los chunk se comportan como pequeños R scripts embebidos en el documento de texto plano escrito con sintaxis Markdown.Suena extremadamente complejo el decir “sintaxis Markdown”, pero lo es. Una vez uno sabe utilizar R, aprender Markdown resulta sencillo. Puedes aprender utilizar R Markdown con el libro en línea R Markdown: Definitive Guide en su versión de 2018, o el más actualizado R Markdown Cookbook de 2020. Ambos libros han sido escritos en colaboración de Yihui Xie, uno de las mentes brillantes de RStudio y quien le debemos el uso de documentos dinámicos en RStudio.se profundizará en el uso de R Markdown, dado que es el objetivo del programa, pero se utilizará frecuentemente durante las clases. Si eres un estudiante que ha está llevando el programa, podrás siempre utilizar tanto R script como R Markdown para ejecutar tus códigos. Se recomienda fuertemente comenzar utilizar este último dada la ventaja de permitir hacer anotaciones de texto plano como en cualquier editor de texto común.\nFIGURA 1.22: Procedimiento para abrir un documento de R Markdown usando el menú File/ New File/ R Markdown....\n\nFIGURA 1.23: Ventana emergente para darle nombre al documento R Markdown.\n\nFIGURA 1.24: Aparecerá un archivo R Markdown con texto de ejemplo para que tengamos una idea de qué se puede hacer con él.\n\nFIGURA 1.25: knit es una función del paquete knitr, desarrollado por Yihui Xie y colaboradores, para la generación de reportes dinámicos con R Markdown. Haciendo clic en el botón se despliega la lista de posibles exportaciones del documento. La exportación Knit HTML produce una página web de reporte.\n\nFIGURA 1.26: Tras hacer clic en Knit HTML, será necesario guardar en el almacenamiento de la computadora el documento, cuya extensión es .Rmd.\n\nFIGURA 1.27: En la consola, o en una pestaña Render, comenzará mostrarse la ejecución del código que knit desplegó para exportar el R Markdown página web HTML.\n\nFIGURA 1.28: Vista del archivo HTML generado partir del R Markdown de ejemplo.\n","code":""},{"path":"esencialesRRStudio.html","id":"proyectos-de-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.9 Proyectos de RStudio","text":"Este es el santo grial del uso de RStudio para crear una diversidad de repositorios: de trabajo, colaboraciones, diapositivas, páginas web, blogs, libros, entre otros. Para poder usar un proyecto de RStudio con dichos propósitos, se necesita aprender usar las versiones de control de proyectos con Git y Shell. Puedes iniciar en este tema con una genial presentación de su uso, elaborado por University Zurich.Este apartado solo se centrará en el uso de proyectos para trabajos locales. Una vez se domine este uso, será más sencillo entender cómo elaborar otras cosas más complejas.Aquí se muestran los pasos para crear un proyecto local:\nFIGURA 1.29: Para crear un proyecto local, ir menu File/ New Project....\n\nFIGURA 1.30: Para efectos de este libro, selecciona la primera opción. Clic en New Directory para crear en el almacenamiento de tu computador una carpeta nueva donde se almacenará todo los respecto este proyecto. Existing Directory solo se usará cuando ya se ha creado de antemano una carpeta donde se quiere almacenar el proyecto. Para versiones de control con Git y GitHub, el proceso se inicia con Version Control, para crear la carpeta de trabajo (tal como las anteriores opciones), pero el proyecto estará casi listo para hacer commit y publicar los cambios en GitHub.\n\nFIGURA 1.31: En Directory name: escribe el nombre del proyecto, mismo que también tendrá la nueva carpeta de trabajo que se creará en tu computador. En el botón Browse..., podrás ubicar una carpeta madre donde irás creando proyectos para mantenerlos todos ordenados y accesibles. Puede ser una subcarpeta dentro de documentos, con algún nombre genérico como “proyectos”, “proyectos de R”, entre otros. Finalmente, clic en Create Project.\n\nFIGURA 1.32: Se abrirá una nueva sesión con título idéntico la carpeta de proyecto creada (aquí “Investigación ”). Nótese el ambiente (environment) en blanco. Todas las variables y funciones que se creen o carguen en el proyecto permanecerán en este ambiente específico del proyecto.\n\nFIGURA 1.33: En la pestaña de Files se verá el contenido de todo lo que copiemos dentro de la carpeta del proyecto. Puedes acceder la carpeta de trabajo haciendo clic en / Show Folder New Windows. Allí podrás pegar archivos o documentos que necesites cargar posteriormente en tu proyecto.\n\nFIGURA 1.34: Para crear un nuevo proyecto, abrir uno existente o cerrar el proyecto actual (flecha roja), existe el menú de acceso rápido que tiene el mismo nombre que tu proyecto actual. Para ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd().\n\nFIGURA 1.35: En tu computador, encontrarás creada la carpeta del proyecto, en la dirección que especificaste, donde podrás pegar los archivos que aparecerán en la pestaña de Files del Panel de Ambiente del proyecto.\nPara ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd().Para ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd().Si necesitas cambiar manualmente tu proyecto otro directorio (carpeta) de trabajo, ejecuta la función setwd() definiendo dentro de ella y entre comillas la nueva dirección deseada. Por ejemplo:\n\nsetwd(\"C:/Users/irwin/Documents/Otra_Carpeta/Subcarpeta B\")\nSi necesitas cambiar manualmente tu proyecto otro directorio (carpeta) de trabajo, ejecuta la función setwd() definiendo dentro de ella y entre comillas la nueva dirección deseada. Por ejemplo:setwd(\"C:/Users/irwin/Documents/Otra_Carpeta/Subcarpeta B\")olvides las comillas al inicio y final de la dirección, ni que los slash usados son forwardslash (hacia delante) /, backslash (hacia atrás) \\.\nolvides las comillas al inicio y final de la dirección, ni que los slash usados son forwardslash (hacia delante) /, backslash (hacia atrás) \\.","code":""},{"path":"esencialesRRStudio.html","id":"pedir-ayuda","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.10 Pedir ayuda","text":"Pedir ayuda sin internet es algo posible en RStudio. Todas las librerías instaladas contienen información de respaldo sobre el uso de cada función que almacenan.Para acceder ella, se debe acceder la pestaña Help.\nFIGURA 1.36: Accediendo la pestaña Help para buscar ayuda sobre la función mean(). Nótese que solo se busca el nombre de la función sin paréntesis.\n\nFIGURA 1.37: Detalle de la ayuda de la función mean(). Es muy útil revisar la sección Arguments donde se describen los argumentos, además los ejemplos de uso.\nEs posible pedir ayuda con código. Ejecutando la función help() conteniendo el nombre de la función que se desea buscar, abrirá automáticamente la página de ayuda en la pestaña Help. Por ejemplo:help(varimax).Es posible pedir ayuda con código. Ejecutando la función help() conteniendo el nombre de la función que se desea buscar, abrirá automáticamente la página de ayuda en la pestaña Help. Por ejemplo:help(varimax).Otra forma de obtener el mismo resultado es usando el símbolo ?. Por ejemplo: ?varimax.Otra forma de obtener el mismo resultado es usando el símbolo ?. Por ejemplo: ?varimax.Si se necesita buscar un término, una función, se usaría el simbolo doble ?? antes del término buscar. Esta búsqueda es más lenta porque es más profunda y nos da todas las funciones donde se use dicho término. Por ejemplo, para buscar en todos archivos de ayuda de R el término deviance: ??deviance.\nSi se necesita buscar un término, una función, se usaría el simbolo doble ?? antes del término buscar. Esta búsqueda es más lenta porque es más profunda y nos da todas las funciones donde se use dicho término. Por ejemplo, para buscar en todos archivos de ayuda de R el término deviance: ??deviance.Para pedir ayuda en internet, se recomienda el uso del buscador exclusivo de temas en R conocido como rseek.\nFIGURA 1.38: Búsqueda de ayuda para la función mean() en rseek. Puedes acceder directamente la viñeta (PDF o web) del uso de la función (que es la misma información que en la búsqueda en RStudio), documentación, funciones asociadas, paquetes populares que usen mean, wikipedia, blogs como R-Bloggers donde expliquen su uso, Issues que son problemas reportados para la función, o paquetes que contengan una función con el mismo nombre.\n","code":""},{"path":"rbasico.html","id":"rbasico","chapter":"Capítulo 2 Primer contacto con R","heading":"Capítulo 2 Primer contacto con R","text":"Este capítulo se centra en el manejo y comprensión del lenguaje de programación R (en adelante: “R”) en nivel introductorio. Se asume que el lector tiene instalados y configurados los programas R, RStudio y algún otro programa de soporte para el manejo de paquetes. Si cuentas con ninguno en tu computadora, visita el capítulo 1 Esenciales de R y RStudio.Una ventaja de los lenguajes de programación es que permiten al usuario definir una secuencia de órdenes (comandos) adaptadas los requerimientos analíticos que tenga. El flujo de trabajo completo, el paso paso, queda escrito en el código. Este puede ser compartido con colegas en trabajos colaborativos.Antes de aprender sobre los métodos estadísticos de análisis que se revisarán en este libro, se necesita “hablar” correctamente el lenguaje R. Aprenderás trabajar con el código básico en R, crear variables para almacenar información, crear funciones para agilizar el flujo de trabajo, utilizar tidyverse para el manejo y limpieza de bases de datos, entre otros códigos útiles para inicar con R.La forma simplificada de cómo funciona R se resume en escribir una orden, presionar “algo” para que la computadora comience procesar la orden, y luego recibir un resultado textual o gráfico. Básicamente lo que hace cualquier otro lenguaje de programación.obstante, R es considerada una de los mejores lenguajes informáticos si nuestra orientación es más la investigación científica que el desarrollo informático. Otros lenguajes informáticos populares entre científicos son Python, MATLAB, C, C++, JavaScript, SQL, Scala, Julia, SAS, pero ninguno esta tan orientado al desarrollo estadístico como R.\nFIGURA 1.1: Ejemplo de uso de RStudio en el análisis estadístico.\nR es considerada como una calculadora con esteroides dado que puedes aplicar matemáticas con él; aquella ciencia sobre la que se cimentan casi todas las demás. Si puedes hacer ello, tienes las puertas abiertas aplicar análisis estadísticos, generar gráficos y todo lo que te imagines. Y pues sí, también hay cosas algo bizarras en R, como poder crear tu propio calendario o usar gatitos en un gráfico de dispersión de puntos.diferencia de los lenguajes humanos (idiomas), un lenguaje de programación debe estar escrito la perfección. hay espacio para una coma mal puesta, un paréntesis olvidado, o un nombre errado. La computadora solo ejecutará la orden si todo está escrito exactamente, tal y como debe ser. Todos los ejemplos de este libro pueden ser ejecutados correctamente si se escriben como es mostrado, y si instalaste todo lo necesario para trabajar (revisa las secciones Prerrequisitos y 1 Esenciales de R y RStudio.","code":""},{"path":"rbasico.html","id":"ejecutar-código","chapter":"Capítulo 2 Primer contacto con R","heading":"2.1 Ejecutar código","text":"¿Alguna vez hiciste un histograma de frecuencias?. Hacer uno de manera exploratoria es muy sencillo en R. El siguiente código hará dos cosas en un solo paso:Creará un conjunto de 10,000 datos aleatorios que siguen en la distribución normal.Generará el gráfico del histograma de frecuencias utilizando el conjunto previamente creado.Por ahora se ahondará en el detalle de qué cosa es rnorm() o hist().Para replicarlo, es necesario escribir el código exacto, para luego dar la orden, es decir, ejecutar el código. La ejecución se hace presionando en el teclado de tu computador control + enter o command + enter (usuarios macOS).Existen otros atajos de teclado para ejecuciones especiales.Ejecutar todas las líneas de código del script: control (o command) + shift + enter.Ejecutar desde el inicio del script hasta la línea actual: control (o command) + Alt + B.Ejecutar desde la línea actual hasta el final del script: control (o command) + Alt + E.Una pregunta que siempre genera confusión es la presencia de unos corchetes [1] en los resultados vistos tanto en consola como en este libro. Esto es parte de un resultado por si mismo, es la posición del elemento mostrado justo la derecha del corchete.Si se ejecuta el símbolo : entre dos números, R generará el rango de valores enteros entre dichos números, incluyéndolos.El resultado muestra los confusos [] la izquierda del primer elemento de cada fila del conjunto de datos resultante, indicando su posición dentro de la secuencia de elementos.","code":"\nhist(rnorm(10000))\n1:100\n#   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19\n#  [20]  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38\n#  [39]  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57\n#  [58]  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76\n#  [77]  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95\n#  [96]  96  97  98  99 100"},{"path":"rbasico.html","id":"r-como-calculadora","chapter":"Capítulo 2 Primer contacto con R","heading":"2.2 R como calculadora","text":"Como ya se había mencionado antes, R nos permite operar con código. La cosa más sencilla para hacer en R es sumar.TABLA 2.1: Operaciones (símbolos) aritméticas en R","code":"\n10 + 10\n# [1] 20"},{"path":"rbasico.html","id":"funciones-matemáticas","chapter":"Capítulo 2 Primer contacto con R","heading":"2.2.1 Funciones matemáticas","text":"Operaciones más complejas necesitan el uso de funciones. Estas son “secuencias de ordenes empaquetadas con un nombre pequeño y recordable” — la información sobre las funciones será desarrollada más adelante (2.6 Funciones y 6.2 Creación de Funciones). En la siguiente tabla se presentan las funciones matemáticas más comunes en R:TABLA 2.2: Operaciones matemáticas en R. Estos procedimientos matemáticos vienen predefinidos como ordenes denominadas “Funciones”.","code":""},{"path":"rbasico.html","id":"operadores-lógicos-y-relacionales","chapter":"Capítulo 2 Primer contacto con R","heading":"2.3 Operadores lógicos y relacionales","text":"Además de poder operar matemáticamente dos objetos, los lenguajes de programación como R usan condiciones lógicas para definir estados de verdadero (TRUE) o falso (FALSE). Existen dos tipos de operadores en R para de definir un estado lógico:Los operadores relacionales permiten comparar dos objetos y definir si la condición solicitada es verdadera o falsa. Por ejemplo: al preguntar R si 10 es mayor que 9, definirá la condición lógica como verdadera. Este tipo de comparaciones pueden ser mayor, menor, mayor igual, menor igual, igual, es igual o negación de un valor.Los operadores lógicos permiten definir una condición lógica en base los resultados de dos comparativas relacionales. Por ejemplo, si se desea filtrar las filas de una tabla para que se cumpla la condición 1: valores mayores 10 en la columna y la condición 2: valores menores que 5 en la columna B, es preciso que ambas condiciones se cumplan para que una fila se muestre en el resultado final, gracias al operador y. Si la condición usa el operador o, tanto se cumpla una u otra condición, la fila se mostrará en el filtrado final.En la siguiente tabla se muestran los operadores lógicos (últimos dos) y relacionales.TABLA 2.3: Operadores relacionales y lógicos en R, modos de uso y resultado lógico esperado (Verdadero o Falso).","code":""},{"path":"rbasico.html","id":"comentar-el-código","chapter":"Capítulo 2 Primer contacto con R","heading":"2.4 Comentar el código","text":"Una forma de asegurar que en el futuro el código escrito sea entendible, incluso por nosotros mismos, es comentándolo. Dejar comentarios nos ayudará recordar la intención con la que se escribió una sección determinada de los comandos.Para comentar en R, se requiere colocar el símbolo # la izquierda del texto ser considerado comentario.Como queda en evidencia, importa si el comentario está en solitario en una línea de código, o si está la derecha de algo que sí se quiere ejecutar. Esto afecta el resultado de la operación.","code":"\n# Esta es una suma \n2 + 2 \n# [1] 4\n\n10 * 2 # + 3029\n# [1] 20"},{"path":"rbasico.html","id":"creación-de-variables","chapter":"Capítulo 2 Primer contacto con R","heading":"2.5 Creación de variables","text":"Las variables son espacios virtuales, que puede contener de elementos o estar vacíos. Imagina que en una tabla de datos es un objeto “contenedor de mediciones” de un trabajo de investigación. Dicha tabla puede ser considerada una variable u objeto en R. Más adelante se hablará sobre los tipos de variables que existen en R.Una forma sencilla de comenzar con variables es guardar un valor numérica en la memoria de trabajo de RStudio, también llamado ambiente (pestaña Environment). En este sentido, se necesita asignar el contenido un nombre para que RStudio lo “recuerde”, haciendo uso de un operador de asignación <-. Para crear una variable llamada NUM conteniendo el número 2022.Si se desea ver el contenido de una variable previamente guardada en el ambiente, basta con ejecutar el nombre d ela variable:o usar la función print() para imprimirla en la consola:Una versión frecuentemente usada en ejemplos de R, involucra colocar la asignación entre paréntesis para que hacer dos cosas la vez: guardar la variable en el ambiente y mostrar su contenido en la consola.Existe la posibilidad de asignar con un operador de asignación inverso ->. Toma en cuenta qué debe ir en la cola (contenido) y en la cabeza (nombre) del operador. En otras palabras, la “flecha” que se forma con este operador siempre apunta al futuro nombre de la variable. Recuerda, la variable existe hasta que se ejecute y aparezca dicho nombre en el ambiente de RStudio.El símbolo = también funciona, pero, por convención, este se debe usar para crear variables. Se usará dentro de las funciones para “asignar” contenido los argumentos de las mismas (se explicará continuación).es posible continuar hablando de variables sin antes hacer una introducción las funciones en R.","code":"\nNUM <- 2022\nNUM\n# [1] 2022\nprint(NUM)\n# [1] 2022\n(NUM <- 2022)\n# [1] 2022\n# Operador de asignación inverso\n2022 -> NUM\n# Mal uso del símbolo =\nNUM = 2022\n\n# Buen uso del símbolo = : siempre dentro de una función.\n# Calcular el logaritmo en base 2 de 10\nbs <- 2 + 8\nlog(10, base = bs)\n# [1] 1"},{"path":"rbasico.html","id":"funciones","chapter":"Capítulo 2 Primer contacto con R","heading":"2.6 Funciones","text":"Se puede idealizar una función como una secuencia de órdenes (líneas de código) que tienen como objetivo aplicarle un procedimiento (gráfico, estadístico, de modificación o transformación, entre otros) un objeto de entrada (input) para generar un resultado (ouput). Dichas líneas de código están empaquetadas y almacenadas con un nombre.Reconocer una función en R es tarea sencilla, siempre será un nombre seguido de paréntesis. Por ejemplo, la función para calcular la desviación estándar de un conjunto de datos es sd(), que proviene del inglés standard deviation. Dentro de los paréntesis se deben colocar los argumentos de la función. El argumento más sencillo que algunas funciones necesitan es un conjunto de datos, y es justamente lo único que necesita sd().Si se ejecuta únicamente el nombre de una función existente en RStudio, en la consola se mostrará el contenido de la misma, la secuencia de órdenes que le dan forma la función. Ejecuta el sd para ver su contenido:La secuencia de órdenes dentro de sd es corta. Básicamente utiliza la función sqrt() para sacarle la raíz cuadrada la función var(), esta última calcula la varianza de un conjunto de datos. La estructura del código es propiamente la fórmula matemática para el cálculo de la desviación estándar. Aunque, decir verdades, el código luce más complejo, y es debido que aquí la función var() contiene argumentos condicionales para pedir que evalúe si el objeto x es correcto para la función, o si se necesita un cambio antes de procesarx en sd(). Pierde cuidado si se entiende mucho por ahora, es necesario comprender las funciones este nivel al iniciar con R.","code":"\n# Para crear un conjunto de datos en R se usa la función c()\nx <- c(7,9,3,4,5,3,7,8)\n\n# Usando sd() para hallar la desviación estándar de x\nsd(x)\n# [1] 2.315\nsd\n# function (x, na.rm = FALSE) \n# sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n#     na.rm = na.rm))\n# <bytecode: 0x000000001ba6a000>\n# <environment: namespace:stats>"},{"path":"rbasico.html","id":"funciones-básica-útiles","chapter":"Capítulo 2 Primer contacto con R","heading":"2.7 Funciones básica útiles","text":"En gran medida, las primeras etapas del aprendizaje de R involucran entender, siendo prioritario comprender qué dice un código y cómo se interpreta, más allá de escribirlo de memoria. En este sentido, la mayoría de funciones están nombradas de tal manera que indican para qué se pueden usar. Un dominio básico del idioma inglés será de mucha utilidad, principalmente porque casi todas las funciones de R están nombradas en inglés.Para facilitar esta primera etapa de aprendizaje, aquí se muestra una lista de funciones básica útiles, tanto nivel de programación como de análisis de datos, que serán clave para iniciar con R.Los ejemplos de uso de la tabla son aplicables, siempre y cuando se ejecute antes el siguiente código para activar la base de datos iris, y crear los vectores x, y, y letras.TABLA 2.4: Cincuenta funciones básicas útiles en R.","code":"\ndata(\"iris\")\nset.seed(123)\nx <- rnorm(30,2,1)\ny <- rnorm(30,5,3)*x/2\nletras <- c(\"A\", \"B\", \"A\", \"A\")"},{"path":"rbasico.html","id":"ejercicios-del-capítulo","chapter":"Capítulo 2 Primer contacto con R","heading":"2.8 Ejercicios del capítulo","text":"Soluciona la ecuación \\(\\frac{24+12}{(2 * 3)^2}\\).Resuelve \\(\\mathrm{log_{10}}(|\\frac{\\mathrm{exp(10)}^2}{-10*9^{6}}|)\\). Las barras verticales implican aplicar valor absoluto antes de calcular el logaritmo en base 10.\n1.La función sigmoidal \\(\\sigma(\\mathrm{z}) = \\frac{1}{1+e^{-\\mathrm{z}}}\\) es muy importante en estadística. Permite convertir el resultado de una regresión logística (Odds ratios) en probabilidades, facilitando la interpretación. Utiliza la fórmula \\(z = -1.69 + 1*0.56\\), emulando el resultado hipotético de una regresión logística, como insumo para calcular su probabilidad correspondiente utilizando la función sigmoidal. Como dato extra, el resultado de \\(\\sigma(\\mathrm{z})\\) por 100 para convertirlo probabilidad porcentual.Este ejercicio avanzado es de carácter explicativo. Sigue el ejercicio en la sección del Solucionario: Cap. 2, pregunta 3 correspondiente. Para calcular la derivaba de una función matemática, primero se debe crear la estructura matemática utilizando la función expression(). Una vez guardada la expresión, se utiliza la función D() para derivar. Calcula la primera derivada de:\n\\(f(x)=-2x+2\\)\n\\(f(x)=-2x^2-5\\)\n\\(f(x)=\\frac{x^3+2}{3}\\)\n\nCalcula la primera derivada de una expresión con dos variables:\n\\(f(x)=x^2+y^2+2*x*y-3*x+4*y+4\\)\n\nCalcula la segunda derivada de:\n\\(f(x)=x^2+3*x\\)Crea un vector con llamado num1 conteniendo 1000 números aleatorios con distribución normal, con promedio 19 y desviación estándar 1.29 (revisa la TABLA 2.4).\nAsegúrate de ejecutar previamente la función set.seed(123) para que el ejercicio sea replicable.Calcula el promedio y la desviación estándar del objeto num1. ¿Son exactamente iguales los valores definidos con los que creaste el conjunto de datos usando rnorm()?Calcula los cuartiles de dicho conjunto de datos. ¿Cuál es el valor del cuartil 50% (que es conocido como mediana) (revisa la TABLA 2.4)?Utilizando los operadores relacionales, convierte el vector numérico num1 vector lógico, aplicando la pregunta lógica “números mayores 20.0”. Guarda el resultado en el ambiente con el nombre VL20 (revisa la TABLA 2.3).Coloca el objeto VL20 dentro de la función mean(). La función mean calcula normalmente el promedio de un conjunto de datos numéricos. obstante, cuando se le ofrece un vector lógico, contabiliza la cantidad de elementos TRUE y ofrece la proporción de verdaderos respecto al total de elemento del conjunto. ¿Cuál es la proporción de elementos FALSE del vector VL20? (revisa la TABLA 2.3).Utilizando los operadores lógicos y relacionales, convierte el vector numérico num1 vector lógico, aplicando la pregunta lógica “números menor igual 19.5 y números mayor 15.7” (revisa la TABLA 2.3).","code":""},{"path":"estructurasdatos.html","id":"estructurasdatos","chapter":"Capítulo 3 Estructuras de datos","heading":"Capítulo 3 Estructuras de datos","text":"La sección básica de R, introdujo la terminología de variables y funciones en lo que respecta la sintaxis del código en R. En este capítulo, revisaremos todo lo que se debe conocer para manejar estructuras de datos diversas. Estos son los insumos esenciales que ingresarán más adelante en las funciones para poder procesar datos, analizarlos o convertirlos en impresionantes gráficos estadísticos. La teoría sobre las variables es la base de todo lo que desarrollarás en R.\nFIGURA 1.1: Ejemplos de código para crear las diferentes estructuras de datos de amplio uso en R.\n","code":""},{"path":"estructurasdatos.html","id":"clasificación-de-variables","chapter":"Capítulo 3 Estructuras de datos","heading":"3.1 Clasificación de variables","text":"Toda variable cuenta con dos atributos: clase y estructura. Para entender cómo se almacenan los datos en R, se necesita conocerlas detalle.\nFIGURA 3.1: Analogía del gato en la caja para entender las variables. Aquí, el gato es el contenido; la caja, la estructura. Esta “variable” podría ser considerada de la clase “contenedora de gatos” y de estructura “cúbica”. De igual manera, en R reconoceremos variables contenedoras de números, de caracteres, de valores lógicos, mismos que podrán estar ordenados en estructuras de una, dos, tres o N dimensiones.\n","code":""},{"path":"estructurasdatos.html","id":"clases-atómicas","chapter":"Capítulo 3 Estructuras de datos","heading":"3.1.1 Clases atómicas","text":"Según su contenido, en R existen seis clases básicas (o atómicas) de variables:Clase lógica: identificado con el nombre logicalClase caracter o texto: identificado con el nombre characterClase número con decimales: conocidos como doubles, identificado con el nombre numericClase número entero: identificado con el nombre integerClase número complejo: identificado con el nombre complexClase crudo o en bits: identificado con el nombre rawDe estos, los últimos tres serán utilizando lo largo de este libro. Quizá surja la pregunta de por qué usar números enteros. En realidad una variable del tipo numeric ya incluye enteros y con decimales (es decir, todos los números reales). Para efectos de una gran cantidad de funciones estadísticas, en R es relevante brindarle números enteros como integer, o diferenciarlos de numeric.","code":""},{"path":"estructurasdatos.html","id":"estructuras-de-datos","chapter":"Capítulo 3 Estructuras de datos","heading":"3.1.2 Estructuras de datos","text":"Según su estructura, las variables pueden tener una forma de almacenamiento con diferente dimensionalidad.La estructura más básica de R es el vector, con una sola dimensión.El vector se convierte en un factor si es que contiene información categorizada, y sigue teniendo una dimensión.Si vectores se colocan verticalmente, y se apilan lado lado, se convierten en una estructura de dos dimensiones. Dependiendo de sus características estas pueden ser:\nmatrices, data frames o tibbles.Se puede considerar los arrays como arreglos multidimensionales de vectores.Finalmente, las listas son estructuras de datos básicas. se consideran dimensionales dado que almacena otras estructuras de datos secuencialmente. Una lista puede albergar vectores, factores, matrices, data frames, tibbles, arrays, incluso otras listas.\nFIGURA 1.2: Estructuras informáticas para almacenar de datos en el lenguaje R.\n","code":""},{"path":"estructurasdatos.html","id":"vectores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2 Vectores","text":"R es un lenguaje basado en vectores. La estructura de almacenamiento de datos más básica es el vector. Un vector contiene elementos, que pueden ser números, textos, valores lógicos, y de cualquier clase atómica. obstante, solamente puede almacenar elementos de una única clase atómica la vez. Solo números, solo texto, solo valores lógicos.","code":""},{"path":"estructurasdatos.html","id":"crear-un-vector","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2.1 Crear un vector","text":"Para crear un vector, se utiliza la función c() donde especifíco los elementos directamente:Un operador de gran utilidad es : que permite crear rangos de números enteros.Además de c(), existe la función vector() para crear vectores vacíos de una longitud y clase atómica determinado.La razón para usar vector() es para crear un contenido vacío de una longitud determinada, el cual podremos ir llenando con los resultados de un loop. Nos adelantaremos un poco con el código un tanto más avanzado, pero verás el uso de esta función.","code":"\n# Vector numérico\nnumeros <- c(1,2,3,4,5,6)\nnumeros\n# [1] 1 2 3 4 5 6\n1:6\n# [1] 1 2 3 4 5 6\n# Vector lógico de longitud (length) 10\nvLog <- vector(\"logical\", length=10)\nvLog\n#  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n# Vector de caracteres de longitud (length) 15\nvCha <- vector(\"character\", length=15)\nvCha\n#  [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n\n# Vector de números de longitud (length) 20\nvNum <- vector(\"numeric\", length=20)\nvNum\n#  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\nvNum <- vector(\"numeric\", length=6)\nvNum\n# [1] 0 0 0 0 0 0\n\n# Loop donde a una secuencia de números del 1 al 6\n# se le multiplica a cada uno por 100\nfor (i in 1:6){\n  vNum[i] <- i * 100\n}\n\n# Vector ya rellenado por el loop\nvNum\n# [1] 100 200 300 400 500 600"},{"path":"estructurasdatos.html","id":"vectores-de-secuencias-y-repeticiones","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2.2 Vectores de secuencias y repeticiones","text":"Existen formas especiales de crear vectores implica el uso de seq() para crear secuencias numéricas, o rep() para repetir de algún valor una determinada cantidad de veces.Para crear una secuencia del 10 al 100 cada 5 elementos, se usa el argument = dentro de seq()Para crear una secuencia del 36 números entre 10 y 100, se usa el argument length = dentro de seq()Las repeticiones implica definir dos argumentos: lo que se repetirá, y la cantidad de veces. Para repetir el carácter América 10 veces, se usa:","code":"\nseq(10, 100, by=5)\n#  [1]  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100\nseq(10, 100, length=36)\n#  [1]  10.00  12.57  15.14  17.71  20.29  22.86  25.43  28.00  30.57  33.14  35.71\n# [12]  38.29  40.86  43.43  46.00  48.57  51.14  53.71  56.29  58.86  61.43  64.00\n# [23]  66.57  69.14  71.71  74.29  76.86  79.43  82.00  84.57  87.14  89.71  92.29\n# [34]  94.86  97.43 100.00\nrep(\"América\", 10)\n#  [1] \"América\" \"América\" \"América\" \"América\" \"América\" \"América\" \"América\" \"América\"\n#  [9] \"América\" \"América\""},{"path":"estructurasdatos.html","id":"funciones-útiles-para-vectores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2.3 Funciones útiles para vectores","text":"Resulta útil conocer algunas de las funciones básicas en R para trabajar con vector.TABLA 3.1: Operaciones (símbolos) aritméticas en R","code":""},{"path":"estructurasdatos.html","id":"operaciones-numéricas-con-vectores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2.4 Operaciones numéricas con vectores","text":"Las operaciones matemáticas que involucran vectores se aplican con lo que se denomina element-wise, que se traduce como elemento elemento.En la operación anterior, se le sumó 5 unidades cada elemento de vector2. Si se operan dos vectores de igual longitud, los elementos del primer vector se van operando uno por uno contra el elemento correspondiente en la posición homóloga del segundo vector.Si se operan dos vectores de diferente longitud de elementos, el resultado tendrá la longitud del mayor, y el menor se irá operando elemento elemento, y se recliclará desde su primer elemento para aplicarse hasta culminar de operar todo.","code":"\nvector2 <- 10:20\nvector2 + 5\n#  [1] 15 16 17 18 19 20 21 22 23 24 25\nvector3 <- 0:10\nvector2 * vector3\n#  [1]   0  11  24  39  56  75  96 119 144 171 200\nvector4 <- 1:3\n\n# Revisar el contenido de los vectores\nvector2\n#  [1] 10 11 12 13 14 15 16 17 18 19 20\nvector4\n# [1] 1 2 3\n\n# Producto de dos vectores de longitud desigual\nvector2 * vector4\n# Warning in vector2 * vector4: longer object length is not a multiple of shorter\n# object length\n#  [1] 10 22 36 13 28 45 16 34 54 19 40"},{"path":"estructurasdatos.html","id":"valores-perdidos-en-vectores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2.5 Valores perdidos en vectores","text":"Estos elementos son los tipicos NA que aparecen cuando hay un dato disponible en un conjunto de datos. Si operamos un vector con funciones estadísticas, como mean() o sd(), el resultado se verá afectado por la presencia del NA, y este impedirá que se genere el resultado correcto. Para evitarlo, es importante incorporar el argumento na.rm = TRUE para remover los NA de un conjunto de datos y operar sin ellos.","code":"\nvectorNA <- c(10, 20, NA, 40, 50)\n\n# Operar directo (errado)\nmean(vectorNA)\n# [1] NA\n\n# Operar incluyendo el argumento para remover NAs\nmean(vectorNA, na.rm = TRUE)\n# [1] 30"},{"path":"estructurasdatos.html","id":"indexación-de-vectores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2.6 Indexación de vectores","text":"Indexar significa ubicar posiciones. Cada elemento dentro del vector tiene una posición única. Se puede extraer el contenido de una posición única definida dentro de un vector utilizando el operador []. Utilicemos el objeto vectorNA creado en la sección anterior:Para extraer más de un elemento la vez, en lugar de colocar una sola posición dentro de [], se coloca un vector con las posiciones.Otro modo es crear un vector de índice, index, que contenga las posiciones de interés:Indexar con operaciones lógicas también es posible. El operador [] puede recibir vectores lógicos, para entregar como resultado aquellos elementos cuyas posiciones sean TRUE dentro del vector lógico. Si se define una operación lógica como ¿Qué elementos de un vector numérico x son valores mayores iguales 25?, se debe escribir en R: x>=25.Conociendo esto, el resultado de la indexación sería:En caso se requiera conocer en qué posiciones se cumple la condición lógica anterior, usa la función ():Dado que () solo reporta posiciones TRUE y obvia las posiciones con NA, usarlo en la indexación es la mejor manera de reportar los elementos sin incluir en el resultado los valores NA:","code":"\nvectorNA[1]\n# [1] 10\n\nvectorNA[3]\n# [1] NA\n\nvectorNA[5]\n# [1] 50\nvectorNA[c(1,3)]\n# [1] 10 NA\n\nvectorNA[c(1,3,5)]\n# [1] 10 NA 50\nindex <- c(1,3,5)\nvectorNA[index]\n# [1] 10 NA 50\n# Veamos el resultado para entender la operación lógica\n# (nota que los elemento NA no se convierten a TRUE o FALSE)\nvectorNA>=25\n# [1] FALSE FALSE    NA  TRUE  TRUE\n# En dos pasos\nindex <- vectorNA>=25\nvectorNA[index]\n# [1] NA 40 50\n\n# En un paso\nvectorNA[vectorNA>=25]\n# [1] NA 40 50\nwhich(vectorNA>=25)\n# [1] 4 5\nvectorNA[which(vectorNA>=25)]\n# [1] 40 50"},{"path":"estructurasdatos.html","id":"muestreo-de-vectores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2.7 Muestreo de vectores","text":"En ocasiones es requerido realizar muestreos virtuales, en la que se especifique cuántos elementos se requieren extraer de un vector. En R, la extracción se realiza con la función sample(), como:Muestreo con reemplazamiento: donde cada elemento extraído se devuelve al conjunto inicial. Este elemento ya muestreado permanecer disponible para aparecer en siguiente muestreo aleatorio. Se especifica con el argumento replace = TRUE.Muestreo con reemplazamiento: donde cada elemento extraído se devuelve al conjunto inicial. Este elemento ya muestreado permanecer disponible para aparecer en siguiente muestreo aleatorio. Se especifica con el argumento replace = TRUE.Muestreo sin reemplazamiento: donde cada elemento extraído vuelve aparecer en el conjunto inicial. Este elemento ya muestreado estará disponible para aparecer en siguiente muestreo aleatorio. Se especifica con el argumento replace = FALSE.Muestreo sin reemplazamiento: donde cada elemento extraído vuelve aparecer en el conjunto inicial. Este elemento ya muestreado estará disponible para aparecer en siguiente muestreo aleatorio. Se especifica con el argumento replace = FALSE.Si el muestreo es sin reemplazamiento, solo se puede extraer un máximo de elementos igual la cantidad de elementos del conjunto inicial.","code":"\n# Muestreo con reemplazamiento\n# de un conjunto de 2 elementos\nconjuntoInicial <- c(\"A\",\"Z\")\n\nset.seed(123)\nsample(conjuntoInicial, 25, replace = TRUE)\n#  [1] \"A\" \"A\" \"A\" \"Z\" \"A\" \"Z\" \"Z\" \"Z\" \"A\" \"A\" \"Z\" \"Z\" \"Z\" \"A\" \"Z\" \"A\" \"Z\" \"A\" \"A\" \"A\"\n# [21] \"A\" \"Z\" \"A\" \"A\" \"A\"\n\n# Muestreo sin reemplazamiento\n# de un conjunto con 30 elementos\nconjuntoInicial2 <- rep(c(\"A\",\"Z\"), c(10,20))\n\nset.seed(321)\nsample(conjuntoInicial2, 25, replace = FALSE)\n#  [1] \"Z\" \"Z\" \"Z\" \"Z\" \"Z\" \"Z\" \"Z\" \"A\" \"Z\" \"Z\" \"Z\" \"Z\" \"A\" \"A\" \"Z\" \"Z\" \"Z\" \"Z\" \"A\" \"Z\"\n# [21] \"Z\" \"A\" \"Z\" \"A\" \"A\""},{"path":"estructurasdatos.html","id":"factores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3 Factores","text":"Los factores son tipos especiales de vectores, donde R evalúa los valores únicos de la secuencia y los define como categorías. Son muy útiles en programación dado que permiten graficar, por ejemplo, con un color diferenciado cada nivel de una variable categorica. Imagina que se requiere hacer un gráfico de dispersión de puntos para ver la relación entre dos variables, pero permitiendo que el color de los puntos refleje el grupo al que pertenece cada observación:\nFIGURA 3.2: Ejemplo de uso del conjunto de datos Grupos (que es un Factor) empleada para colorear los puntos del gráfico de enfrentamiento de las variables Pétalo y Sépalo.\n","code":""},{"path":"estructurasdatos.html","id":"crear-un-factor","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3.1 Crear un factor","text":"Para crear un factor se utiliza la función factor(), y un vector dentro de ella. La función evaluará los valores únicos del vector y definirá los niveles del factor:","code":"\n# Crear un vector de texto cualquiera \nvectorC <- c(\"A\",\"B\",\"A\",\"A\",\"A\",\"A\",\"B\",\"A\",\"C\",\"C\",\"B\")\n\n# Crear un vector de texto cualquiera\nvectorN <- c(1,1,2,1,2,2,1,1,2,1,2,1,2,2,2,1)\n\n# Crear factores en base a los vectores\nfactor(vectorC)\n#  [1] A B A A A A B A C C B\n# Levels: A B C\nfactor(vectorN)\n#  [1] 1 1 2 1 2 2 1 1 2 1 2 1 2 2 2 1\n# Levels: 1 2"},{"path":"estructurasdatos.html","id":"niveles-de-un-factor","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3.2 Niveles de un factor","text":"Cada factor muestra sus niveles (Levels) al final de la secuencia. Se puede conocer cuales son los niveles de un factor guardado en el ambiente, utilizando la función levels():","code":"\n# Guardar el factor\nF1 <- factor(vectorC)\n\n# Revisar los niveles del factor\nlevels(F1)\n# [1] \"A\" \"B\" \"C\""},{"path":"estructurasdatos.html","id":"reordenar-los-niveles","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3.3 Reordenar los niveles","text":"El orden de los niveles es importante. Por defecto se ordenan los niveles de menor mayor (si son números), o de la la Z (sin son texto). Para una regresión, para un gráfico, el orden afecta los resultados. En una regresión lineal, el primer nivel de un factor puede ser considerado como nivel base, y las interpretaciones se harán como factores de aumento o disminución de los otros niveles respecto al nivel base. En un gráfico, el orden de los colores, o las etiquetas de un eje, seguirán este orden.Para cambiar el orden, las alternativas son variadas. Si solo se desea definir un nivel base, y el orden de los demás niveles es importante, se usa relevel() con el segundo argumento especificando el nivel que será el nuevo nivel base.Si se necesita especificar un orden definido manualmente para todos los niveles, es mejor definirlo al momento de crear el factor, usando el argumento levels=:","code":"\n# Especificando el primer nivel como \"C\" \nF1_cambiado <- relevel(F1, \"C\")\nF1_cambiado\n#  [1] A B A A A A B A C C B\n# Levels: C A B\n# Crear un factor con niveles ordenados manualmente\nF2 <- factor(vectorC, levels=c(\"B\",\"C\",\"A\"))\n\n# Revisar los niveles de F2\nlevels(F2)\n# [1] \"B\" \"C\" \"A\""},{"path":"estructurasdatos.html","id":"etiquetas-de-un-factor","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3.4 Etiquetas de un factor","text":"En algunas ocasionas existe la necesidad de cambiar el nombre de algún (o algunos) nivel(es), se puede usar un vector con los cambios deseados como contenido del argumento labels=. El orden de las etiquetas cambiadas debe seguir el mismo orden original de los niveles:Como fue evidente, al crear un factor se puede usar como insumo un vector, como vectorN, u otro factor previamente creado, como F1.","code":"\n# Crear un factor con cambie de etiqueta\nF3 <- factor(F1, labels=c(\"Absoluto\", \"B\", \"Cambio\"))\n\n# Revisar los niveles de F3\nlevels(F3)\n# [1] \"Absoluto\" \"B\"        \"Cambio\"\n\n# Revisando el contenido original (sin cambios) en F1\nF1\n#  [1] A B A A A A B A C C B\n# Levels: A B C\n\n# Revisar el contenido de F3\nF3\n#  [1] Absoluto B        Absoluto Absoluto Absoluto Absoluto B        Absoluto\n#  [9] Cambio   Cambio   B       \n# Levels: Absoluto B Cambio"},{"path":"estructurasdatos.html","id":"valores-perdidos-en-un-factor","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3.5 Valores perdidos en un factor","text":"Los valores perdidos forman parte de los niveles de un factor. Se muestran como contenido del conjunto de datos, pero son considerados niveles.Por el contrario, si el investigador coloca deliberadamente los NA como texto, estos sí serán considerados como nivel:","code":"\nconjunto1 <- c(1,2,1,1,NA,2,1,NA,3,2,1,3,2,3,3,NA)\nfctConjunto1 <- factor(conjunto1)\nfctConjunto1\n#  [1] 1    2    1    1    <NA> 2    1    <NA> 3    2    1    3    2    3    3    <NA>\n# Levels: 1 2 3\nconjunto2 <- c(1,2,1,1,\"NA\",2,1,\"NA\",3,2,1,3,2,3,3,\"NA\")\nfctConjunto2 <- factor(conjunto2)\nfctConjunto2\n#  [1] 1  2  1  1  NA 2  1  NA 3  2  1  3  2  3  3  NA\n# Levels: 1 2 3 NA"},{"path":"estructurasdatos.html","id":"indexación-de-factores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3.6 Indexación de factores","text":"Indexar significa ubicar posiciones. Tal cual con un vector, en los factores cada elemento dentro del vector tiene una posición única. Para extraer el contenido de una posición única definida se utiliza igualmente el operador []. Utilicemos el objeto conjunto1 creado en la sección anterior:El resto de reglas para indexar varios elementos la vez, o indexar con vectores lógicos, son las mismas que para un vector:Indexar con operaciones relacionales puede ser engorroso. Debido que los niveles del factor ya son considerados números per se, sino que son categorías textuales, utiliza operaciones como mayor qué, menor qué y otras similares, produce resultados vacíos NA. Es imposible para R saber que Categoría 1 es menor igual que Categoría 2. obstante, se pueden aún utiliza operaciones relacionales de igualdad:Si se lidia con factores conteniendo NA (su versión en texto NA), el indexar sin () genera que se muestren los NA cuando son requeridos. Utilicemos el objeto fctConjunto1:Esto ocurre al usar () dentro de los []:","code":"\nfctConjunto2[3]\n# [1] 1\n# Levels: 1 2 3 NA\n\nfctConjunto2[5]\n# [1] NA\n# Levels: 1 2 3 NA\n# Indexar varios elementos a la vez\nfctConjunto2[c(3,5,10)]\n# [1] 1  NA 2 \n# Levels: 1 2 3 NA\n# Con operación relacional de menor qué\n# obtendremos un resultado erróneo\nindex <- fctConjunto2 < 3\n# Warning in Ops.factor(fctConjunto2, 3): '<' not meaningful for factors\nfctConjunto2[index]\n#  [1] <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>\n# Levels: 1 2 3 NA\n\n# Con operación relacional de igualdad\nindex <- fctConjunto2 == 3\nfctConjunto2[index]\n# [1] 3 3 3 3\n# Levels: 1 2 3 NA\n\n# Utilizando el operador %in% podemos pedir \n# varias igualdades a la vez\nindex <- fctConjunto2 %in% c(1,2)\nfctConjunto2[index]\n# [1] 1 2 1 1 2 1 2 1 2\n# Levels: 1 2 3 NA\nindex <- fctConjunto1 == 3\nfctConjunto1[index]\n# [1] <NA> <NA> 3    3    3    3    <NA>\n# Levels: 1 2 3\nfctConjunto1[which(index)]\n# [1] 3 3 3 3\n# Levels: 1 2 3"},{"path":"estructurasdatos.html","id":"matrices","chapter":"Capítulo 3 Estructuras de datos","heading":"3.4 Matrices","text":"Las matrices son la primera estructura de dos dimensiones aquí presentada. Son útiles cuando se desee aplicar álgebra de matrices. Pero en el día día, son rudimentarias y limitantes. Sobre esto último, se comporta como un vector: permiten almacenar solamente un tipo de elemento en toda la tabla.Para crear una matriz, podemos tomar un vector e ir ordenando los elementos de manera vertical u horizontal en una tabla de \\(n*p\\) dimensiones (donde: \\(n\\) es la cantidad de filas y \\(p\\) de columnas), utilizando la función matrix().Al encajar el contenido del vector de longitud \\(n\\) en forma de matriz (dos dimensiones) sin especificar la cantidad de columnas o filas, crea una matriz de una sola columna con \\(n\\) filas.Para definir la cantidad de columnas y filas se usan los argumentos ncol= y nrow=, respectivamente:Por defecto las columnas se llenan columna por columna. Para cambiar el comportamiento de llenado fila por fila, se usa:En este libro se hace uso extenso de matrices, por lo que es necesario conocerlas mayor detalle.","code":"\n# Crear un rango de valores cualquiera\nvector1<-1:10\nmatrix(vector1)\n#       [,1]\n#  [1,]    1\n#  [2,]    2\n#  [3,]    3\n#  [4,]    4\n#  [5,]    5\n#  [6,]    6\n#  [7,]    7\n#  [8,]    8\n#  [9,]    9\n# [10,]   10\nmatrix(vector1, ncol=2, nrow=5)\n#      [,1] [,2]\n# [1,]    1    6\n# [2,]    2    7\n# [3,]    3    8\n# [4,]    4    9\n# [5,]    5   10\nmatrix(vector1, ncol=2, nrow=5, byrow=TRUE)\n#      [,1] [,2]\n# [1,]    1    2\n# [2,]    3    4\n# [3,]    5    6\n# [4,]    7    8\n# [5,]    9   10"},{"path":"estructurasdatos.html","id":"data-frames","chapter":"Capítulo 3 Estructuras de datos","heading":"3.5 Data Frames","text":"Esta estructura de datos de dos dimensiones es la más parecida lo que una hoja de cálculo permite: colocar diferentes tipos de elementos dentro de la tabla, como texto, números, elementos lógicos, entre otros. Al cargar en RStudio una base de datos de un estudio, esta se almacenará como data frame casi siempre (cuando , podrá ser un tibble o una lista).Para crear data frames manualmente en R, se utiliza la función data.frame(), especificando como elementos el contenido de cada columna.obstante, el modo de trabajo habitual implica cargar archivos desde el computador hacia RStudio para guardar tablas de datos como objetos data frame en el ambiente. Para cargar archivos excel (.xlsx) o delimitados (.csv, .txt), o incluso archivos desde SPSS (.SAV), revisa la sección 4.2 Lectura de bases de datos.","code":"\nDF <- data.frame(Col1 = 1:5, \n                 Col2 = c(\"Sit1\",\"Sit1\",\"Sit2\",\"Sit2\",\"Sit3\"),\n                 Log = c(T,T,F,F,T),\n                 Fct = factor(c(\"A\",\"B\",\"C\",\"B\",\"A\")))\n\nDF\n#   Col1 Col2   Log Fct\n# 1    1 Sit1  TRUE   A\n# 2    2 Sit1  TRUE   B\n# 3    3 Sit2 FALSE   C\n# 4    4 Sit2 FALSE   B\n# 5    5 Sit3  TRUE   A"},{"path":"estructurasdatos.html","id":"tibbles","chapter":"Capítulo 3 Estructuras de datos","heading":"3.6 Tibbles","text":"Los Tibbles son estructuras de datos en dos dimensiones que tienen todas las ventajas de almacenaje que los data frame. Pueden almacenar datos de cualquier clase (texto, números, lógicos, etc). Pero presentan dos ventajas adicionales:Pueden almacenar objetos complejos, como modelos o fórmulas en las celdas, como si se tratase de un elemento cualquiera.Al imprimir sus resultados en consola, brindan información extra sobre el tamaño de la tabla (filas por columnas), y el tipo de datos que almacena de cada columna (su clase).También, al ser vistos en consola, solo muestran las filas y columnas adecuadas para el pequeño tamaño de la consola, sin desbordarse como lo hacen los data frame. Esto último se verá reflejado cuando visualices en consola bases de datos grandes.","code":"\nTB <- tibble(Col1 = 1:5, \n                 Col2 = c(\"Sit1\",\"Sit1\",\"Sit2\",\"Sit2\",\"Sit3\"),\n                 Log = c(T,T,F,F,T),\n                 Fct = factor(c(\"A\",\"B\",\"C\",\"B\",\"A\")))\nTB\n# # A tibble: 5 x 4\n#    Col1 Col2  Log   Fct  \n#   <int> <chr> <lgl> <fct>\n# 1     1 Sit1  TRUE  A    \n# 2     2 Sit1  TRUE  B    \n# 3     3 Sit2  FALSE C    \n# 4     4 Sit2  FALSE B    \n# 5     5 Sit3  TRUE  A"},{"path":"estructurasdatos.html","id":"listas","chapter":"Capítulo 3 Estructuras de datos","heading":"3.7 Listas","text":"Las listas son estructuras de datos primitivas. En teoría, los data frame y tibbles son estructuras internamente basadas en listas. En ellos, sus elementos son únicamente vectores de elementos que se comportan como columnas de las tablas cuando imprimidos el objeto.Las listas propiamente dichas, las que creamos con la función list(), son estructuras amigables, almacenando prácticamente toda clase de objetos: vectores, factores, matrices, data frames, tibbles, incluso otras listas.Como se mencionó arriba, la función list() permite crear listas nombradas. Cada elemento adquiere como nombre un número correlativo:Para crear una lista nombrada, se puede colocar cada elemento precedido con un nombre y el símbolo igual.Resulta muy engorroso tener que colocar los nombres dado que las variables ya tienen uno, esto se puede solucionar si se usa la función lst() de la librería dplyr.Es más que seguro que en el futuro encontrarás ventajoso tener listas nombradas para el manejo de estructuras de datos.","code":"\n# Creación de una lista no nombradas. Utilizaremos\n# algunos objetos que hemos ido creando hasta aquí.\nprimeraLista <- list(TB, DF, vector1, F2)\nprimeraLista\n# [[1]]\n# # A tibble: 5 x 4\n#    Col1 Col2  Log   Fct  \n#   <int> <chr> <lgl> <fct>\n# 1     1 Sit1  TRUE  A    \n# 2     2 Sit1  TRUE  B    \n# 3     3 Sit2  FALSE C    \n# 4     4 Sit2  FALSE B    \n# 5     5 Sit3  TRUE  A    \n# \n# [[2]]\n#   Col1 Col2   Log Fct\n# 1    1 Sit1  TRUE   A\n# 2    2 Sit1  TRUE   B\n# 3    3 Sit2 FALSE   C\n# 4    4 Sit2 FALSE   B\n# 5    5 Sit3  TRUE   A\n# \n# [[3]]\n#  [1]  1  2  3  4  5  6  7  8  9 10\n# \n# [[4]]\n#  [1] A B A A A A B A C C B\n# Levels: B C A\n# Creación de una lista no nombradas. Utilizaremos\n# algunos objetos que hemos ido creando hasta aquí.\nL1 <- list(TB = TB, DF = DF, vecThor = vector1, factor = F2)\nL1\n# $TB\n# # A tibble: 5 x 4\n#    Col1 Col2  Log   Fct  \n#   <int> <chr> <lgl> <fct>\n# 1     1 Sit1  TRUE  A    \n# 2     2 Sit1  TRUE  B    \n# 3     3 Sit2  FALSE C    \n# 4     4 Sit2  FALSE B    \n# 5     5 Sit3  TRUE  A    \n# \n# $DF\n#   Col1 Col2   Log Fct\n# 1    1 Sit1  TRUE   A\n# 2    2 Sit1  TRUE   B\n# 3    3 Sit2 FALSE   C\n# 4    4 Sit2 FALSE   B\n# 5    5 Sit3  TRUE   A\n# \n# $vecThor\n#  [1]  1  2  3  4  5  6  7  8  9 10\n# \n# $factor\n#  [1] A B A A A A B A C C B\n# Levels: B C A\nL2 <- dplyr::lst(TB, DF, vector1, F2)\nL2\n# $TB\n# # A tibble: 5 x 4\n#    Col1 Col2  Log   Fct  \n#   <int> <chr> <lgl> <fct>\n# 1     1 Sit1  TRUE  A    \n# 2     2 Sit1  TRUE  B    \n# 3     3 Sit2  FALSE C    \n# 4     4 Sit2  FALSE B    \n# 5     5 Sit3  TRUE  A    \n# \n# $DF\n#   Col1 Col2   Log Fct\n# 1    1 Sit1  TRUE   A\n# 2    2 Sit1  TRUE   B\n# 3    3 Sit2 FALSE   C\n# 4    4 Sit2 FALSE   B\n# 5    5 Sit3  TRUE   A\n# \n# $vector1\n#  [1]  1  2  3  4  5  6  7  8  9 10\n# \n# $F2\n#  [1] A B A A A A B A C C B\n# Levels: B C A"},{"path":"estructurasdatos.html","id":"coerción-de-variables","chapter":"Capítulo 3 Estructuras de datos","heading":"3.8 Coerción de variables","text":"Existe la posibilidad de cambiar la naturaleza digital, es decir, la clase y/o estructura, de un objeto en R. Coercer implica permitir que un objeto transforme su clase o estructura otra diferente la inicial, permitiendo flexibilizar el manejo de datos de una manera increíblemente sencilla.Para coercer basta con usar las variables del grupo .---(). Los tres guiones equivalen un texto variable que le da la característica cada función de dicho grupo. continuación se muestran algunas de las funciones de coerción más importantes:TABLA 3.2: Principales funciones de coerción de clase de variable.TABLA 3.3: Principales funciones de coerción de estructura de variable.Más allá de las funciones convencionales, existen muchas más funciones de coerción que modificas conjuntos de datos particulares. Por ejemplo, para trabajar con fechas, objetos especiales de R como dendrogramas, fórmulas, entre otros.TABLA 3.4: Algunas funciones de coerción especiales.","code":""},{"path":"estructurasdatos.html","id":"ejercicios-del-capítulo-1","chapter":"Capítulo 3 Estructuras de datos","heading":"3.9 Ejercicios del capítulo","text":"Crea una variable llamada datosNumeros que contenga 200 números (decimales) entre el 20 y 80.Utilizando la función sample(), crea una variable llamada muestr4 que contenga el muestreo de 10 elementos (con repetición) del objeto datosNumeros. Utiliza set.seed(123)\nantes del muestro para asegurar la replicabilidad del mismo.Redondea todos los elementos del vector datosNumeros dos decimales, coerciona el objeto texto, y guarda el resultado en el ambiente con el nombre coer.Utiliza coer para coercer el objeto hacia número nuevamente.Crea el vector miPais que contenga únicamente el nombre de tu país de residencia. Coerce miPaishacia vector numérico. ¿Notas la advertencia?Crea una data frame llamada DF10, cuyo contenido sea: una columna numérica, otra de texto, y otra lógica, todas de 5 elementos. Coerce DF10 hacia matriz. ¿Notas algo particular en los elementos de la matriz?Crea una lista llamda list1 que contenga los objetos: muestr4, datosNumeros,DF10. Luego, indexa las posiciones:\n- Fila 2, columna 3 del objeto DF10.\n- Elemento 150 del objeto datosNumeros.\n- El elemento 5 del objeto muestr4.Realiza esto utilizando tanto una lista nombra como nombrada.","code":""},{"path":"carga-y-exportación-de-datos.html","id":"carga-y-exportación-de-datos","chapter":"Capítulo 4 Carga y exportación de datos","heading":"Capítulo 4 Carga y exportación de datos","text":"En este capítulo corto, se abordarán los tópicos de carga y exportación de bases de datos. Si bien se abordará la carga de todos los tipos posibles de archivos en RStudio, se cubrirán las extensiones esenciales para todo iniciante en el manejo de datos. Extensiones especiales como, .shp para la diagramación de mapas, serán desarrollados en este libro.\nFIGURA 1.1: Extensiones de archivos frecuentemente usados en R y RStudio. Más allá de lo mencionado aquí, existe una vasta cantidad de extensiones posibles de gestionar con RStudio. Dependiendo del campo de aplicación específico en el que te desarrolles, continuarás encontrando nuevas extensiones.\nEn adelante se espera que los archivos cargar estén colocados dentro de la carpete de proyecto activa. De ser el caso, se pueden buscar manualmente los archivos con una ventana emergente de búsqueda activada por la función file.choose().Por ejemplo, para leer un archivo .csv dentro de la carpeta de proyecto, se usa:Con búsqueda manual, se recomienda emplear file.choose() en reemplazo del nombre del archivo:\nFIGURA 0.1: Vista previa de la venta emergente que se abre tras ejecutar el código mostrado anteriormente con file.choose(). Si se muestra automáticamente, algunas veces se abre minimizada. Se recomienda buscar en los programas abiertos de la barra de tareas del sistema operativo en cuestión.\n","code":"\nmisDatos <- read.csv(\"archivo.csv\")\nmisDatos <- read.csv(file.choose())"},{"path":"carga-y-exportación-de-datos.html","id":"lectura-de-bases-de-datos","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1 Lectura de bases de datos","text":"","code":""},{"path":"carga-y-exportación-de-datos.html","id":"archivos-delimitados","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1.1 Archivos delimitados","text":"Modo de uso de la función read.csv() para la carga de archivos delimitados por comas, extensión .csv:Los argumentos por defecto de read.csv() permiten cargar un archivo con encabezados, rellenar las celdas vacías con NA (recomendado), con el separador de celdas coma , y el separador de decimales .. Si el documento de interés tiene estas características, bastará con colocar lo siguiente para cargarlo:Modo de uso de la función read.csv() para la carga de archivos delimitados por comas, extensión .csv:Por otro lado, existe read.csv2() que hace lo mismo que la anterior, pero para tablas que cuenten con el separador de celdas punto y coma ; y el separador de decimales ,. Todo dependerá de cómo esté configurado tu archivo original.Otros argumentos interesantes en ambas funciones son:","code":"\n### Argumentos a utilizar\nread.csv(\"archivo.csv\", # Nombre o ruta completa al archivo\n         sep = \",\",     # Separador de los valores\n         dec = \".\",     # Punto decimal\n         header = TRUE, # Leer el encabezado (TRUE) o no (FALSE)\n         fill = TRUE)   # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE)\nread.csv(\"datos_investig.csv\")\n### Argumentos a utilizar\nread.csv(\"archivo.csv\", # Nombre o ruta completa al archivo\n         sep = \",\",     # Separador de los elementos\n         dec = \".\",     # Separador decimal\n         header = TRUE, # Leer el encabezado (TRUE, por defecto) o no (FALSE)\n         fill = TRUE)   # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE)\nread.csv2(\"datos_investig2.csv\")\n### Para definir qué valores sean considerados como NA (y no solo las celdas vacías)\nread.csv2(\"datos_investig3.csv\", na.strings = c(\"Na\", \"NA\", \"-9999\"))\n\n### Para coercer las columnas de texto a factor al leer el documento\nread.csv2(\"datos_investig3.csv\", stringsAsFactos = TRUE)\n\n### Para no cargar ciertas filas del documento (por ejemplo la fila 10)\nread.csv2(\"datos_investig3.csv\", skip = 10)"},{"path":"carga-y-exportación-de-datos.html","id":"archivos-tabulados","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1.2 Archivos tabulados","text":"Modo de uso de la función read.table() para la carga de archivos delimitados por tabulaciones, extensión .txt:Otros argumentos interesantes son idénticos los encontrados en las funciones mostradas anteriormente:","code":"\n### Argumentos a utilizar\nread.table(\"archivo.txt\", # Nombre o ruta completa al archivo\n         sep = \"\",        # Separador de los elementos\n         dec = \".\",       # Separador decimal\n         header = FALSE)   # Leer el encabezado (TRUE) o no (FALSE, por defecto)\n### Para definir qué valores sean considerados como NA (y no solo las celdas vacías)\nread.table(\"datos_investig3.txt\", na.strings = c(\"Na\", \"NA\", \"-9999\"))\n\n### Para coercer las columnas de texto a factor al leer el documento\nread.table(\"datos_investig3.txt\", stringsAsFactos = TRUE)\n\n### Para no cargar ciertas filas del documento (por ejemplo la fila 10)\nread.table(\"datos_investig3.txt\", skip = 10)"},{"path":"carga-y-exportación-de-datos.html","id":"archivos-delimitados-con-otros-caracteres","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1.3 Archivos delimitados con otros caracteres","text":"Una función versátil es read.delim() y su compañera read.delim2(). Ambas permiten cargar archivos delimitados por cualquier carácter. Realizan carga de archivos tal y como lo hacen read.csv(), read.csv2() o read.table().Cuando se define el sep = \"\\t\" leen archivos tabulados; sep = \" \", separados por espacios; sep = \",\", separados por comas; o sep = \";\", separados por punto y coma. Se podrá colocar el separador respectivo en caso sea uno diferente los mencionados.","code":"\nread.delim(\"archivo.txt\", # Nombre o ruta completa al archivo (puede ser .csv también)\n         sep = \"\\t\",      # Separador de columnas\n         dec = \".\",       # Separador decimal\n         header = TRUE,  # Leer el encabezado (TRUE, por defecto) o no (FALSE)\n         fill = TRUE)     # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE)\n\nread.delim2(\"archivo.txt\", # Nombre o ruta completa al archivo (puede ser .csv también)\n         sep = \"\\t\",      # Separador de columnas\n         dec = \",\",       # Separador decimal\n         header = TRUE,  # Leer el encabezado (TRUE, por defecto) o no (FALSE)\n         fill = TRUE)     # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE)"},{"path":"carga-y-exportación-de-datos.html","id":"hojas-de-cálculo-de-excel","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1.4 Hojas de cálculo de Excel","text":"Existen varias librerías para cargar archivos de excel en R, con extensión .xlsx. Se recomienda el uso de la librería openxlsx, por su simplicidad de uso y porque demanda de instalaciones adicionales de otros programas.","code":"\nlibrary(openxlsx)\nread.xlsx(\"archivo.xslx\", # Nombre o ruta completa al archivo\n          colNames = TRUE, # Leer el encabezado (TRUE, por defecto) o no (FALSE)\n          na.strings = c(\"Na\", \"NA\", \"-9999\"), # Valores a ser considerados como NA\n          sep.names = \".\") # Rellena los espacios de los nombres de columnas con ."},{"path":"carga-y-exportación-de-datos.html","id":"bases-de-datos-de-r","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1.5 Bases de datos de R","text":"Los archivos de extensión .rda son la forma más sencilla de compartir bases de datos que solo serán abiertas en el entorno de R. son leídas con otro programa. Lo interesante de estas bases es que almacenan el nombre del objeto original con el que fueron creadas en R. Una vez cargas el archivo con la función load(), el objeto aparecerá en el ambiente con su nombre original (necesariamente el mismo nombre que el archivo.rda):","code":"\nload(\"archivo.rda\")"},{"path":"carga-y-exportación-de-datos.html","id":"archivos-de-spss","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1.6 Archivos de SPSS","text":"En algunas ocasiones, los investigadores que manejen SPSS querrán abrir sus archivos de datos, con extensión .SAV, para generar gráficos o análisis en R. Esto es posible gracias la integración realizada por una librería de tidyverse llamada haven:","code":"\nlibrary(haven)\nread_sav(\"archivo.SAV\")"},{"path":"carga-y-exportación-de-datos.html","id":"exportar-basas-de-datos","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.2 Exportar basas de datos","text":"Exportar archivos desde R es tarea sencilla. Se listan continuación las funciones de exportación de los formatos descritos en la sección anterior.","code":"\n### Exportar a .csv\nwrite.csv(objeto,              # Objeto del ambiente a exportar\n          \"nombre nuevo.csv\",  # Nombre del archivo a generar\n          row.names = FALSE)   # Incluir (TRUE) o no (FALSE, por defecto) \n                               # los nombres de las filas en el archivo final\n\n### Exportar a .txt\nwrite.delim(objeto,              # Objeto del ambiente a exportar\n            \"nombre nuevo.txt\",  # Nombre del archivo a generar\n            sep=\"\\t\")            # Separador de columnas\n\n### Exportar a .xlsx\nlibrary(openxlsx)\nwrite.xlsx(objeto,              # Objeto del ambiente a exportar\n           \"nombre nuevo.xlsx\")  # Nombre del archivo a generar)\n\n### Exportar a .rda\nsave(objeto,              # Objeto del ambiente a exportar\n     \"nombre nuevo.rda\")  # Nombre del archivo a generar)\n\n# Exportar a .SAV\nlibrary(haven)\nwrite_sav(objeto, \"nombre nuevo.sav\")"},{"path":"programación-funcional.html","id":"programación-funcional","chapter":"Capítulo 5 Programación funcional","heading":"Capítulo 5 Programación funcional","text":"R, en esencia, es un lenguaje de programación funcional. En R existen muchas herramientas y facilidades para la creación de funciones. Es posible hacer prácticamente de todo con funciones: crear nuevas variables, automatizar resultados de una secuencia de pasos de código usada frecuentemente, crear funciones dentro de funciones para automatizar procesos, por mencionar algunas posibilidades. En este capítulo, se comenzará describiendo la creación de funciones básicas para resolver problemas sencillos, se revisará el uso de operadores de control de flujo (, , else, ), y finalmente se utilizarán ambos conceptos para aplicaciones más avanzadas de programación con R.Estos tópicos son considerados por muchos autores como el una introducción R Avanzado, donde se explota al máximo el pensamiento funcional para aplicarlo en análisis de datos. Siéntete libre de revisar repetidamente el siguiente contenido porque será de muchísima utilidad en tu desarrollo como investigador usuario de R.\nFIGURA 1.1: Ejemplo sencillo del uso de programación funcional con loops (ciclos o iteraciones repetidas veces) para obtener un resultado.\n","code":""},{"path":"programación-funcional.html","id":"creacion-fun","chapter":"Capítulo 5 Programación funcional","heading":"5.1 Creación de funciones","text":"La gran comunidad de desarrollo detrás de R ha creado una infinidad de funciones, almacenadas en los miles de paquetes (o librerías), disponibles en el repositorio oficial CRAN, así como en repositorios secundarios (ver sección 1.6 Librerías y repositorios). Es casi seguro que más adelante te será útil crear funciones con las que suplir alguna necesidad en el análisis de datos. Cuando se detecta que algunas secuencias de órdenes se suelen repetir, crear una función que empaquete dicha secuencia permitirá automatizar procedimientos y simplificar el código. Como regla general, si copias y pegas una secuencia de órdenes para usarla más de 2 veces, ya se debería pensar en crear una función que compile la tarea.Crear un función involucra los siguientes pasos:Darle un nombre. Crear una función es como crear una variable: hay que asignarle un contenido un nombre.Luego de escribir el nombre, se tiene que usar la función llamada function()para indicar qué argumentos tendrá la nueva función.Definir el contenido de la función, la secuencia de órdenes, dentro de corchetes. Dentro de ellos se usarán los argumentos establecidos en function().\n","code":""},{"path":"programación-funcional.html","id":"ejemplo-simple","chapter":"Capítulo 5 Programación funcional","heading":"5.1.1 Ejemplo simple","text":"Comenzando con ejemplo muy simple, se creará una función que le sume 100 un número dado:","code":"\n### Modo 1: \n### Crear la función con corchetes\nmi.fun1 <- function(x){\n  x+100\n}\n\n### Modo 2:\n### Cuando el contenido de una función es muy sencillo,\n### el contenido puede ir sin llaves y en una sola línea:\nmi.fun2 <- function(x) x+100\n\n### Ambas funciones brindan el mismo resultado\nmi.fun1(156)\n# [1] 256\nmi.fun2(156)\n# [1] 256"},{"path":"programación-funcional.html","id":"función-de-gauss","chapter":"Capítulo 5 Programación funcional","heading":"5.1.2 Función de Gauss","text":"Recrear la famosa función de Carl Friedrich Gauss para calcular la suma de todos los números dentro de un rango numérico, implicar tomar su fórmula matemática:\\[ k = \\frac{n * ( n + 1 )}{2} \\]y convertirla en código funcional:","code":"\n### Crear la función\nk.Gauss <- function(n) {\n  (n * (n+1))/2\n}\n\n### Usar la función\nk.Gauss(100)\n# [1] 5050"},{"path":"programación-funcional.html","id":"variables-y-valores-por-defecto","chapter":"Capítulo 5 Programación funcional","heading":"5.1.3 Variables y valores por defecto","text":"Esa letra o palabra que se ha colocado dentro de la función function() recibe el nombre de variable de la función. Hasta aquí se definió una única variable dentro de cada función: x para mi.fun1() y mi.fun2(), o n para k.Gaus(). Pero se puede colocar más de una, e incluso definir valores por defecto en function(), mismos que se podrán modificar al usar la función ya creada. La siguiente función permitirá hallar el logaritmo en base 2 (definido por defecto) de la función matemática de Gauss, pero podrás modificar el valor cuando quieras posteriormente:","code":"\n### Crear la función\nlog.Gauss <- function(n, base = 2) {\n  resultado.Gauss <- (n * (n+1))/2\n  logaritmo <- log(resultado.Gauss, base=base)\n  return(logaritmo)\n}\n\n### Usar la función\nlog.Gauss(100)\n# [1] 12.3\n\n### Cambiando la base del logaritmo\nlog.Gauss(100, base = 10)\n# [1] 3.703\n\n### En casos como estos, donde la posición\n### de un argumento es única, puedes obviar\n### el nombre del mismo (base)\nlog.Gauss(100, 10)\n# [1] 3.703"},{"path":"programación-funcional.html","id":"almacenar-variables-directamente-en-el-ambiente","chapter":"Capítulo 5 Programación funcional","heading":"5.1.4 Almacenar variables directamente en el ambiente","text":"Como es evidente en el ejemplo anterior, se pueden crear variables dentro de una función utilizando el operador <-, pero estas son de carácter temporal. Una vez se imprime el resultado en consola, la variable temporal desaparece. Para que algún paso realizado dentro de una función se guarde como un objeto permanentemente en el ambiente, usa el símbolo especial <<-. En el siguiente ejemplo permitiremos que un paso de la función log.Gauss() se guarde en el ambiente:","code":"\n### Crear la función con guardado especial\nlog.Gauss <- function(n, base = 2) {\n  resultado.Gauss <<- (n * (n+1))/2   # Este objeto se guardará\n  logaritmo <- log(resultado.Gauss, base=base)\n  print(logaritmo)\n}\n\n### Usar la función\nlog.Gauss(100, base = 5)\n# [1] 5.298\n\n### Mostrar el objeto resultado.Gauss que se creó \n### automáticamente tras ejecutar log.Gauss()\nprint(resultado.Gauss)\n# [1] 5050"},{"path":"programación-funcional.html","id":"control-de-flujo","chapter":"Capítulo 5 Programación funcional","heading":"5.2 Control de flujo","text":"En R existen algunos operadores para controlar el flujo de las acciones tomar en la ejecución. Esto sucede solamente cuando se cumple una condición dada. Recordemos que las condiciones lógicas se resuelven como verdadera TRUE o falsa FALSE. Existen operadores de elección (, else) y de iteración o loop (, ). Se revisará detalle sus usos en las siguientes secciones.","code":""},{"path":"programación-funcional.html","id":"control-con-if","chapter":"Capítulo 5 Programación funcional","heading":"5.2.1 Control con if","text":"El primer operador de control de flujo destacar es el condicional . Este significa si, y ejecuta la expresión: si se cumple (es decir, si es TRUE), muestro un resultado. Este tienen la estructura básica:Para poner en contexto lo anterior:En este sentido,mostrará como resultado lo que esté la derecha del paréntesis de condición, siempre y cuando la condición sea verdadera. Cuando la condición es falsa, muestra resultado alguno:En la siguiente expresión, reemplazaremos la condición TRUE por una condición real con un vector llamado num. Se hará la pregunta lógica ¿es el objeto num numeric?. El resultado será un texto indicando que num es un número siempre que la condición sea verdadera.En el ejemplo con \"Andes Tropicales\", la condición fue verdadera, mostró resultado alguno en consola.","code":"\nif (condición) acción_si_la_condición_es_verdadera\n### Crear una condición verdadera\ncondicion <- TRUE\n\nif(condicion) 1\n# [1] 1\n### Crear una condición falsa\ncondicion <- FALSE\n\nif (condicion) 1\n### Cuando num es un número\nnum <- 123\n\nif (is.numeric(num)) paste(num, \"es un número\")\n# [1] \"123 es un número\"\n\n### Cuando num no es un número\nnum <- \"Andes Tropicales\"\n\nif (is.numeric(num)) paste(num, \"es un número\")"},{"path":"programación-funcional.html","id":"control-completo-con-if-y-else","chapter":"Capítulo 5 Programación funcional","heading":"5.2.2 Control completo con if y else","text":"El segundo operador de control que uno debe conocer es else. Este significa entonces, y suele colocarse acompañando para completar la condición universal: si se cumple, muestro un resultado; si se cumple, entonces muestro otro resultado. Utilizando ambis, se obtiene tienen la estructura básica:Poniendo en contexto lo mencionado:Es más frecuente utilizar llaves {} para definir el resultado de o el otro resultado de else:Para escribir un código con varias líneas de y else, es necesario respetar el sangrado (espacio desde el borde), siendo que else se muestre sangrado dentro de la cadena de código iniciada con .Veamos una aplicación más completa de todo lo discutido hasta el momento:continuación varias aplicaciones para identificar si un valor numérico es par o impar, para identificar si un valor es NA, y para identificar si un valor es del tipo carácter o texto:Crear un proceso complejo que involucre una respuesta para cualquiera de los tipos de elementos ofrecidos en el ejemplo anterior (valor numérico, NA y textual) puede ser un dolor de cabeza. Si se concatenan las condiciones con else e de manera errada, generará un error:La manera correcta de crear esta condición compleja se obtiene primero preguntando si el elemento valor es número o . Este paso es fundamental debido las limitaciones razonables de operar numéricamente con %% un texto, generando un error:Incluyendo la pregunta ¿es verdad TRUE que el valor es un número? con .numeric(valor) == TRUE para cuando valor es número; y la pregunta ¿es falso FALSE que el valor es un número? con .numeric(valor) == FALSE, para cuando valor es texto:Para entender la importancia de estos interruptores en la creación de funciones, revisemos el contenido de la función dist(), que calcula una matriz de distancias para análisis multivariados. Para esta función, es importante especificar qué método de cálculo de distancias se debe usar. Siempre existirá alguno definido por defecto, en este caso \"euclidean\" (distancia euclidiana). Reconoce las estructuras y else que usa la función para decidir qué hacer cuando se le otorgado uno u otro valor en el argumento method.","code":"\nif (condición) acción_si_la_condición_es_verdadera else acción_si_la_condición_es_falsa\n### Usar if y else con una condición lógica\ncondicion <- TRUE\n\nif (condicion) 1 else 0\n# [1] 1\n\n### Usar if y else con una condición lógica\ncondicion <- FALSE\n\nif (condicion) 1 else 0\n# [1] 0\n### Usar if y else con una condición lógica\ncondicion <- TRUE\n\nif (condicion) {1} else {0}\n# [1] 1\n\n### Usar if y else con una condición lógica\ncondicion <- FALSE\n\nif (condicion) {1} else {0}\n# [1] 0\n### Código de if y else en varias líneas\ncondicion <- FALSE\n\nif (condicion) {\n  1\n  } else {\n    0}\n# [1] 0\n### Cuando num es un número\nnum <- 123\n\nif (is.numeric(num)) {\n  paste(num, \"es un número\")\n  } else {\n  paste(num, \"no es un número\")\n    }\n# [1] \"123 es un número\"\n\n### Cuando num no es un número\nnum <- \"Andes Tropicales\"\n\nif (is.numeric(num)) {\n  paste(num, \"es un número\")\n  } else {\n    paste(num, \"no es un número\")\n    }\n# [1] \"Andes Tropicales no es un número\"\n### Con valor numérico para identificar par o impar\nvalor <- 120\n\nif((valor %% 2) == 0) {\n  print(paste(valor,\"es par\"))\n  } else if ((valor %% 2) != 0) {\n    print(paste(valor,\"es impar\")) \n    }\n# [1] \"120 es par\"\n\n### Con valor NA para identificar si es NA o un texto\nvalor <- NA\n\nif (is.na(valor)) {\n      print(paste(valor, \"es un valor perdido\"))\n    } else {\n      print(paste(valor, \"no es un valor perdido, debe ser un texto\"))\n    }\n# [1] \"NA es un valor perdido\"\n\n### Con valor NA para identificar si es NA o un texto\nvalor <- \"América\"\n\nif (is.na(valor)) {\n      print(paste(valor, \"es un valor perdido\"))\n    } else {\n      print(paste(valor, \"no es un valor perdido, debe ser un texto\"))\n    }\n# [1] \"América no es un valor perdido, debe ser un texto\"\n### Forma errada\nvalor <- \"Mil quinientos veinte\"\n\nif((valor %% 2) == 0) {\n  print(paste(valor,\"es par\"))\n  } else if ((valor %% 2) != 0) {\n    print(paste(valor,\"es impar\")) \n    } else if (is.na(valor)) {\n      print(paste(valor, \"es un valor perdido\"))\n    } else {\n      print(paste(valor, \"no es un valor perdido, debe ser un texto\"))\n    }\n# Error in valor%%2 : non-numeric argument to binary operator\n\"Mil quinientos veinte\" %% 2\n# Error in \"Texto\"%%2 : non-numeric argument to binary operator\n### Tómate el tiempo que necesites para \n### entender cómo funciona esta estructura\n### Prueba su aplicación cambiando el contenido de valor:\nvalor <- \"Mil quinientos veinte\"\n\nif (is.numeric(valor) == TRUE) {\n  if((valor %% 2) == 0) {\n    print(paste(valor,\"es par\"))\n    } else if ((valor %% 2) != 0) {\n      print(paste(valor,\"es impar\"))\n      }\n  } else if (is.numeric(valor) == FALSE) {\n    if (is.na(valor)) {\n      print(paste(valor, \"es un valor perdido\"))\n      } else {\n        print(paste(valor, \"no es un valor perdido, debe ser un texto\"))\n      }\n    }\n# [1] \"Mil quinientos veinte no es un valor perdido, debe ser un texto\"\ndist\n# function (x, method = \"euclidean\", diag = FALSE, upper = FALSE, \n#     p = 2) \n# {\n#     if (!is.na(pmatch(method, \"euclidian\"))) \n#         method <- \"euclidean\"\n#     METHODS <- c(\"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \n#         \"binary\", \"minkowski\")\n#     method <- pmatch(method, METHODS)\n#     if (is.na(method)) \n#         stop(\"invalid distance method\")\n#     if (method == -1) \n#         stop(\"ambiguous distance method\")\n#     x <- as.matrix(x)\n#     N <- nrow(x)\n#     attrs <- if (method == 6L) \n#         list(Size = N, Labels = dimnames(x)[[1L]], Diag = diag, \n#             Upper = upper, method = METHODS[method], p = p, call = match.call(), \n#             class = \"dist\")\n#     else list(Size = N, Labels = dimnames(x)[[1L]], Diag = diag, \n#         Upper = upper, method = METHODS[method], call = match.call(), \n#         class = \"dist\")\n#     .Call(C_Cdist, x, method, attrs, p)\n# }\n# <bytecode: 0x0000000030766730>\n# <environment: namespace:stats>"},{"path":"programación-funcional.html","id":"condicionales-en-vectores-de-más-de-un-elemento-con-ifelse","chapter":"Capítulo 5 Programación funcional","heading":"5.2.3 Condicionales en vectores de más de un elemento con ifelse()","text":"De manera similar al uso de y else, es posible operar de manera vectorial. Esto significa: aplicar una condición cada elemento de un vector, para que cuando esta se cumpla (sea TRUE) se de un resultado, mientras que otorgue otro cuando se cumpla (sea FALSE). La función ifelse(), encargada de ello, requiere como argumentos una condición lógica, un valor para cuando la condición sea TRUE y otro valor para cuando sea FALSE. La estructura básica es:Usando ifelse() para identificar los valores pares e impares de un vector numérico:Es posible incluir una función ifelse*() dentro de otra en la posición de resultado FALSE para concatenar varias condiciones aplicadas al mismo vector:","code":"\nifelse(condicion, \"acción_si_la_condición_es_verdadera\", \"acción_si_la_condición_es_falsa\")\n### Crear un vector cualquiera\nvector <- 1:50\n\n### Usar ifelse()\nifelse((vector %% 2) == 0, \"Par\", \"Impar\")\n#  [1] \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"  \n# [11] \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"  \n# [21] \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"  \n# [31] \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"  \n# [41] \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"   \"Impar\" \"Par\"\n### Usar ifelse()\nifelse((vector %% 2) == 0 & vector > 10, \"Par >10\", \n       ifelse((vector %% 2) == 0 & vector <= 10, \"Par <=10\", \n              ifelse((vector %% 2) != 0 & vector > 10, \"impar >10\", \"impar <=10\")))\n#  [1] \"impar <=10\" \"Par <=10\"   \"impar <=10\" \"Par <=10\"   \"impar <=10\" \"Par <=10\"  \n#  [7] \"impar <=10\" \"Par <=10\"   \"impar <=10\" \"Par <=10\"   \"impar >10\"  \"Par >10\"   \n# [13] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [19] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [25] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [31] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [37] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [43] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [49] \"impar >10\"  \"Par >10\""},{"path":"programación-funcional.html","id":"condicionales-en-vectores-case_when-de-dplyr","chapter":"Capítulo 5 Programación funcional","heading":"5.2.4 Condicionales en vectores case_when() de dplyr","text":"La función case_when() de la librería dplyr es la solución para cuando se necesita utilizar muchos ifelse() concatenados. Su uso, como otras funciones de dplyr, es sencillo. La estructura básica es:Resolviendo el último ejemplo de la sección anterior con case_when():Cuando hay elementos que cumplen con ninguna condición ofrecida, el elemento se reemplaza por NA en el vector de resultado:","code":"\ncase_when(\n  condicion ~ \"resultado_verdadero\",\n  condicion ~ \"resultado_verdadero\",\n  condicion ~ \"resultado_verdadero\",\n  condicion ~ \"resultado_verdadero\"\n)\n### Crear un vector\nvector <- 1:50\n\n### Evaluar el vector con case_when()\nlibrary(dplyr)\ncase_when(\n  (vector %% 2) == 0 & vector > 10 ~ \"Par >10\",\n  (vector %% 2) == 0 & vector <= 10 ~ \"Par <=10\",\n  (vector %% 2) != 0 & vector > 10 ~ \"impar >10\",\n  (vector %% 2) != 0 & vector <= 10 ~ \"impar <=10\"\n)\n#  [1] \"impar <=10\" \"Par <=10\"   \"impar <=10\" \"Par <=10\"   \"impar <=10\" \"Par <=10\"  \n#  [7] \"impar <=10\" \"Par <=10\"   \"impar <=10\" \"Par <=10\"   \"impar >10\"  \"Par >10\"   \n# [13] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [19] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [25] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [31] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [37] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [43] \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"    \"impar >10\"  \"Par >10\"   \n# [49] \"impar >10\"  \"Par >10\"\n### Crear un vector\nvector <- 1:50\n\n### Evaluar el vector con case_when()\n### con una sola condición\nlibrary(dplyr)\ncase_when(\n  (vector %% 2) == 0 & vector > 10 ~ \"Par >10\"\n)\n#  [1] NA        NA        NA        NA        NA        NA        NA        NA       \n#  [9] NA        NA        NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\"\n# [17] NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\"\n# [25] NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\"\n# [33] NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\"\n# [41] NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\" NA        \"Par >10\"\n# [49] NA        \"Par >10\""},{"path":"programación-funcional.html","id":"ciclos-o-loops-con-for","chapter":"Capítulo 5 Programación funcional","heading":"5.2.5 Ciclos o Loops con for","text":"El segundo grupo de operadores de control de flujo incluye los responsables de ciclos, iteraciones o loops. Un loop con tienen la siguiente estructura básica:","code":"for (elemento in vector_secuencial) {acciones a realizar}"},{"path":"programación-funcional.html","id":"entendiendo-la-estructura-básica-de-for","chapter":"Capítulo 5 Programación funcional","heading":"5.2.5.1 Entendiendo la estructura básica de for","text":"Elemento y vector_secuencial son dos cosas que se han visto hasta el momento. Elemento se comporta como una variable de posición. Es clásico que se coloque como elemento, pero puede ser cualquier letra o palabra, siempre y cuando esta se utilice dentro del loop. El elemento funciona como variable de posición, y en cada vuelta del loop, será reemplazado con un elemento del vector_secuencial, uno uno en orden correlativo.El vector_secuencial, por su parte, es un vector que debe contener la secuencia correlativa de números que vaya desde 1 hasta la cantidad máxima de elementos que tiene el vector sobre el que se pretende aplicar el loop. Si el vector inicial al que se le aplicará el loop contiene solo cuatro elementos: c(10.1, 50.9, 23.4, 31.5), se debe colocar una de las siguientes opciones dentro del paréntesis de :","code":"\n### Vector sobre el que aplicar el loop\nvector <- c(10.1, 50.9, 23.4, 31.5)### Opción 1: colocar un rango manualmente (poco eficiente)\nfor (i in 1:4)\n\n### Opción 1: colocar un rango con length() (no recomendado)\nfor (i in 1:length(vector))\n\n### Opción 1: usando seq_along() para crear el rango (recomendado)\nfor (i in seq_along(vector))"},{"path":"programación-funcional.html","id":"uso-de-for","chapter":"Capítulo 5 Programación funcional","heading":"5.2.5.2 Uso de for","text":"Utilizando un loop para obtener solo los valores mayores igual al promedio de un conjunto de datos:Para generar NA en el resultado se usa un truco: ir adicionando el resultado res como un vector que concatena el contenido de hasta la iteración anterior de res, más el contenido de la iteración actual:Otra manera es utilizando el operador condicional next, que “salta” un ciclo cuando se cumple la condición del previo. Nota como la condición en pide lo contrario lo que se necesita, para que cuando se cumpla se active next y cuando se cumpla se guarda el valor concatenado en res.Si es requerido frenar el loop antes de que culmine, en base una nueva condición definida, se debe utilizar break. En nuestro ejemplo, para frenar el loop cuando aparezca el primer valor mayor 30.5, es necesario ir evaluando en cada iteración del loop si existe al menos un valor > 30.5 en el objeto res. Esto se obtiene con (res > 30.5). En el momento que se cumpla, break frena el loop.","code":"\n### Crear aleatoriamente un conjunto de datos \n### que siga la distribución normal\nset.seed(123)\naleatorio <- rnorm(200, mean = 20, sd=5.6)\n\n### Crear un objeto vacío para rellenarlo\n### con el resultado de cada vuelta del loop\nres <- c()\n\n### Loop sin importar que se generen NA\nfor (i in seq_along(aleatorio)){\n  if (aleatorio[i] >= mean(aleatorio)) {\n    res[i] <- aleatorio[i]\n  }\n}\n\n### Resultado\nres\n#   [1]    NA    NA 28.73 20.39 20.72 29.60 22.58    NA    NA    NA 26.85 22.01 22.24\n#  [14] 20.62    NA 30.01 22.79    NA 23.93    NA    NA    NA    NA    NA    NA    NA\n#  [27] 24.69 20.86    NA 27.02 22.39    NA 25.01 24.92 24.60 23.86 23.10    NA    NA\n#  [40]    NA    NA    NA    NA 32.15 26.76    NA    NA    NA 24.37    NA 21.42    NA\n#  [53]    NA 27.66    NA 28.49    NA 23.27 20.69 21.21 22.13    NA    NA    NA    NA\n#  [66] 21.70 22.51 20.30 25.16 31.48    NA    NA 25.63    NA    NA 25.74    NA    NA\n#  [79] 21.02    NA 20.03 22.16    NA 23.61    NA 21.86 26.14 22.44    NA 26.43 25.56\n#  [92] 23.07 21.34    NA 27.62    NA 32.25 28.58    NA    NA    NA 21.44    NA    NA\n# [105]    NA    NA    NA    NA    NA 25.15    NA 23.40    NA    NA 22.91 21.69 20.59\n# [118]    NA    NA    NA 20.66    NA    NA    NA 30.33    NA 21.32 20.44    NA    NA\n# [131] 28.09 22.53 20.23    NA    NA 26.34    NA 24.14 30.69    NA 23.93    NA    NA\n# [144]    NA    NA    NA    NA 23.85 31.76    NA 24.41 24.31 21.86    NA    NA    NA\n# [157] 23.15    NA 25.47    NA 25.90    NA    NA 38.15    NA 21.67 23.56    NA 22.89\n# [170] 22.07    NA 20.37    NA 31.92    NA    NA 20.21 21.74 22.44    NA    NA 27.07\n# [183]    NA    NA    NA    NA 26.22 20.47 24.22    NA 21.20    NA 20.53    NA    NA\n# [196] 31.18 23.36\n### Loop sin NA\nres <- c()\nfor (i in seq_along(aleatorio)){\n  if (aleatorio[i] >= mean(aleatorio)) {\n    res <- c(res, aleatorio[i]) # aquí está el truco\n  }\n}\n\n### Resultado\nres\n#  [1] 28.73 20.39 20.72 29.60 22.58 26.85 22.01 22.24 20.62 30.01 22.79 23.93 24.69\n# [14] 20.86 27.02 22.39 25.01 24.92 24.60 23.86 23.10 32.15 26.76 24.37 21.42 27.66\n# [27] 28.49 23.27 20.69 21.21 22.13 21.70 22.51 20.30 25.16 31.48 25.63 25.74 21.02\n# [40] 20.03 22.16 23.61 21.86 26.14 22.44 26.43 25.56 23.07 21.34 27.62 32.25 28.58\n# [53] 21.44 25.15 23.40 22.91 21.69 20.59 20.66 30.33 21.32 20.44 28.09 22.53 20.23\n# [66] 26.34 24.14 30.69 23.93 23.85 31.76 24.41 24.31 21.86 23.15 25.47 25.90 38.15\n# [79] 21.67 23.56 22.89 22.07 20.37 31.92 20.21 21.74 22.44 27.07 26.22 20.47 24.22\n# [92] 21.20 20.53 31.18 23.36\n### Crear un objeto vacío \nres <- c()\n\n### Loop con next y condición if inversa a lo requerido\nfor (i in seq_along(aleatorio)){\n  if (aleatorio[i] < mean(aleatorio)) # condición inversa para usar next\n    next\n  res <- c(res, aleatorio[i])\n}\n\n### Resultado\nres\n#  [1] 28.73 20.39 20.72 29.60 22.58 26.85 22.01 22.24 20.62 30.01 22.79 23.93 24.69\n# [14] 20.86 27.02 22.39 25.01 24.92 24.60 23.86 23.10 32.15 26.76 24.37 21.42 27.66\n# [27] 28.49 23.27 20.69 21.21 22.13 21.70 22.51 20.30 25.16 31.48 25.63 25.74 21.02\n# [40] 20.03 22.16 23.61 21.86 26.14 22.44 26.43 25.56 23.07 21.34 27.62 32.25 28.58\n# [53] 21.44 25.15 23.40 22.91 21.69 20.59 20.66 30.33 21.32 20.44 28.09 22.53 20.23\n# [66] 26.34 24.14 30.69 23.93 23.85 31.76 24.41 24.31 21.86 23.15 25.47 25.90 38.15\n# [79] 21.67 23.56 22.89 22.07 20.37 31.92 20.21 21.74 22.44 27.07 26.22 20.47 24.22\n# [92] 21.20 20.53 31.18 23.36\n### Crear un objeto vacío \nres <- c()\n\n### Loop con next y condición if inversa a lo requerido\nfor (i in seq_along(aleatorio)){\n  if (aleatorio[i] < mean(aleatorio)) \n    next\n  res <- c(res, aleatorio[i])\n  \n  if (any(res > 30.5)) # hay que evaluar si hay algún (any)\n    break\n}\n\n### Resultado\nres\n#  [1] 28.73 20.39 20.72 29.60 22.58 26.85 22.01 22.24 20.62 30.01 22.79 23.93 24.69\n# [14] 20.86 27.02 22.39 25.01 24.92 24.60 23.86 23.10 32.15"},{"path":"programación-funcional.html","id":"ciclos-o-loops-con-replicate","chapter":"Capítulo 5 Programación funcional","heading":"5.2.6 Ciclos o loops con replicate()","text":"La función replicate() facilita mucho procesos iterativos para simulación. Permite replicar una o varias líneas de código las veces que sean definidas, para almacenarlas como una lista de vectores (con el argumento simplify = FALSE), o como un vector único (con el argumento simplify = TRUE, como está por defecto). Ejemplificaremos su uso con un caso de estudio:Se ha evaluado una población, de la cual se obtuvo como muestra 100 medidas de una longitud. Al obtener el valor más grande de dicha muestra se obtiene:Pero ¿Siempre será así?. ¿Será que si evaluo nuevamente la población obtendré el mismo valor máximo?. Como tenemos dinero ni tiempo para volver evaluar dicha población, decidimos simularla. En este paso necesitamos información de la muestra:Con estos datos se puede simular una población en R. Asumiendo que esta siguen una distribución normal, utilizamos:Para repetir esta simulación diez mil veces, y obtener estadísticos descriptivos de los valores máximos de dichas muchas simuladas, utilizaremos replicate() con dos pasos internos por cada iteración del loop:Crear un conjunto de números aleatorios para la iteración.Hallar el valor máximo de la longitud en dicho conjunto.Con ello nos hemos dado cuenta que, asumiendo que la variable tiene distribución de probabilidades normal, el valor máximo de la muestra original (179.53), es menor al promedio poblacional simulado con diez mil réplicas (199.809). Por el contrario, está más cerca del valor máximo más pequeño dentro de los diez mil datos (171.7636).","code":"\n### Valores del estudio\nmuestra <- c(155.62, 158.5, 174.06, 161.11, 161.62, 175.42, 164.51, 149.49, \n         154.52, 156.62, 171.15, 163.63, 163.99, 161.46, 155.66, 176.05,\n         164.83, 143.39, 166.6, 156.39, 151.21, 158.6, 151.57, 154.16, \n         155.06, 145.83, 167.79, 161.83, 150.6, 171.41, 164.21, 157.93, \n         168.29, 168.14, 167.65, 166.49, 165.32, 159.96, 157.84, 157.19,\n         154.46, 158.69, 149.49, 179.37, 171.01, 150.73, 156.99, 156.44, \n         167.29, 159.77, 162.7, 160.25, 160.13, 172.41, 158.54, 173.69, \n         147.03, 165.59, 161.58, 162.38, 163.8, 156.13, 157.6, 151.64, \n         151.18, 163.14, 164.4, 160.96, 168.52, 178.34, 156.23, 140.41, \n         169.25, 154.33, 154.51, 169.42, 158.02, 149.88, 162.08, 159.29, \n         160.55, 163.85, 157.28, 166.11, 158.58, 163.39, 170.04, 164.29, \n         157.66, 170.49, 169.14, 165.27, 162.58, 155.04, 172.34, 155.28, \n         179.53, 173.83, 158.45, 151.57)\n\n### El valor más alto de dicha población\nmax(muestra)\n# [1] 179.5\n### Promedio\npromedio <- mean(muestra)\n\n### Desviación estándar\ndesvest <- sd(muestra)\n### Simular los datos \nset.seed(123)\nmuestra_simulada <- rnorm(100, mean = promedio, sd = desvest)\n\n### Ver los resultados\nmuestra_simulada\n#   [1] 156.8 159.5 173.7 161.8 162.3 174.9 164.9 151.2 155.8 157.7 171.0 164.1 164.5\n#  [14] 162.2 156.9 175.5 165.2 145.7 166.9 157.5 152.8 159.6 153.1 155.5 156.3 147.9\n#  [27] 167.9 162.5 152.2 171.2 164.7 158.9 168.4 168.3 167.8 166.8 165.7 160.8 158.9\n#  [40] 158.3 155.8 159.6 151.2 178.5 170.9 152.4 158.1 157.6 167.5 160.6 163.3 161.1\n#  [53] 160.9 172.2 159.5 173.3 149.0 165.9 162.3 163.0 164.3 157.3 158.6 153.2 152.8\n#  [66] 163.7 164.8 161.7 168.6 177.6 157.4 142.9 169.3 155.7 155.8 169.4 159.0 151.6\n#  [79] 162.7 160.2 161.3 164.3 158.3 166.4 159.5 163.9 170.0 164.7 158.7 170.4 169.2\n#  [92] 165.6 163.2 156.3 172.1 156.5 178.7 173.5 159.4 153.1\n### Usar replicate()\nset.seed(123)\nresultados <- replicate(n = 10000, {\n  parcial <- rnorm(100, mean = promedio, sd = desvest)\n  max(parcial)\n  }\n) \n\n### Revisar el valor máximo, mínimo y promedio de longitudes \n### máximas obtenidas por el loop de replicate()\nmin(resultados)\n# [1] 171.8\nmax(resultados)\n# [1] 199.8\nmean(resultados)\n# [1] 181.2\n\n### Valor máximo de la muestra original\nmax(muestra)\n# [1] 179.5"},{"path":"programación-funcional.html","id":"ciclos-o-loops-con-while","chapter":"Capítulo 5 Programación funcional","heading":"5.2.7 Ciclos o Loops con while","text":"Otro operador de control de flujo con el que se crea loops es . diferencia de , que opera hasta que se acaben las iteraciones definidas por el rango 1:n, se detendrá solo hasta que se cumpla una condición. Si dicha condición nunca se cumple, se crea un loop infinito. Un loop con tienen la siguiente estructura básica:Es la segunda línea de la condición realizar dentro del loop lo que le da la continuidad. En alguna iteración, el ir “sumando” valores al index hará que se cumpla la condición, por ejemplo:Una segunda manera de operar es indicar que se frene el loop hasta que una condición lógica cambie de estado (FALSE TRUE, o viceversa). En el siguiente ejemplo se aplicará el imprimir la secuencia de bases nitrogenadas (letras , C, G, T) hasta que se ubique la primera base G. Trata de interpretar cada paso dentro de una iteración del loop :Intentar esto con llevaría al resultado erróneo de imprimir todo menos los elementos que se soliciten, como “G”:Algo más interesante para el loop podría ser frenar la impresión de elementos cuando se identifique que partir de la siguiente iteración aparecerá una secuencia definida. Imagina que necesitas frenar la impresión hasta que aparezca la primera secuencia TGC, en ese orden:","code":"# Posición inicial\nindex <- 1\n\n# Loop con while\nwhile (condicion_respecto_a_index) {\n  acciones a realizar\n  index <- index + 1\n  }\n# Posición inicial\nindex <- 1\n\n# Loop con while\nwhile (index <= 5) {\n  # Acción a realizar\n  print(paste(\"El número es\", index))\n  # Suma una posición para la siguiente iteración\n  index <- index + 1\n}\n# [1] \"El número es 1\"\n# [1] \"El número es 2\"\n# [1] \"El número es 3\"\n# [1] \"El número es 4\"\n# [1] \"El número es 5\"\n### Vector sobre el cual hacer la impresión de elementos\nvector <- c(\"A\",\"T\",\"C\",\"A\",\"T\",\"G\",\"G\",\"G\",\"G\",\"C\",\"C\")\n\n### Condición en estado falso\ncondicion <- FALSE\n\n### Índice\nindex <- 1\n\n### Loop con while\n### Aquí !condicion significa: \n### \"mientras que condición no sea verdadera, continuar\" \nwhile ( !condicion ) { \n  print(vector[index]) # imprime el elemento\n  index <- index + 1   # adiciona una posición\n  condicion <- vector[index] == \"G\" # evalúa si es G la siguiente posición\n}\n# [1] \"A\"\n# [1] \"T\"\n# [1] \"C\"\n# [1] \"A\"\n# [1] \"T\"\n### Vector sobre el cual hacer la impresión de elementos\nvector <- c(\"A\",\"T\",\"C\",\"A\",\"G\",\"T\",\"C\",\"A\",\n            \"T\",\"G\",\"G\",\"C\",\"G\",\"G\",\"C\",\"C\")\n\n### Loop con for\nfor(i in seq_along(vector)){\n  if(vector[i]!=\"G\")\n  print(vector[i])\n}\n# [1] \"A\"\n# [1] \"T\"\n# [1] \"C\"\n# [1] \"A\"\n# [1] \"T\"\n# [1] \"C\"\n# [1] \"A\"\n# [1] \"T\"\n# [1] \"C\"\n# [1] \"C\"\n# [1] \"C\"\n# Objetos necesarios\nvector <- c(\"A\",\"T\",\"C\",\"A\",\"G\",\"T\",\"C\",\"A\",\n            \"T\",\"G\",\"G\",\"C\",\"G\",\"G\",\"C\",\"C\")\ncondicion <- FALSE\nindex <- 1\n\n### Loop con while\nwhile ( !condicion ) { \n  print(vector[index]) \n  index <- index + 1 \n  condicion <- identical(c(vector[index], vector[index+1], \n                           vector[index+2]), c(\"T\",\"G\",\"G\"))\n}\n# [1] \"A\"\n# [1] \"T\"\n# [1] \"C\"\n# [1] \"A\"\n# [1] \"G\"\n# [1] \"T\"\n# [1] \"C\"\n# [1] \"A\""},{"path":"programación-funcional.html","id":"operadoresfuncion","chapter":"Capítulo 5 Programación funcional","heading":"5.3 Operadores de función","text":"Los operadores de función son funciones que toman como entrada una función y devuelven como resultado otra función generada como una modificación de la inicial. Esto es diferente de lo mostrado hasta el momento, donde una función usualmente genera un objeto como resultado.Veamos un ejemplo sobre la identificación de números primos. La forma más sencilla de hacer es creando una función que identifique si un número dado es primo o . El proceso de idear esta función comienza con crear una función que identifique si un número es primo o . Esta función inicial debe ser pensada como una función que se le puede aplicar un solo elemento, un conjunto de datos.El resultado es excelente, primo.logic() identifica si un número es primo o . Sin embargo, es eficiente ir probando elemento elemento el contenido de un conjunto de datos. Automatizar primo.logic() para que aplique la búsqueda de números primos elemento elemento (element-wise) un vector completo, implica vectorizar primo.logic() usando la función Vectorize(). Este es el operador de funciones que nos devolverá como resultado la función primo.logic() aplicable un vector:De manera similar lo mostrado con Vectorize(), existen otros enfoques en R que utilizan funciones de la familia apply(). Este tema es abordado en la siguiente sección.","code":"\n### Crear la función primo.logic() para identificar números primos\nprimo.logic <- function(x) {\n  if (x == 2) {\n    TRUE\n  } else if (any(x %% 2:(x-1) == 0)) {\n    FALSE\n  } else { \n    TRUE\n  }\n}\n\n### Probar la función con los números primos 2, 3, 5, y no primos 4, 9, 27\nprimo.logic(2)\n# [1] TRUE\nprimo.logic(3)\n# [1] TRUE\nprimo.logic(5)\n# [1] TRUE\nprimo.logic(4)\n# [1] FALSE\nprimo.logic(9)\n# [1] FALSE\nprimo.logic(27)\n# [1] FALSE\n### Crear un vector para buscar los números primos en él\nsec <- 1:100\n\n### Vectorizar la función primo.logic() y \n### guardarla como una nueva función primoV\nprimoV <- Vectorize(primo.logic) \n\n### Usar primoV()\nprimoV(sec)\n#   [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE\n#  [14] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE\n#  [27] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n#  [40] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n#  [53]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE\n#  [66] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n#  [79]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n#  [92] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE\n\n### Filtrar los números primos de la secuencia\nsec[primoV(sec)]\n#  [1]  2  3  5  7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97"},{"path":"programación-funcional.html","id":"familia-apply","chapter":"Capítulo 5 Programación funcional","heading":"5.4 Familia apply()","text":"","code":""},{"path":"programación-funcional.html","id":"función-apply","chapter":"Capítulo 5 Programación funcional","heading":"5.4.1 Función apply()","text":"La familia de funciones apply() reúne varias funciones que permiten, como se implica de su nombre, aplicar algo un objeto. Ese algo es una función. Para explorar los beneficios de este grupo de funciones, comencemos con un problema básico: calcular el promedio de varias columnas numéricas de una data frame.Calcular el promedio de las primeras cuatro columnas (las únicas numéricas), se puede hacer manualmente:O con apply(). Esta función necesita que especifiquemos como argumentos: una base de datos tabular (DF), un modo de aplicación de la función (fila por fila: MARGIN = 1, columna por columna: MARGIN = 2), y la función (sin paréntesis) ser aplicada. El resultado obtenido es un vector, cuyos elementos reciben el nombre de la columna de la cual proceden. En consecuencia, la estructura básica es:Poniendo en contexto apply() para el ejemplo planteado:Dentro de la familia apply() podrás encontrar:TABLA 5.1: Funciones de la familia apply() que se pueden utilizar en R para automatizar la aplicación de funciones sobre diferentes estructuras de datos.","code":"\n### Activar la data frame de ejemplo llamada iris\ndata(iris)\n\n### Ver las primeras 10 filas de la tabla\nhead(iris, 10)\n#    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n# 1           5.1         3.5          1.4         0.2  setosa\n# 2           4.9         3.0          1.4         0.2  setosa\n# 3           4.7         3.2          1.3         0.2  setosa\n# 4           4.6         3.1          1.5         0.2  setosa\n# 5           5.0         3.6          1.4         0.2  setosa\n# 6           5.4         3.9          1.7         0.4  setosa\n# 7           4.6         3.4          1.4         0.3  setosa\n# 8           5.0         3.4          1.5         0.2  setosa\n# 9           4.4         2.9          1.4         0.2  setosa\n# 10          4.9         3.1          1.5         0.1  setosa\nmean(iris$Sepal.Length)\n# [1] 5.843\nmean(iris$Sepal.Width)\n# [1] 3.057\nmean(iris$Petal.Length)\n# [1] 3.758\nmean(iris$Petal.Width)\n# [1] 1.199### Modo largo\napply(DF, MARGIN = 2, FUN = FUNCIÓN)\n\n### Modo corto\napply(DF, 2, FUNCIÓN)\n### Seleccionando las 4 primeras columnas de iris\napply(iris[,1:4], 2, FUN = mean)\n# Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n#        5.843        3.057        3.758        1.199"},{"path":"programación-funcional.html","id":"función-lapply","chapter":"Capítulo 5 Programación funcional","heading":"5.4.2 Función lapply()","text":"La función lapply() se aplica tanto una base de datos tabular o sobre una lista. Si se aplica una tabla (DF), lo hace siempre de manera columna columa, lo mismo que hace apply() con el argumento MARGIN = 2. obstante, el resultado es siempre una lista, un vector. La estructura básica es:Aplicado al ejemplo propuesto, se tiene:Siempre que se necesite “deslistar” una lista y extraer los elementos como un único vector, se utiliza unlist():En este último ejemplo, vemos como el resultado converge con el de apply().","code":"lapply(DF,  FUN = FUNCIÓN)\nlapply(iris[,1:4],  FUN = mean)\n# $Sepal.Length\n# [1] 5.843\n# \n# $Sepal.Width\n# [1] 3.057\n# \n# $Petal.Length\n# [1] 3.758\n# \n# $Petal.Width\n# [1] 1.199\nlista <- lapply(iris[,1:4],  FUN = mean)\nunlist(lista)\n# Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n#        5.843        3.057        3.758        1.199"},{"path":"programación-funcional.html","id":"función-tapply","chapter":"Capítulo 5 Programación funcional","heading":"5.4.3 Función tapply()","text":"Esta función es excepcional. Permite calcular el resultado de una función aplicada sobre un vector, pero muestra los resultados agrupados en base las categorías de otro vector de misma longitud. El resultado obtenido es un vector. La estructura básica es:El siguiente código sirve para calcular el promedio por especie (grupo especificado en la columna Species), de la variable en la columna 1 de la base de datos iris:Recuerda que siempre que necesites puedes crear una función. Si unificamos el uso de lapply() para aplicar tapply() cada elemento de columna de iris[,1:4], es necesario crear una función con tapply() dentro del cual se especifique el uso de la función mean():","code":"tapply(VECTOR_NUMÉRICO, VECTOR_DE_AGRUPAMIENTO, FUN = FUNCIÓN)\ntapply(iris[,1], iris$Species, FUN = mean)\n#     setosa versicolor  virginica \n#      5.006      5.936      6.588\nlapply(iris[,1:4],  FUN = function(x) tapply(x, iris$Species, mean))\n# $Sepal.Length\n#     setosa versicolor  virginica \n#      5.006      5.936      6.588 \n# \n# $Sepal.Width\n#     setosa versicolor  virginica \n#      3.428      2.770      2.974 \n# \n# $Petal.Length\n#     setosa versicolor  virginica \n#      1.462      4.260      5.552 \n# \n# $Petal.Width\n#     setosa versicolor  virginica \n#      0.246      1.326      2.026"},{"path":"programación-funcional.html","id":"función-sapply","chapter":"Capítulo 5 Programación funcional","heading":"5.4.4 Función sapply()","text":"Una forma de usar funciones elemento elemento (element-wise) en un vector sin tener que vectorizar (ver Sección 5.3), y que otorgue como resultado un vector, se obtiene con sapply(). Esta se puede aplicar sobre vectores. La estructura básica es:Aplicado al caso de la Sección 5.3 Operadores de Función en el que se requería aplicar primo.logic() sobre un vector numérico llamado sec para la búsqueda de números primos, se tiene:","code":"sapply(VECTOR, FUN = FUNCIÓN)\n### Recreando sec para buscar los números primos en él\nsec <- 1:100\n\n### Aplicar sapply()\nsapply(sec, FUN = primo.logic)\n#   [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE\n#  [14] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE\n#  [27] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n#  [40] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n#  [53]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE\n#  [66] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n#  [79]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n#  [92] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE"},{"path":"programación-funcional.html","id":"ejercicios-del-capítulo-2","chapter":"Capítulo 5 Programación funcional","heading":"5.5 Ejercicios del capítulo","text":"Reproduce el resultado del siguiente loop , utilizando la función replicate():Crea la base de datos DF numérica (código ya definido en el siguiente chunk), que tiene las dimensiones 12 (filas) x 5 (columnas). Esta base contiene valores deseados: -999. Crea y utiliza una función llamada cambiarNA() que te permita cambiar estos valores por NA.Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA() para que solo cambie -999 NA, sino que cambie cualquier valor que tú le proporciones con un argumento. Llama esta función cambiarNA2(). Utilízala para reemplazar los valores 5555 NA.Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA() para que solo cambie -999 NA, sino que cambie cualquier valor que tú le proporciones con un argumento. Llama esta función cambiarNA2(). Utilízala para reemplazar los valores 5555 NA.Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA2() de tal manera que te permita definir más de un valor (un vector numérico) como elementos ser reemplazados por NA. Llama esta función cambiarNA3(). Cambia por NA los valores -999 y 5555. Pista: Esta función deberá contener un loop para aplicarle la función de cambio por NA un elemento del vector la vez en cada iteración.Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA2() de tal manera que te permita definir más de un valor (un vector numérico) como elementos ser reemplazados por NA. Llama esta función cambiarNA3(). Cambia por NA los valores -999 y 5555. Pista: Esta función deberá contener un loop para aplicarle la función de cambio por NA un elemento del vector la vez en cada iteración.Crea un loop que itere sobre los números del 1 al 50 y calcule el cubo de cada número, de manera que los resultados se vayan guardando en un vector llamado preliminar. Luego, crea un segundo loop que te permita identificar y almacenar solamente los números menores la mediana median() del conjunto de datos preliminar en un nuevo vector llamado final.Crea un loop que itere sobre los números del 1 al 50 y calcule el cubo de cada número, de manera que los resultados se vayan guardando en un vector llamado preliminar. Luego, crea un segundo loop que te permita identificar y almacenar solamente los números menores la mediana median() del conjunto de datos preliminar en un nuevo vector llamado final.En R ya existe una función para calcular la varianza y es var(). Pero este ejercicio se trata de poner en juego lo que aprendiste sobre programación en R. La fórmula matemática de la varianza poblacional, con denominador \\(n\\), Ecuación (5.1). Pero la función var() de R contiene la fórmula matemática para calcular la varianza de muestras, de poblaciones enteras. La fórmula matemática de la varianza muestral que usa R tiene como denominador \\(n-1\\), Ecuación (5.2). Crea una función llamada var2() que calcule la varianza del conjunto de datos llamado vector. Finalmente, compara tus resultados con los obtenidos por var().En R ya existe una función para calcular la varianza y es var(). Pero este ejercicio se trata de poner en juego lo que aprendiste sobre programación en R. La fórmula matemática de la varianza poblacional, con denominador \\(n\\), Ecuación (5.1). Pero la función var() de R contiene la fórmula matemática para calcular la varianza de muestras, de poblaciones enteras. La fórmula matemática de la varianza muestral que usa R tiene como denominador \\(n-1\\), Ecuación (5.2). Crea una función llamada var2() que calcule la varianza del conjunto de datos llamado vector. Finalmente, compara tus resultados con los obtenidos por var().\\[\\begin{align}\n  \\sigma^2 = \\frac{1}{n}*{\\displaystyle\\sum_{=1}^{n}(x_i - \\mu)^2} \\tag{5.1}\n  \\end{align}\\]\\[\\begin{equation}\n  \\sigma^2 = \\frac{1}{n-1}*{\\displaystyle\\sum_{=1}^{n}(x_i - \\mu)^2} \\tag{5.2}\n  \\end{equation}\\]Carga la base de datos npk. Usando una función de la familia apply(), calcula la el promedio, mediana y desviación estándar de la columna yield para cada categoría (numérica) de la columna block. Con ello, se conocerá el promedio de producción que se obtuvo en cada bloque para un estudio de mejora fitogenética:Ejecuta el siguiente código para crear una lista llamada iris3Lista partir de la base de datos de ejemplo iris3 (un array). Si revisas iris3Lista, notarás que continene 3 elementos, cada uno de ellos es una matriz de datos de cuatro columnas (Sepal L., Sepal W., Petal L., y Petal W.). Utilizando dos funciones de la familia apply(), calcula el promedio de cada columna de cada elemento de la lista iris3Lista.","code":"\nset.seed(123)\nlista1 <- list() # Lista vacía\nfor (i in 1:3) { # Número de iteraciones = 5\n  lista1[[i]] = rnorm(6, 0, 1) # Conjunto aleatorio normal para cada iteración\n}\nlista1\n# [[1]]\n# [1] -0.56048 -0.23018  1.55871  0.07051  0.12929  1.71506\n# \n# [[2]]\n# [1]  0.4609 -1.2651 -0.6869 -0.4457  1.2241  0.3598\n# \n# [[3]]\n# [1]  0.4008  0.1107 -0.5558  1.7869  0.4979 -1.9666\n# Base de datos DF\nset.seed(123)\nsecuencia <- c(seq(0.5, 7.9, length = 10), -999, 5555)\nDF <- data.frame(replicate(5, \n                           sample(secuencia, 12, rep = TRUE)))\nDF <- round(DF,2)\n\n# Darle nombre a sus columnas\ncolnames(DF) <- paste0(\"Var\", 1:5)\n\n# Revisar el contenido de DF\nDF \n#       Var1    Var2    Var3    Var4    Var5\n# 1     2.14    3.79    7.08    7.90    6.26\n# 2     2.14    2.14    2.14    5.43 5555.00\n# 3     7.90 -999.00    2.97 -999.00    1.32\n# 4     1.32    7.08    0.50 5555.00    0.50\n# 5     4.61 5555.00 -999.00    3.79    7.08\n# 6  -999.00    7.08    5.43    5.43 -999.00\n# 7     3.79    7.08    3.79    3.79    7.08\n# 8     2.97    2.14 5555.00 -999.00    4.61\n# 9     4.61    6.26    7.90    4.61    3.79\n# 10    7.08    7.90    5.43    7.08    7.08\n# 11    7.90    5.43    7.08    1.32    7.90\n# 12 -999.00    7.90    7.08    3.79 5555.00\nset.seed(123)\nvector <- rnorm(50, 21, 1.6)\ndata(\"npk\")\n# Cargar iris3\ndata(\"iris3\")\n\n# Convertirla a lista\niris3Lista <- list(setosa = iris3[,,1],\n                versicolor = iris3[,,2],\n                virginica = iris3[,,3])"},{"path":"tidyversecap.html","id":"tidyversecap","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"Capítulo 6 Manejo de datos con tidyverse","text":"En esta capítulo brindaremos las pautas de trabajo de uno de los paquetes más importantes para análisis de datos. Esta colección de paquetes ha sido diseñado para facilitar el flujo de trabajo en estadística y análisis de datos. Tareas recurrentes que se realizan con este objetivo son cubiertas por diferentes paquetes de tidyverse: importar datos, reordarlos, transformarlos y manipularlos para que estén listos para el análisis, y visualización. Los paquetes que pertenecen al núcleo de tidyverse se activan en la sesión de RStudio tras ejecutar library(tidyverse). Estos son:readr: carga de archivos orientada producir tibbles.dplyr: manipulación, arreglo y ordenamiento de bases de datos.ggplot2: reconocida como la mejor librería de graficación estadística.tibble: modernización de las capacidades de un data frame.tidyr: complemento de dplyr limpieza de datos.purrr: trabajo mejorado en programación funcional.stringr: trabajo con cadenas de texto de una manera cohesiva y simple.forcats: manejo de variables categóricas (factores).Para más detalles, visita la página web de tidyverse.\nFIGURA 1.1: Librerías de tidyverse y asociadas. Se ha creado una masiva cantidad de librerías que mejoran las particularidades de tidyverse para ofrecer una experiencia de usuario más completa en diferentes áreas:carga de datos, reordenamiento, transformación, programación, manipulación de datos, graficación, modelamiento y publicación.\nMás allá de los ocho paquetes núcleo de tidyverse, se ha desarrollado una gran batería de paquetes asociados, diseñados en el entorno de la sintaxis especial de esta librería. El ecosistema de tidyverse incluye librerías para la carga de bases de datos provenientes de softwares estadísticos (e.g., SPSS con haven), manejo de variables especiales (e.g., datos de fechas con lubridate), modelamiento estadístico (con tidymodels) y revisión de modelos (con broom). Otros paquetes se han desarrollado para cubrir funciones que interactúen en las pipelines (pipe original %>% del paquete magrittr), para crear código más legible (e.g., funciones de rstatix).\nFIGURA 3.1: Ejemplo del uso de pipe (%>%) en una pipeline para trabajar con tidyverse.\n","code":""},{"path":"tidyversecap.html","id":"activación-de-tidyverse","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"Activación de tidyverse","text":"Para instalar tidyverse en tu equipo, ejecuta:Para activar tidyverse, ejecuta:","code":"\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)"},{"path":"tidyversecap.html","id":"resolver-conflictos","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"Resolver conflictos","text":"Tras activar tidyverse, aparecerán en la consola los paquetes nucleo que estan siendo activados (Attaching packages) y los conflictos que tienen con otras librerías (Conflicts) (Figura 6.1). Un conflicto significa que dentro de la librería activada (tidyverse en este caso) existen una o más funciones que tienen el mismo nombre que una función alojada en otra librería actualmente activa en la sesión de RStudio. El texto dplyr::filter() masks stats::filter() indica que la función filter() de la librería dplyr es idéntica en nombre filter() de la librería stats.\nFIGURA 6.1: Vista previa de los conflictos detectados en consola tras la activación de la librería tidyverse.\nPara resolver el conflicto, cada vez que se use una función conflictiva se debe especificar la librería de origen con el operador ::; el código debe ser como el siguiente: dplyr::filter(). R reconocerá que se está utilizando la función filter() del paquete dplyr.","code":""},{"path":"tidyversecap.html","id":"datosordenados","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.1 Datos ordenados (tidy)","text":"Un gran porcentaje del tiempo que se suele emplear en el análisis de datos en R está dedicado manipular objetos para su limpieza y preparación. Este lenguaje de programación necesita datos ordenados (del inglés tidy) para que su sintaxis de código funcione sin errores. Para R, datos ordenados implica tener objetos tabulares (2D) en los que:Cada fila contenga información de una sola observación o unidad muestral (e.g., parcela, punto, transecto, paciente, placa, o el nombre que reciba su unidad muestral).Cada columnas contenga una única variable de medición y esta sea independiente de las demás.\nFIGURA 1.4: Datos ordenados correctamente para analizar en R\nEl estructurar las bases de datos de esta manera se puede hacer fuera del entorno de R, utilizando el gestor de hojas de cálculo de tu preferencia.","code":""},{"path":"tidyversecap.html","id":"qué-evitar-para-tener-datos-tidy","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.1.1 ¿Qué evitar para tener datos tidy?","text":"En principio, recordando que cada columna es una variable en las que cada fila solo podrá tener un solo valor, se deben evitar las siguientes situaciones:\nFIGURA 1.5: Evitar poner encabezados (texto en negritas), comentarios o usar columnas que contengan datos (texto resaltado). Celdas fusionadas (texto en rojo) generan problemas porque al cargarse en RStudio, las celdas se desagregan y dejan espacios en blanco.\n\nFIGURA 1.6: Evitar colocar más de una variable de medición en una columna. En este caso, la columna Status contiene información de estado, categoría y nivel. Estas deben ser tratadas como variables independientes unas de otras.\n\nFIGURA 1.7: Evitar nombres complejos como nombre de variable (columna). Al cargar en R, dependiendo de la función, los espacios en blanco entre palabras se autocorregirán por . o _. Es mejor modificar estos nombres para simplificarlos, acortarlos y evitar espacios en blanco.\n\nFIGURA 1.8: Si una variable contiene categorías, es probable que en R la quieras tratar como factor para análisis o graficación. Evita nombres de categorías excesivamente largos o con símbolos extraños. Puedes asegurarte en convertirlos categorías numéricas (1, 2, 3, etc.).\nComo dato adicional. Trata de utilizar una sola hoja de cálculo por archivo. Facilitará la carga de datos.","code":""},{"path":"tidyversecap.html","id":"cómo-se-debe-ver-una-base-tidy","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.1.2 ¿Cómo se debe ver una base tidy?","text":"Con todas las consideraciones mencionadas, una base de datos perfectamente tidy se vería:\nFIGURA 1.9: Tabla de datos ordenada. Vista de hoja de cálculo.\nAsumiendo que se está utilizando proyectos de RStudio, y que la base de datos WHO_tidy.xlsx existe dentro de dicha carpeta, el código para cargar la base datos en R es:\nFIGURA 1.11: Tabla perfectamente ordenada vista en RStudio.\n","code":"\nWHO <- openxlsx::read.xlsx(\"WHO_tidy.xlsx\")"},{"path":"tidyversecap.html","id":"introducción-a-dplyr-y-tidyr","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.2 Introducción a dplyr y tidyr","text":"En el universo de tidyverse existen dos asombrosa librerías para realizar limpieza y manejo de datos: dplyr y tidyr. De manera sencilla, las funciones más útiles que contienen son:TABLA 6.1: Funciones útiles para la limpieza y manejo de datos con tidyr.TABLA 6.2: Funciones útiles para la limpieza y manejo de datos con dplyr.","code":""},{"path":"tidyversecap.html","id":"pipelines-con-tidyverse","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.3 Pipelines con tidyverse","text":"Cuando se inicia en el lenguaje de R, la manera intuitiva de aplicar secuencialmente varias funciones una base de datos puede lucir así:Pero existe un concepto para explorar en este contexto: anidar variables. Implica colocar funciones una dentro de otra de manera que la aplicación se hace de adentro hacia afuera: sobre BASE_DE_DATOS se aplicará Funcion1(); al resultado de ella, se aplicará Funcion2(); y al siguiente resultado, Funcion3().Los programadores de la librería magrittr diseñaron un operador llamado pipe, en Español tubo, %>%. Este permite ir pasando el resultado de una función como primer argumento (o argumento de data) de la siguiente función. Este sencillo operador mejora enormemente la lectura y compresión del código. Con pipe, el ejemplo secuencial explicado arriba se convierte en:La gran ventaja es que tidyverse ha sido diseñado en torno la creación de pipelines, en Español tuberías. Siendo que todo se simplifica para su uso con estas librerías y otras que sean consideradas pipe-friendly, como rstatix para análisis estadístico básico. lo largo del capítulo, se irá aplicando el concepto de tuberías para que te familiarices con su uso.Como un ejemplo definitivo, así es como se crean pipelines que generen gráficos con ggplot2 y dplyr:\nFIGURA 1.17: Ejemplo de código con ggplot2 y dplyr utilizando una pipeline.\n","code":"\nRes1 <- Funcion1(BASE_DE_DATOS)\nRes1 <- Funcion2(Res1)\nRes3 <- Funcion3(Res2)\nFuncion3(Funcion2(Funcion1(BASE_DE_DATOS)))\n# Pipeline\nBASE_DE_DATOS %>% \n  Funcion1() %>% \n  Funcion2() %>% \n  Funcion3()\n# Cargar la base de datos Boston\nlibrary(MASS)\ndata(\"Boston\")\n\n# Pipeline\nBoston %>% \n  filter(rad %in% 1:3 & zn != 0) %>%\n  group_by(tax) %>% \n  summarise(age_promedio = mean(age),\n            rad = unique(rad)) %>% \n  ggplot(aes(x=as.factor(tax), y=age_promedio, fill=as.factor(rad)))+\n  geom_bar(stat=\"identity\")+\n  coord_flip()+ \n  theme_minimal()+\n  geom_text(aes(label=round(age_promedio,2)), color =\"white\",\n            hjust = 1.1)+\n  scale_y_discrete(expand = c(0,0,0,10))+\n  labs(x=\"Nivel de Tax\", y=\"Edad promedio\", fill=\"Grupo\",\n       title = \"Edado promedio por nivel de Tax\",\n       subtitle = \"Datos obtenidos de Boston (1969)\")+\n  theme(legend.position = \"bottom\", \n        axis.ticks.length.y = unit(0, \"cm\"),\n        legend.key.height = unit(0.2,\"cm\"),\n        legend.key.width = unit(1.5, \"cm\"))+\n  scale_fill_brewer(palette = \"Set2\")"},{"path":"tidyversecap.html","id":"tablas-anchas-y-largas-con-tidyr","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.4 Tablas anchas y largas con tidyr","text":"En general, mucho de lo que se puede hacer en R necesita de tablas anchas. Este es el nombre que reciben las tablas que cumplen con ser tidy (ordenadas, revisa la Sección 6.1 Datos ordenados):cada columna es una variable.cada fila es una observación.\nFIGURA 1.18: Comparativa entre tabla ancha y larga, y las funciones para pasar de una estructura otra.\n","code":""},{"path":"tidyversecap.html","id":"tabla-ancha-a-tabla-larga","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.4.1 Tabla ancha a tabla larga","text":"En ciertas ocasiones, trabajar con tablas largas es lo que necesitamos para analizar o generar gráficos con los datos. La función gather() de la librería tidyr permite convertir una tabla ancha en larga, apilando dos o más variables en tan solo dos columnas: una de etiquetas (argumento key) y una de valores o contenidos de las celdas (argumento value). La estructura básica es:Considera la tabla mice2:mice2 es una tabla ancha. Para apilar sus columnas y en una nueva columna llamada Tiempo, mientras que sus valores se apilan en Valores, se tiene:","code":"\ngather(DF,             # base de datos\n       key = \"COL1\",   # nombre de la futura columna de etiquetas\n       value = \"COL2\", # nombre de la futura columna de valores\n       COL3:COL4)      # columnas a apilar (e.g, posiciones 3:4)\n# install.packages(\"datarium\")\nlibrary(datarium)\n# Warning: package 'datarium' was built under R version 4.1.3\ndata(\"mice2\")\n\n# Ver el contenido\nmice2\n#    id before after\n# 1   1  187.2 429.5\n# 2   2  194.2 404.4\n# 3   3  231.7 405.6\n# 4   4  200.5 397.2\n# 5   5  201.7 377.9\n# 6   6  235.0 445.8\n# 7   7  208.7 408.4\n# 8   8  172.4 337.0\n# 9   9  184.6 414.3\n# 10 10  189.6 380.3\n# Utilizar gather() para apilar las columnas 2 y 3\n# en las columnas Tiempo (etiquetas) y Valor (valores)\nratones_larga <- gather(mice2, key=\"Tiempo\", value=\"Valor\", 2:3)\n\n# Ver el contenido\nratones_larga\n#    id Tiempo Valor\n# 1   1 before 187.2\n# 2   2 before 194.2\n# 3   3 before 231.7\n# 4   4 before 200.5\n# 5   5 before 201.7\n# 6   6 before 235.0\n# 7   7 before 208.7\n# 8   8 before 172.4\n# 9   9 before 184.6\n# 10 10 before 189.6\n# 11  1  after 429.5\n# 12  2  after 404.4\n# 13  3  after 405.6\n# 14  4  after 397.2\n# 15  5  after 377.9\n# 16  6  after 445.8\n# 17  7  after 408.4\n# 18  8  after 337.0\n# 19  9  after 414.3\n# 20 10  after 380.3"},{"path":"tidyversecap.html","id":"tabla-larga-a-tabla-ancha","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.4.2 Tabla larga a tabla ancha","text":"Apilar variables en tablas largas es muy frecuente en procesos de toma de datos, quizá por facilidad o rapidez en el almacenamiento de los mismos durante los estudios. La función spread() permite dispersar datos partiendo de dos columnas: una de etiquetas apiladas (key) y otra de valores apilados (values), hacia las columnas que sean necesarias (igual la cantidad de niveles en key). La estructura básica es:Considera la tabla ratones_larga obtenida en el ejemplo anterior:","code":"\nspread(DF,           # base de datos\n       key = COL1,   # columna de etiquetas\n       value = COL2) # columna de valores\n# Utilizar gather() para apilar las columnas 2 y 3\n# en las columnas Tiempo (etiquetas) y Valor (valores)\nspread(ratones_larga, key=Tiempo, value=Valor)\n#    id after before\n# 1   1 429.5  187.2\n# 2   2 404.4  194.2\n# 3   3 405.6  231.7\n# 4   4 397.2  200.5\n# 5   5 377.9  201.7\n# 6   6 445.8  235.0\n# 7   7 408.4  208.7\n# 8   8 337.0  172.4\n# 9   9 414.3  184.6\n# 10 10 380.3  189.6"},{"path":"tidyversecap.html","id":"filtrado","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.5 Filtrado","text":"","code":""},{"path":"tidyversecap.html","id":"selección","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.6 Selección","text":"","code":""},{"path":"tidyversecap.html","id":"agrupamiento","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.7 Agrupamiento","text":"","code":""},{"path":"tidyversecap.html","id":"reordenamiento","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.8 Reordenamiento","text":"","code":""},{"path":"tidyversecap.html","id":"conteo","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.9 Conteo","text":"","code":""},{"path":"tidyversecap.html","id":"creación-y-transformación-de-columnas","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.10 Creación y transformación de columnas","text":"","code":""},{"path":"tidyversecap.html","id":"resúmenes-estadísticos","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.11 Resúmenes estadísticos","text":"","code":""},{"path":"tidyversecap.html","id":"combinar-bases-de-datos","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.12 Combinar bases de datos","text":"","code":""},{"path":"tidyversecap.html","id":"valores-perdidos","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.13 Valores perdidos","text":"","code":""},{"path":"tidyversecap.html","id":"ejercicios-del-capítulo-3","chapter":"Capítulo 6 Manejo de datos con tidyverse","heading":"6.14 Ejercicios del capítulo","text":"C","code":""},{"path":"visualización-avanzada-de-gráficos.html","id":"visualización-avanzada-de-gráficos","chapter":"Capítulo 7 Visualización avanzada de gráficos","heading":"Capítulo 7 Visualización avanzada de gráficos","text":"","code":""},{"path":"visualización-avanzada-de-gráficos.html","id":"gramática-de-gráficos-sintaxis-de-ggplot2","chapter":"Capítulo 7 Visualización avanzada de gráficos","heading":"7.1 Gramática de gráficos: sintaxis de ggplot2","text":"","code":""},{"path":"visualización-avanzada-de-gráficos.html","id":"visualización-por-capas","chapter":"Capítulo 7 Visualización avanzada de gráficos","heading":"7.2 Visualización por capas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"componentes-clave-de-un-gráfico-con-ggplot2","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"Capítulo 8 Componentes clave de un gráfico con ggplot2","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"geométricas","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"8.1 Geométricas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"stats","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"8.2 Stats","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"coloreo-rellenado-formas-y-tipos-de-línea","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"8.3 Coloreo, rellenado, formas y tipos de línea","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"facetas","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"8.4 Facetas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"etiquetas","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"8.5 Etiquetas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"modificando-los-ejes","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"8.6 Modificando los ejes","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"temas","chapter":"Capítulo 8 Componentes clave de un gráfico con ggplot2","heading":"8.7 Temas","text":"","code":""},{"path":"creando-gráficos.html","id":"creando-gráficos","chapter":"Capítulo 9 Creando gráficos","heading":"Capítulo 9 Creando gráficos","text":"","code":""},{"path":"creando-gráficos.html","id":"una-variable-x-continua","chapter":"Capítulo 9 Creando gráficos","heading":"9.1 Una variable X continua","text":"","code":""},{"path":"creando-gráficos.html","id":"polígonos-de-frecuencias","chapter":"Capítulo 9 Creando gráficos","heading":"9.1.1 Polígonos de frecuencias","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-área","chapter":"Capítulo 9 Creando gráficos","heading":"9.1.2 Gráfico de área","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-densidad","chapter":"Capítulo 9 Creando gráficos","heading":"9.1.3 Gráfico de densidad","text":"","code":""},{"path":"creando-gráficos.html","id":"histograma-de-frecuencias","chapter":"Capítulo 9 Creando gráficos","heading":"9.1.4 Histograma de frecuencias","text":"","code":""},{"path":"creando-gráficos.html","id":"una-variable-x-discreta","chapter":"Capítulo 9 Creando gráficos","heading":"9.2 Una variable X discreta","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-barras","chapter":"Capítulo 9 Creando gráficos","heading":"9.2.1 Gráficos de barras","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-barras-polares","chapter":"Capítulo 9 Creando gráficos","heading":"9.2.2 Gráficos de barras polares","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfios-de-discrepancia","chapter":"Capítulo 9 Creando gráficos","heading":"9.2.3 Gráfios de discrepancia","text":"","code":""},{"path":"creando-gráficos.html","id":"dos-variables-x-vs-y-continuas","chapter":"Capítulo 9 Creando gráficos","heading":"9.3 Dos variables: X vs Y continuas","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-dispersión-de-puntos","chapter":"Capítulo 9 Creando gráficos","heading":"9.3.1 Gráfico de dispersión de puntos","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-etiquetas-y-texto","chapter":"Capítulo 9 Creando gráficos","heading":"9.3.2 Gráfico de etiquetas y texto","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-densidad-2d","chapter":"Capítulo 9 Creando gráficos","heading":"9.3.3 Gráficos de densidad 2D","text":"","code":""},{"path":"creando-gráficos.html","id":"dos-variables-x-discreta-vs-y-continua","chapter":"Capítulo 9 Creando gráficos","heading":"9.4 Dos variables: X discreta vs Y continua","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-cajas","chapter":"Capítulo 9 Creando gráficos","heading":"9.4.1 Gráficos de cajas","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-violín","chapter":"Capítulo 9 Creando gráficos","heading":"9.4.2 Gráfico de violín","text":"","code":""},{"path":"creando-gráficos.html","id":"dos-variables-x-vs-y-discretas","chapter":"Capítulo 9 Creando gráficos","heading":"9.5 Dos variables: X vs Y discretas","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-conteos","chapter":"Capítulo 9 Creando gráficos","heading":"9.5.1 Gráficos de conteos","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-calor","chapter":"Capítulo 9 Creando gráficos","heading":"9.5.2 Gráficos de calor","text":"","code":""},{"path":"adicionando-líneas.html","id":"adicionando-líneas","chapter":"Capítulo 10 Adicionando Líneas","heading":"Capítulo 10 Adicionando Líneas","text":"","code":""},{"path":"adicionando-líneas.html","id":"gráficos-de-regresión","chapter":"Capítulo 10 Adicionando Líneas","heading":"10.1 Gráficos de Regresión","text":"","code":""},{"path":"adicionando-líneas.html","id":"segmentos-y-flechas","chapter":"Capítulo 10 Adicionando Líneas","heading":"10.2 Segmentos y flechas","text":"","code":""},{"path":"adicionando-líneas.html","id":"curvas-y-flechas","chapter":"Capítulo 10 Adicionando Líneas","heading":"10.3 Curvas y flechas","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"gráficos-estadísticos-semiautomáticos","chapter":"Capítulo 11 Gráficos estadísticos semiautomáticos","heading":"Capítulo 11 Gráficos estadísticos semiautomáticos","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"funciones-de-ggpubr","chapter":"Capítulo 11 Gráficos estadísticos semiautomáticos","heading":"11.1 Funciones de ggpubr","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"funciones-de-ggstatsplot","chapter":"Capítulo 11 Gráficos estadísticos semiautomáticos","heading":"11.2 Funciones de ggstatsplot","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"funciones-de-ggcorplot","chapter":"Capítulo 11 Gráficos estadísticos semiautomáticos","heading":"11.3 Funciones de ggcorplot","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"exportación-de-gráficos","chapter":"Capítulo 12 Exportación de Gráficos","heading":"Capítulo 12 Exportación de Gráficos","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"composición-de-múltiples-gráficos","chapter":"Capítulo 12 Exportación de Gráficos","heading":"12.1 Composición de múltiples gráficos","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"utilizando-patchwork","chapter":"Capítulo 12 Exportación de Gráficos","heading":"12.1.1 Utilizando patchwork","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"utilizando-ggpubr","chapter":"Capítulo 12 Exportación de Gráficos","heading":"12.1.2 Utilizando ggpubr","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"exportacion-en-png-o-jpeg","chapter":"Capítulo 12 Exportación de Gráficos","heading":"12.2 Exportaci[on] en PNG o JPEG","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"exportación-en-pdf","chapter":"Capítulo 12 Exportación de Gráficos","heading":"12.3 Exportación en PDF","text":"","code":""},{"path":"solucionario-de-ejercicios.html","id":"solucionario-de-ejercicios","chapter":"A Solucionario de ejercicios","heading":"A Solucionario de ejercicios","text":"Este capítulo extra del libro permitirá al lector revisar si las soluciones realizadas los ejercicios de cada capítulo son correctos. Recuerda que existe una única solución un problema en R. Uno es libre de programar las soluciones según su propio pensamiento creativo, nivel de conocimiento del código y practicidad.Se recomienda revisar este capítulo antes de realizar los ejercicios, principalmente para permitir que el alumno desarrolle su pensamiento lógico respecto al código en R. Recuerda que la práctica hace al maestro.","code":""},{"path":"solucionario-de-ejercicios.html","id":"cap.-2-primer-contacto-con-r","chapter":"A Solucionario de ejercicios","heading":"A.1 Cap. 2: Primer contacto con R","text":"Soluciona la ecuación \\(\\sqrt({\\frac{24+12}{(2 * 3)^3})}\\).Solución:Resuelve \\(\\mathrm{log_{10}}(|\\frac{\\mathrm{exp(10)}^2}{-10*9^{6}}|)\\). Las barras verticales implican aplicar valor absoluto antes de calcular el logaritmo en base 10.Solución:1.La función sigmoidal \\(\\sigma(\\mathrm{z}) = \\frac{1}{1+e^{-\\mathrm{z}}}\\) es muy importante en estadística. Permite convertir el resultado de una regresión logística (Odds ratios) en probabilidades, facilitando la interpretación. Utiliza la fórmula \\(z = -1.69 + 1*0.56\\), emulando el resultado hipotético de una regresión logística, como insumo para calcular su probabilidad correspondiente utilizando la función sigmoidal. Como dato extra, el resultado de \\(\\sigma(\\mathrm{z})\\) por 100 para convertirlo probabilidad porcentual.Solución:Este ejercicio avanzado es de carácter explicativo. Sigue el ejercicio en la sección del Solucionario: Cap. 2, pregunta 3 correspondiente. Para calcular la derivaba de una función matemática, primero se debe crear la estructura matemática utilizando la función expression(). Una vez guardada la expresión, se utiliza la función D() para derivar. Calcula la primera derivada de:\n\\(f(x)=-2x+2\\)\n\\(f(x)=-2x^2-5\\)\n\\(f(x)=\\frac{x^3+2}{3}\\)\n\nCalcula la primera derivada de una expresión con dos variables:\n\\(f(x)=x^2+y^2+2*x*y-3*x+4*y+4\\)\n\nCalcula la segunda derivada de:\n\\(f(x)=x^2+3*x\\)Solución:Para resolver integrales en R, puedes revisar la documentación de la función integrate() en RDocumentation.Crea un vector con llamado num1 conteniendo 1000 números aleatorios con distribución normal, con promedio 19 y desviación estándar 1.29 (revisa la TABLA 2.4).\nAsegúrate de ejecutar previamente la función set.seed(123) para que el ejercicio sea replicable.Solución:Calcula el promedio y la desviación estándar del objeto num1. ¿Son exactamente iguales los valores definidos con los que creaste el conjunto de datos usando rnorm()?.Solución:Como habrás notado. Los valores obtenidos son exactamente los valores de promedio y desviación estándar con los que se generaron los mil números aleatorios con rnorm(). La aleatorización impide que los valores sean idénticos, obstante siempre tienden lo solicitado. que sucede exclusivamente en R, de hecho ningún lenguaje de programación lo hace idéntico.Calcula los cuartiles de dicho conjunto de datos. ¿Cuál es el valor del cuartil 50% (que es conocido como mediana) (revisa la TABLA 2.4)?Solución:Utilizando los operadores relacionales, convierte el vector numérico num1 vector lógico, aplicando la pregunta lógica “números mayores 20.0”. Guarda el resultado en el ambiente con el nombre VL20 (revisa la TABLA 2.3).Solución:Coloca el objeto VL20 dentro de la función mean(). La función mean calcula normalmente el promedio de un conjunto de datos numéricos. obstante, cuando se le ofrece un vector lógico, contabiliza la cantidad de elementos TRUE y ofrece la proporción de verdaderos respecto al total de elemento del conjunto. ¿Cuál es la proporción de elementos FALSE del vector VL20? (revisa la TABLA 2.3).Solución:Utilizando los operadores lógicos y relacionales, convierte el vector numérico num1 vector lógico, aplicando la pregunta lógica “números menor igual 19.5 y números mayor 15.7”. (revisa la TABLA 2.3). Si se sabe que son 1000 elementos los que contiene el vector, ¿Cuántos elementos del conjunto encajan dentro de la premisa lógica anterior?.Solución:","code":"\nsqrt((24+12)/(2*3)^3)\n# [1] 0.4082\nlog10(abs((exp(10)**2)/(-10*(9^6))))\n# [1] 1.96\n### Crear z\nz <- -1.69 + 1*0.56\n\n### Calcular la función sigmoidal\n1 / (1 + exp(-z))\n# [1] 0.2442\n### Crear las expresiones matemáticas\neMat1 <- expression((-2*x)+2)\neMat2 <- expression((-2*(x^2))-5)\neMat3 <- expression(((x^3)+2)/3)\n\n### Función D() para derivar las expresiones sobre x\nD(eMat1, \"x\")\n# -2\nD(eMat2, \"x\")\n# -(2 * (2 * x))\nD(eMat3, \"x\")\n# 3 * x^2/3\n\n### Crear la expresión matemática con dos variables (x e y)\neMat4 <-expression(x^2+y^2+2*x*y-3*x+4*y+4)\n\n### Función D() para derivar la expresiones sobre x\nD(eMat4, \"x\")\n# 2 * x + 2 * y - 3\n\n### Función D() para derivar la expresiones sobre y\nD(eMat4, \"y\")\n# 2 * y + 2 * x + 4\n\n### Crear la expresión matemática para obtener segunda derivada\neMat5 <- expression(x^2+3*x)\n\n### Primera derivada\nD(eMat5, \"x\")\n# 2 * x + 3\n  \n### Segunda derivada\nD(D(eMat5, \"x\"),'x')\n# [1] 2\n# Un ejemplo rápido de uso extraído de la documentación\nintegrand <- function(x) {1/((x+1)*sqrt(x))}\nintegrate(integrand, lower = 0, upper = Inf)\n# 3.142 with absolute error < 2.7e-05\nset.seed(123)\nnum1 <- rnorm(1000, mean=19, sd=1.29)\n\n### La función head() permite ver los primeros N elementos del vector\n### Aquí se define N como 20 elementos\nhead(num1, 20)\n#  [1] 18.28 18.70 21.01 19.09 19.17 21.21 19.59 17.37 18.11 18.43 20.58 19.46 19.52\n# [14] 19.14 18.28 21.31 19.64 16.46 19.90 18.39\nmean(num1)\n# [1] 19.02\nsd(num1)\n# [1] 1.279\n### Para ver los cuartiles por defecto\nquantile(num1)\n#    0%   25%   50%   75%  100% \n# 15.38 18.19 19.01 19.86 23.18\n\n### Para obtener el cuartil 50% o mediana\nquantile(num1, probs=0.5)\n#   50% \n# 19.01\nVL20 <- num1 > 20.0\n\n### La función head() permite ver los primeros N elementos del vector\n### Aquí se define N como 35 elementos\nhead(VL20, 35)\n#  [1] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n# [14] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n# [27]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n### Proporción de TRUE en el conjunto\nmean(VL20)\n# [1] 0.221\n\n### Proporción de FALSE en el conjunto\n1 - mean(VL20)\n# [1] 0.779\n### Crear el vector lógico, dándole un nombre cualquiera\nnum1LOGICO <- (num1 < 19 & num1 > 15.7)\n\n### Proporción de elementos TRUE\n### Es decir, que cumplieron la premisa anterior\nmean(num1LOGICO)\n# [1] 0.491\n\n### Convertir proporción a cantidad,\n### multiplicando por el total de datos del vector\nmean(num1LOGICO) * length(num1LOGICO)\n# [1] 491"},{"path":"solucionario-de-ejercicios.html","id":"preg-estructurasdatos","chapter":"A Solucionario de ejercicios","heading":"A.2 Cap. 3: Estructuras de datos","text":"Crea una variable llamada datosNumeros que contenga 200 números (decimales) entre el 20 y 80.Solución:Utilizando la función sample(), crea una variable llamada muestr4 que contenga el muestreo de 10 elementos (con repetición) del objeto datosNumeros. Utiliza set.seed(123)\nantes del muestro para asegurar la replicabilidad del mismo.Solución:Redondea todos los elementos del vector datosNumeros dos decimales, coerciona el objeto texto, y guarda el resultado en el ambiente con el nombre coer.Solución:Se puede coercer un número texto, dado que solo se necesita colocar el número entre comillas para sea considerado así.Utiliza coer para coercer el objeto hacia número nuevamente.Solución:Como es notorio, se puede coercer un texto que contenga “números” hacia numeric sin problema, dado que R, al quitarle las comillas cada elemento, se encuentra con un valor numérico correcto.Crea el vector miPais que contenga únicamente el nombre de tu país de residencia. Coerce miPaishacia vector numérico. ¿Notas la advertencia?Solución:La advertencia NAs introduced coercion implica que como al quitar las comillas, lo que queda es una palabra en lugar de un número, R puede darle valor numérico y lo reemplaza por un NA.Crea una data frame llamada DF10, cuyo contenido sea: una columna numérica, otra de texto, y otra lógica, todas de 5 elementos. Coerce DF10 hacia matriz. ¿Notas algo particular en los elementos de la matriz?Solución:Todos los elementos de una matriz deben pertenecer la misma clase. puede haber matrices con columnas numérica y de texto la vez. Aquí entra en juego el concepto de supremacía de clase. Esto aplica cuando la estructura hacia la cual se está coerciendo tiene como limitación el contener solo una clase de elementos (.e., vectores y matrices).La clase carácter prima sobre las demás clases en el lenguaje R. En presencia de tan solo un elemento de texto, toda la matriz se convierte en elementos textuales.En ausencia de elementos de clase carácter, los elementos numéricos (decimales o enteros) priman sobre los lógicos. Los TRUE se convierten en 1, y los FALSE en 0.Crea una lista que contenga los objetos: muestr4, datosNumeros,DF10. Para hacer el ejercicio replicable, respeta el orden mencionado. Luego, indexa las posiciones:\n- Fila 2, columna 3 del objeto DF10.\n- Elemento 150 del objeto datosNumeros.\n- El elemento 5 del objeto muestr4.Realiza esto utilizando tanto una lista nombra (list1) como nombrada (list2).Solución:","code":"\ndatosNumeros <- seq(20, 80, length=200)\n\n### Función head() para ver los 20 primeros elementos del vector\nhead(datosNumeros, 20)\n#  [1] 20.00 20.30 20.60 20.90 21.21 21.51 21.81 22.11 22.41 22.71 23.02 23.32 23.62\n# [14] 23.92 24.22 24.52 24.82 25.13 25.43 25.73\nset.seed(123)\nmuestr4 <- sample(datosNumeros, 10, replace = TRUE)\n\n### Revisar el contenido\nmuestr4\n#  [1] 67.64 73.67 23.92 78.49 70.95 34.77 55.28 32.66 23.92 55.28\n### Redondear datosNumeros\nr <- round(datosNumeros, 2)\n\n### Coercer hacia texto\ncoer <- as.character(r) \n\n### Revisar el contenido\nhead(coer, 20)\n#  [1] \"20\"    \"20.3\"  \"20.6\"  \"20.9\"  \"21.21\" \"21.51\" \"21.81\" \"22.11\" \"22.41\" \"22.71\"\n# [11] \"23.02\" \"23.32\" \"23.62\" \"23.92\" \"24.22\" \"24.52\" \"24.82\" \"25.13\" \"25.43\" \"25.73\"\n### Redondear datosNumeros\nas.numeric(coer)\n#   [1] 20.00 20.30 20.60 20.90 21.21 21.51 21.81 22.11 22.41 22.71 23.02 23.32 23.62\n#  [14] 23.92 24.22 24.52 24.82 25.13 25.43 25.73 26.03 26.33 26.63 26.93 27.24 27.54\n#  [27] 27.84 28.14 28.44 28.74 29.05 29.35 29.65 29.95 30.25 30.55 30.85 31.16 31.46\n#  [40] 31.76 32.06 32.36 32.66 32.96 33.27 33.57 33.87 34.17 34.47 34.77 35.08 35.38\n#  [53] 35.68 35.98 36.28 36.58 36.88 37.19 37.49 37.79 38.09 38.39 38.69 38.99 39.30\n#  [66] 39.60 39.90 40.20 40.50 40.80 41.11 41.41 41.71 42.01 42.31 42.61 42.91 43.22\n#  [79] 43.52 43.82 44.12 44.42 44.72 45.03 45.33 45.63 45.93 46.23 46.53 46.83 47.14\n#  [92] 47.44 47.74 48.04 48.34 48.64 48.94 49.25 49.55 49.85 50.15 50.45 50.75 51.06\n# [105] 51.36 51.66 51.96 52.26 52.56 52.86 53.17 53.47 53.77 54.07 54.37 54.67 54.97\n# [118] 55.28 55.58 55.88 56.18 56.48 56.78 57.09 57.39 57.69 57.99 58.29 58.59 58.89\n# [131] 59.20 59.50 59.80 60.10 60.40 60.70 61.01 61.31 61.61 61.91 62.21 62.51 62.81\n# [144] 63.12 63.42 63.72 64.02 64.32 64.62 64.92 65.23 65.53 65.83 66.13 66.43 66.73\n# [157] 67.04 67.34 67.64 67.94 68.24 68.54 68.84 69.15 69.45 69.75 70.05 70.35 70.65\n# [170] 70.95 71.26 71.56 71.86 72.16 72.46 72.76 73.07 73.37 73.67 73.97 74.27 74.57\n# [183] 74.87 75.18 75.48 75.78 76.08 76.38 76.68 76.98 77.29 77.59 77.89 78.19 78.49\n# [196] 78.79 79.10 79.40 79.70 80.00\n### Crear la variable\nmiPais <- \"Peru\"\n\n### Coercer hacia número\nas.numeric(miPais)\n# Warning: NAs introduced by coercion\n# [1] NA\n### Crear la variable\nDF10 <- data.frame(\n  COL1 = 1:5,\n  COL2 = c(\"Text1\", \"Text2\", \"Text3\", \"Text4\", \"Text5\"),\n  COL3 = c(T, F, T, F, T)\n)\n\n### Coercer hacia matriz\nas.matrix(DF10)\n#      COL1 COL2    COL3   \n# [1,] \"1\"  \"Text1\" \"TRUE\" \n# [2,] \"2\"  \"Text2\" \"FALSE\"\n# [3,] \"3\"  \"Text3\" \"TRUE\" \n# [4,] \"4\"  \"Text4\" \"FALSE\"\n# [5,] \"5\"  \"Text5\" \"TRUE\"\n### Crear la lista nombrada\nlist1 <- dplyr::lst(muestr4, datosNumeros, DF10)\n\n### Ubicar las indexaciones de la lista nombrada\nlist1$DF10$COL3[2]\n# [1] FALSE\nlist1$datosNumeros[150]\n# [1] 64.92\nlist1$muestr4[5]\n# [1] 70.95\n\n### Crear la lista no nombrada\nlist2 <- list(muestr4, datosNumeros, DF10)\n\n### Ubicar las indexaciones de la lista no nombrada\nlist2[[3]][2,3]\n# [1] FALSE\nlist2[[2]][150]\n# [1] 64.92\nlist2[[1]][5]\n# [1] 70.95"},{"path":"solucionario-de-ejercicios.html","id":"cap.-5-programación-funcional","chapter":"A Solucionario de ejercicios","heading":"A.3 Cap. 5: Programación funcional","text":"Reproduce el resultado del siguiente loop , utilizando la función replicate():Solución:Crea la base de datos DF numérica (código ya definido en el siguiente chunk), que tiene las dimensiones 12 (filas) x 5 (columnas). Esta base contiene valores deseados: -999. Crea y utiliza una función llamada cambiarNA() que te permita cambiar estos valores por NA.Solución:Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA() para que solo cambie -999 NA, sino que cambie cualquier valor que tú le proporciones con un argumento. Llama esta función cambiarNA2(). Utilízala para reemplazar los valores 5555 NA.Solución:Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA2() de tal manera que te permita definir más de un valor (un vector numérico) como elementos ser reemplazados por NA. Llama esta función cambiarNA3(). Cambia por NA los valores -999 y 5555. Pista: Esta función deberá contener un loop para aplicarle la función de cambio por NA un elemento del vector la vez en cada iteración.Solución:Crea un loop que itere sobre los números del 1 al 50 y calcule el cubo de cada número, de manera que los resultados se vayan guardando en un vector llamado preliminar. Luego, crea un segundo loop que te permita identificar y almacenar solamente los números menores la mediana median() del conjunto de datos preliminar en un nuevo vector llamado final.Solución:En R ya existe una función para calcular la varianza y es var(). Pero este ejercicio se trata de poner en juego lo que aprendiste sobre programación en R. La fórmula matemática de la varianza poblacional, con denominador \\(n\\), Ecuación (5.1). Pero la función var() de R contiene la fórmula matemática para calcular la varianza de muestras, de poblaciones enteras. La fórmula matemática de la varianza muestral que usa R tiene como denominador \\(n-1\\), Ecuación (5.2). Crea una función llamada var2() que calcule la varianza del conjunto de datos llamado vector. Finalmente, compara tus resultados con los obtenidos por var().\\[\\begin{align}\n  \\sigma^2 = \\frac{1}{n}*{\\displaystyle\\sum_{=1}^{n}(x_i - \\mu)^2} \\tag{5.1}\n  \\end{align}\\]\\[\\begin{equation}\n  \\sigma^2 = \\frac{1}{n-1}*{\\displaystyle\\sum_{=1}^{n}(x_i - \\mu)^2} \\tag{5.2}\n  \\end{equation}\\]Solución:Dentro de la función necesitas:Un código que calcule el promedio de los valores de vector.Una estructura que le reste el promedio cada elemento de vector y eleve cada resta al cuadrado.Sumar todos los cuadrados obtenidos.Identificar la longitud de vector (denotada por n), y dividir la sumatoria de cuadrados entre n.Si necesitas en algún momento, ya conoces cómo crear la fórmula de la varianza poblacional en R.Carga la base de datos npk. Usando una función de la familia apply(), calcula la el promedio, mediana y desviación estándar de la columna yield para cada categoría (numérica) de la columna block. Con ello, se conocerá el promedio de producción que se obtuvo en cada bloque para un estudio de mejora fitogenética:Solución:Ejecuta el siguiente código para crear una lista llamada iris3Lista partir de la base de datos de ejemplo iris3 (un array). Si revisas iris3Lista, notarás que continene 3 elementos, cada uno de ellos es una matriz de datos de cuatro columnas (Sepal L., Sepal W., Petal L., y Petal W.). Utilizando dos funciones de la familia apply(), calcula el promedio de cada columna de cada elemento de la lista iris3Lista.Solución:","code":"\nset.seed(123)\nlista1 <- list() # Lista vacía\nfor (i in 1:3) { # Número de iteraciones = 5\n  lista1[[i]] = rnorm(6, 0, 1) # Conjunto aleatorio normal para cada iteración\n}\nlista1\n# [[1]]\n# [1] -0.56048 -0.23018  1.55871  0.07051  0.12929  1.71506\n# \n# [[2]]\n# [1]  0.4609 -1.2651 -0.6869 -0.4457  1.2241  0.3598\n# \n# [[3]]\n# [1]  0.4008  0.1107 -0.5558  1.7869  0.4979 -1.9666\n# Importante simplify = FALSE para obtener una lista \n# de vectores y no un solo vector con todos los resultados\nset.seed(123)\nlista1 <- replicate(3, {\n  rnorm(6, 0, 1)\n  }, \n  simplify = FALSE) \n\n### Resultado\nlista1\n# [[1]]\n# [1] -0.56048 -0.23018  1.55871  0.07051  0.12929  1.71506\n# \n# [[2]]\n# [1]  0.4609 -1.2651 -0.6869 -0.4457  1.2241  0.3598\n# \n# [[3]]\n# [1]  0.4008  0.1107 -0.5558  1.7869  0.4979 -1.9666\n# Base de datos DF\nset.seed(123)\nsecuencia <- c(seq(0.5, 7.9, length = 10), -999, 5555)\nDF <- data.frame(replicate(5, \n                           sample(secuencia, 12, rep = TRUE)))\nDF <- round(DF,2)\n\n# Darle nombre a sus columnas\ncolnames(DF) <- paste0(\"Var\", 1:5)\n\n# Revisar el contenido de DF\nDF \n#       Var1    Var2    Var3    Var4    Var5\n# 1     2.14    3.79    7.08    7.90    6.26\n# 2     2.14    2.14    2.14    5.43 5555.00\n# 3     7.90 -999.00    2.97 -999.00    1.32\n# 4     1.32    7.08    0.50 5555.00    0.50\n# 5     4.61 5555.00 -999.00    3.79    7.08\n# 6  -999.00    7.08    5.43    5.43 -999.00\n# 7     3.79    7.08    3.79    3.79    7.08\n# 8     2.97    2.14 5555.00 -999.00    4.61\n# 9     4.61    6.26    7.90    4.61    3.79\n# 10    7.08    7.90    5.43    7.08    7.08\n# 11    7.90    5.43    7.08    1.32    7.90\n# 12 -999.00    7.90    7.08    3.79 5555.00\n### Crear función\ncambiarNA <- function(x) {\n  x[x == -999] <- NA\n  print(x)\n}\n\n### Usar la función\ncambiarNA(DF)\n#    Var1    Var2    Var3    Var4    Var5\n# 1  2.14    3.79    7.08    7.90    6.26\n# 2  2.14    2.14    2.14    5.43 5555.00\n# 3  7.90      NA    2.97      NA    1.32\n# 4  1.32    7.08    0.50 5555.00    0.50\n# 5  4.61 5555.00      NA    3.79    7.08\n# 6    NA    7.08    5.43    5.43      NA\n# 7  3.79    7.08    3.79    3.79    7.08\n# 8  2.97    2.14 5555.00      NA    4.61\n# 9  4.61    6.26    7.90    4.61    3.79\n# 10 7.08    7.90    5.43    7.08    7.08\n# 11 7.90    5.43    7.08    1.32    7.90\n# 12   NA    7.90    7.08    3.79 5555.00\n\n### Para guardar sus resultados permanentemente\nresultados <- cambiarNA(DF)\n#    Var1    Var2    Var3    Var4    Var5\n# 1  2.14    3.79    7.08    7.90    6.26\n# 2  2.14    2.14    2.14    5.43 5555.00\n# 3  7.90      NA    2.97      NA    1.32\n# 4  1.32    7.08    0.50 5555.00    0.50\n# 5  4.61 5555.00      NA    3.79    7.08\n# 6    NA    7.08    5.43    5.43      NA\n# 7  3.79    7.08    3.79    3.79    7.08\n# 8  2.97    2.14 5555.00      NA    4.61\n# 9  4.61    6.26    7.90    4.61    3.79\n# 10 7.08    7.90    5.43    7.08    7.08\n# 11 7.90    5.43    7.08    1.32    7.90\n# 12   NA    7.90    7.08    3.79 5555.00\nresultados\n#    Var1    Var2    Var3    Var4    Var5\n# 1  2.14    3.79    7.08    7.90    6.26\n# 2  2.14    2.14    2.14    5.43 5555.00\n# 3  7.90      NA    2.97      NA    1.32\n# 4  1.32    7.08    0.50 5555.00    0.50\n# 5  4.61 5555.00      NA    3.79    7.08\n# 6    NA    7.08    5.43    5.43      NA\n# 7  3.79    7.08    3.79    3.79    7.08\n# 8  2.97    2.14 5555.00      NA    4.61\n# 9  4.61    6.26    7.90    4.61    3.79\n# 10 7.08    7.90    5.43    7.08    7.08\n# 11 7.90    5.43    7.08    1.32    7.90\n# 12   NA    7.90    7.08    3.79 5555.00\n# Crear la función con un argumento extra que te \n# permita modificar el número a reemplazar por NA \ncambiarNA2 <- function(x, valor) {\n  x[x == valor] <- NA\n  print(x)\n}\n\n# Usar la función\ncambiarNA2(DF, 5555)\n#       Var1    Var2    Var3    Var4    Var5\n# 1     2.14    3.79    7.08    7.90    6.26\n# 2     2.14    2.14    2.14    5.43      NA\n# 3     7.90 -999.00    2.97 -999.00    1.32\n# 4     1.32    7.08    0.50      NA    0.50\n# 5     4.61      NA -999.00    3.79    7.08\n# 6  -999.00    7.08    5.43    5.43 -999.00\n# 7     3.79    7.08    3.79    3.79    7.08\n# 8     2.97    2.14      NA -999.00    4.61\n# 9     4.61    6.26    7.90    4.61    3.79\n# 10    7.08    7.90    5.43    7.08    7.08\n# 11    7.90    5.43    7.08    1.32    7.90\n# 12 -999.00    7.90    7.08    3.79      NA\n### Crear la función con un argumento que admita \n### un vector de varios elementos a cambiar por NA\ncambiarNA3 <- function(x, vector) {\n  for (i in seq_along(vector)) {\n    x[x == vector[i]] <- NA\n  }\n  print(x)\n}\n\n### Usar la función\ncambiarNA3(DF, c(5555, -999))\n#    Var1 Var2 Var3 Var4 Var5\n# 1  2.14 3.79 7.08 7.90 6.26\n# 2  2.14 2.14 2.14 5.43   NA\n# 3  7.90   NA 2.97   NA 1.32\n# 4  1.32 7.08 0.50   NA 0.50\n# 5  4.61   NA   NA 3.79 7.08\n# 6    NA 7.08 5.43 5.43   NA\n# 7  3.79 7.08 3.79 3.79 7.08\n# 8  2.97 2.14   NA   NA 4.61\n# 9  4.61 6.26 7.90 4.61 3.79\n# 10 7.08 7.90 5.43 7.08 7.08\n# 11 7.90 5.43 7.08 1.32 7.90\n# 12   NA 7.90 7.08 3.79   NA\n### Secuencia numérica\nsecuencia <- 1:50\n\n### Primer loop con for\npreliminar <- c()\nfor(i in seq_along(secuencia)){\n  preliminar[i] <- secuencia[i]^3\n}\n\n### Resultado preliminar\npreliminar\n#  [1]      1      8     27     64    125    216    343    512    729   1000   1331\n# [12]   1728   2197   2744   3375   4096   4913   5832   6859   8000   9261  10648\n# [23]  12167  13824  15625  17576  19683  21952  24389  27000  29791  32768  35937\n# [34]  39304  42875  46656  50653  54872  59319  64000  68921  74088  79507  85184\n# [45]  91125  97336 103823 110592 117649 125000\n\n### Segundo loop con for\nfinal <- c()\nfor( i in seq_along(preliminar)) {\n  if(preliminar[i] <= median(preliminar)){\n    final <- c(final, preliminar[i])\n  }\n}\n\n### Resultado final\nfinal\n#  [1]     1     8    27    64   125   216   343   512   729  1000  1331  1728  2197\n# [14]  2744  3375  4096  4913  5832  6859  8000  9261 10648 12167 13824 15625\nset.seed(123)\nvector <- rnorm(50, 21, 1.6)\n### Crear la función\nvar2 <- function(x) {\n  promedio <- mean(x)\n  cuadrados <- c()\n  for(i in seq_along(x)) {\n    valor <- (x[i] - promedio)^2\n    cuadrados <- c(cuadrados, valor)\n  }\n  n <- length(x)\n  sumatoria <- sum(cuadrados)\n  varianza <- sumatoria / (n-1)\n  return(varianza)\n}\n\n### Usar la función\nvar2(vector)\n# [1] 2.195\n\n### Comparar con la el resultado de var()\nvar(vector)\n# [1] 2.195\ndata(\"npk\")\ntapply(npk$yield, npk$block, FUN = mean)\n#     1     2     3     4     5     6 \n# 54.02 57.45 60.77 50.12 50.52 56.35\ntapply(npk$yield, npk$block, FUN = median)\n#     1     2     3     4     5     6 \n# 53.25 57.25 59.30 47.15 50.65 56.60\ntapply(npk$yield, npk$block, FUN = sd)\n#     1     2     3     4     5     6 \n# 7.269 2.044 6.790 8.150 1.486 2.435\n# Cargar iris3\ndata(\"iris3\")\n\n# Convertirla a lista\niris3Lista <- list(setosa = iris3[,,1],\n                versicolor = iris3[,,2],\n                virginica = iris3[,,3])\nlapply(iris3Lista, FUN = function(x) {\n  apply(x, 2, mean)\n})\n# $setosa\n# Sepal L. Sepal W. Petal L. Petal W. \n#    5.006    3.428    1.462    0.246 \n# \n# $versicolor\n# Sepal L. Sepal W. Petal L. Petal W. \n#    5.936    2.770    4.260    1.326 \n# \n# $virginica\n# Sepal L. Sepal W. Petal L. Petal W. \n#    6.588    2.974    5.552    2.026"}]
