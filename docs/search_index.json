[["index.html", "Introducción a R para Ciencias Una gentil introducción al mundo de la programación para investigadores Bienvenida", " Introducción a R para Ciencias Una gentil introducción al mundo de la programación para investigadores Irwing S. Saldaña 2022-03-17 Bienvenida Esta es la página web del libro Introducción a R para Ciencias, publicado por IC Press, Fondo Editorial del Instituto de Ciencias Antonio Brack. Para solicitar una copia electrónica del libro en formato PDF, hacerlo a través de Amazon o IC PRESS. Este libro busca: Democratizar el uso del lenguaje de programación R en investigación científica, a través de una explicación amigable, con ejemplos sencillos y ejercicios de refuerzo. Ser el libro de referencia de los primeros módulos del programa Data Science: Análisis Estadístico para Ciencias con R, el cual contiene cinco cursos dictados por el profesor Irwing S. saldaña en el Instituto de Ciencias Antonio Brack a través de la plataforma educativa online masterX. En tal sentido, para usar este libro, no se necesita saber de antemano el lenguaje de programación R ni conocimientos estadísticos. Este libro ha sido completamente escrito en R Markdown, utilizando RStudio. Si tienes alguna sugerencia, o detectas algún fallo ortográfico, error de forma o de fondo, por favor envía un mensaje a isaldanau@gmail.com con el asunto de correo Corrección Libro Estadística. Esta página web es de libre uso dentro de los términos autorizados bajo la Licencia Internacional Reconocimiento No Comercial - Sin Derivadas 4.0. Además, esta obra utiliza un Código de conducta para colaboradores. Al contribuir a este libro, acepta cumplir sus términos. Finalmente, esta obra está alojada en Netlify, con código abierto disponible en la cuenta de Github del autor. La portada del libro ha sido creada utilizando una fotografía de acceso abierto de Pawel Czerwinski publicada en Unsplash. "],["cómo-usar-el-libro.html", "¿Cómo usar el libro?", " ¿Cómo usar el libro? El libro cuenta con capítulos secuenciales. Si es tu primera vez con R, se sugiere continuar la secuencia. La información está organizada de manera que permita al lector identificar la teoría y ejemplos, junto con ciertos contenidos resaltados como se muestra a continuación: NOTAS SOBRE EL CÓDIGO: brindan ayuda respecto al código. Incluye comandos adicionales, sugerencias o alternativas para escribir de manera más sencilla y clara en el lenguaje R. COMENTARIOS: con aclaraciones y mensajes que ayudarán a entender mejor lo explicado. ADVERTENCIAS: de índole metodológica, técnica, o sobre alguna particularidad del código. "],["prefacio.html", "Prefacio ", " Prefacio "],["por-qué-aprender-r.html", "¿Por qué aprender R?", " ¿Por qué aprender R? Sin importar tu carrera de origen, es más que seguro nunca pensaste que algún día terminarías queriendo aprender a programar. Esta necesidad se está haciendo cada vez más frecuentes entre profesionales de distintas ramas de la ciencia. Las razones de aprender a programar pueden ser diversas, pero casi siempre se centran en la necesidad de analizar datos, hacer ciencia, participar en un grupo de investigación, o para tener herramientas analíticas para el doctorado. Pero ¿Por qué R?. Figura 0.1: Fortalezas que presenta el lenguaje de programación R y lo destacan por sobre otros lenguajes como Python o Julia. R es uno de los lenguajes más populares para ciencia de datos e investigación científica. Es considerado uno de los lenguajes de programación más sencillos de aprender. Tres razones técnicas por las cuales aprender R por sobre otros lenguajes implican: Estuvo orientado al desarrollo estadístico desde su concepción. Casi cualquier análisis puede ejecutarse con él. No necesita compilarse para interpretarse. Es suficiente con usar un interprete como RStudio para que las órdenes se ejecuten. Una de las particularidades del lenguajes que es basado en vectores. Esto simplifica el uso de funciones hacia conjuntos de datos, haciendo del lenguaje rápido en procesamientos básicos. Su amplia comunidad de desarrollo genera constantemente paquetes, manteniendo a los usuarios en la vanguardia del avance científico. Cuenta con una comunidad de soporte enorme en plataformas como StackOverflow, RStudio Community, R-Bloggers. Masiva cantidad de repositorios en la nube como GitHub, GitLab o Bioconductor donde se alberga toda la información que ha sido alguna vez creada y publicada con R. "],["a-quién-está-dirigido-este-libro.html", "¿A quién está dirigido este libro?", " ¿A quién está dirigido este libro? El libro está planeado para llevarte desde cero en el manejo del lenguaje de programación R, sin importar el campo de la ciencia del que provengas. Los capítulos están diseñados para ser independientes entre sí. Siéntete libre de saltar entre los capítulos y seleccionar aquellos que sean de tu interés en el momento, si es que ya dominas conceptos más básicos. La progresión temática está adaptada a los primeros dos cursos del programa Data Science: Estadística y Análisis de Datos en R, ofrecido por el autor de este libro Irwing S. Saldaña, Instituto de Ciencias Antonio Brack: Introducción a R para Ciencias Gráficos estadísticos avanzados con R El programa comenzó a ser dictado en 2020, y ha recibido a estudiantes de diferentes partes de América Latina, El Caribe, y países como Estados Unidos o España. Nuestros alumnos cuentan con diversos perfiles profesionales: biólogos, médicos y otros profesionales de la salud, ingenieros, psicólogos, entre otros; además, profesionales de otras ramas no tan afines a las ciencias básicas o aplicada, como economistas, tecnólogos o especialistas en finanzas. "],["agradecimientos.html", "Agradecimientos", " Agradecimientos FALTA "],["esencialesRRStudio.html", "Capítulo 1 Esenciales de R y RStudio", " Capítulo 1 Esenciales de R y RStudio Comenzar el aprendizaje de un lenguaje de programación puede resultar doblemente engorroso si nunca se estuvo en contacto con un editor de texto, o un interprete de lenguaje de programación. Este primer capítulo está enteramente dedicado a brindarle al lector los puntos esenciales para entender el uso de RStudio, el principal editor de texto especializado para el lenguaje R. Se recomienda realizar los pasos de instalación y configuración, además de una revisión concienzuda de los tópicos aquí presentados, antes de pasar a tener el primer contacto con la sintaxis del código de R (sección 2. Primer contacto con R). Figura 1.1: Estructura temática del capítulo Esenciales de R y RStudio. "],["instalación-de-r-y-rstudio.html", "1.1 Instalación de R y RStudio", " 1.1 Instalación de R y RStudio Para utilizar el lenguaje de programación R (en adelante R), proponemos el uso del ambiente de desarrollo integrado RStudio. Este programa mejorará enormemente el flujo, la velocidad y la eficiencia de trabajo con R. RStudio es más que un editor de texto que resalta la sintaxis del código de R, sino que también permite tener paneles de trabajo organizados que facilitan su uso. Requerimientos mínimos del sistema para ejecutar RStudio: Sistema con CPU de 64 bits. Con 32 bits es posible instalar R pero no las versiones más recientes de RStudio. Procesadores de 2 núcleos (equivalente a Intel® Core i3 o AMD Ryzen 3). 4 Gb RAM. Espacio en almacenamiento de 100 Gb. Requerimientos recomendados del sistema para ejecutar RStudio: Procesadores de 4 a más núcleos (equivalente a Intel® Core i5 a más o AMD Ryzen 5 a más). 8 a más Gb RAM. Más de 100 Gb de espacio de almacenamiento. Para efectos de este libro, se deberá utilizar las versiones listadas (o posteriores) de los siguientes programas, según el sistema operativo: Para Windows: R version 4.1.3 (2022-03-10)  One Push-Up Descarga RStudio Desktop 2022.02.0+443 Descarga Rtools4.0 Descarga Para macOS: R version 4.1.3 (2022-03-10)  One Push-Up Descarga RStudio Desktop 2021.09.1+372 Descarga XQuartz 2.8.1. Descarga Para Ubuntu/Debian: A lo largo del libro no brindamos comentarios o soporte para el uso de R o RStudio en UNIX/GNU/Linux/Ubuntu. Las principales razones son que la mayoría de usuarios que aprenden R no suelen utilizar sistemas operativos de código libre, además de que algunos paquetes han presentado problemas al ser instalados. Primero, se debe preparar el índice de paquetes del sistema: sudo apt update sudo apt -y upgrade Luego, ejecuta: sudo apt -y install r-base Con lo anterior ya se tiene R instalado. Más adelante, cuando se desee actualizar R, ejecuta el código: sudo apt-get remove --purge r-base* Luego, añadir el repositorio de CRAN: sudo gedit /etc/apt/source.list Para Instalar RStudio para Ubuntu 18, Ubuntu 20 o Debian 10 sudo apt-get install gdebi-core wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-2022.02.0-443-amd64.deb sudo gdebi rstudio-server-2021.09.2-382-amd64.deb Los pasos aquí detallados están publicados en la web oficial de RStudio. Otros códigos interesantes puedes hallarlos en diferentes referencias como las del Center for Open Middleware. "],["configuración-de-rstudio.html", "1.2 Configuración de RStudio", " 1.2 Configuración de RStudio La siguiente es una configuración sugerida para que RStudio sea visualizado de igual manera por todos los estudiantes que usen este libro, y se guíen mejor con la sintaxis del código, ordenamiento de paneles, codificación, idioma del texto, entre otros. Figura 1.2: Para iniciar la configuración de RStudio, clic en tools/ Global Options. Figura 1.3: Abrirá la ventana de configuraciones. En la pestaña General se verifica la versión de R que está ejecutando RStudio. Figura 1.4: En la pestaña Code se configura la mayor cantidad de puntos necesarios para que el código sea legible. Aquí se muestra la configuración de las pestañas Editing y Display. Las dos opciones nuevas en la versión de RStudio 1.4+ son (con flechas rojas), son importantes en mejorar la lectura del código para principiantes: una permite identificar los pares de paréntesis con colores diferenciables (Rainbow parentheses en pestaña Display), y la otra es un primer intento de crear un operador pipe nativo para el código básico de R (Use native pipe operator, |&gt;). Este último no lo habilitaremos para seguir usando el pipe de tidyverse %&gt;%. Figura 1.5: En la pestaña Saving es importante definir la codificación que usarán los archivos generados por RStudio. Se recomienda dar clic en Change... y luego seleccionar la codificación UTF-8. Figura 1.6: Las pestañas Completion y Diagnóstico no se modifican mucho, pero sí es necesario mencionar que si notáse que el programa se ejecuta muy lento, se debe considerar desactivar las opciones de diagnóstico (marcadas en rojo). Figura 1.7: La organización de los paneles descritos en la sección 1.4 Paneles de RStudio se configuran previamente en la pestaña Pane Layout. A la izquierda: la organización por defecto. A la derecha: se deberá seleccionar todas las pestañas (excepto VCS y Connections) con un check dentro del panel superior derecho. Eso hará que el panel inferior derecho cambie de nombre a TabSet. Figura 1.8: El siguiente paso es cambiar la ubicación de TabSet haciendo clic y cambiando el panel por Console. Clic en Aplicar para definir los cambios. Figura 1.9: La configuración de R Markdown es solo para evitar que se cuelgue al usar los documentos. Definir todas las casillas y selectores como se muestra a continuación en las pestañas Basic y Advanced. Figura 1.10: Para trabajar correctamente con los documentos R Markdown y evitar que se cuelguen, desmarcar la casilla con flecha roja. En la pestaña Spelling, se especifica el uso del lenguaje para el texto de los documentos. Selecciona de la lista Spanish. Clic en Aplicar para definir los cambios. "],["nuevas-características-de-rstudio-versión-2022-actualizado-23-02-22.html", "1.3 Nuevas características de RStudio versión 2022 (Actualizado: 23-02-22)", " 1.3 Nuevas características de RStudio versión 2022 (Actualizado: 23-02-22) Durante febrero de 2022 se actualizó RStudio a la primera versión del año: 2022.02.0+443. En esta versión, el soporte gráfico fue actualizado, además de permitir algunos cambios en la visualización de R Markdown. El detalle de la actualización publicada por Studio Blog está disponible aquí. Figura 1.11: En la sección de R Markdown, pestaña Visual, apareció una nueva opción para numerar las líneas de código dentro de cada code chunk (flecha roja izquierda, cambio visualizado en la flecha roja derecha). Además, la forma de cambiar del modo editor visual (Visual) a editor de código (Source) está dispuesto de manera más elegante. Estos cambios, están acompañados en mejoras en la salida gráfica y corrección de algunos problemas menores de los R Markdown. "],["tema-brackinstitute-2022.html", "1.4 Tema BrackInstitute (2022)", " 1.4 Tema BrackInstitute (2022) Este es un requerimiento especial para los estudiantes que usen este libro en las clases, en vivo o grabadas, del Instituto de Ciencias Antonio Brack a través de la plataforma educativa online masterX. Se les solicita instalen el tema de color de RStudio BrackInstitute para que la sintaxis del código sea del mismo color que el mostrado en clase, facilitando así su comprensión. Si eres un lector que no está llevando el programa, sientete libre instalar el tema también. Figura 1.12: Vista previa del tema BrackInstitute. Para instalarlo, copia las líneas de código completas en la consola. install.packages(&quot;rstudioapi&quot;) tema_BrackInstitute &lt;- fs::path_temp(&quot;tema_BrackInstitute&quot;, ext = &quot;tmTheme&quot;) download.file(&quot;https://raw.githubusercontent.com/irwingss/Primolius-Theme/main/BrackInstitute.tmTheme&quot;,tema_BrackInstitute) rstudioapi::addTheme(tema_BrackInstitute, apply = TRUE) Como se muestra a continuación: Figura 1.13: Código de instalación del tema BrackInstitute en la consola, listo para ser ejecutado. Finalmente, presiona enter para comenzar su ejecución. Si todo va bien, el tema cambiará automáticamente. Para más temas desarrollados para el Instituto de Ciencias Antonio Brack, visita el repositorio Primolius-Theme de Irwing S. Saldaña. "],["panelesRStudio.html", "1.5 Paneles de RStudio", " 1.5 Paneles de RStudio Existen diversos editores de código que permiten trabajar con R, pero ninguno con la versatilidad de RStudio. El programa está dividido en paneles que uno puede reorganizar a conveniencia. Más allá de la posición o el orden de los paneles, es necesario que se sepa reconocerlos por su contenido, las pestañas que contiene, entre otros. Aquí se presentan los paneles en su posición clásica, junto con algunas barras y botones que se deben conocer al iniciar con RStudio. Figura 1.14: Panel de Trabajo. Aquí aparecerán los archivos de trabajo de R, sean R script o R Markdown. Además, es donde aparecen las bases de datos cuando se pide visualizarlas en RStudio. Figura 1.15: Consola. Es el panel donde se imprimen los resultados textuales y numéricos junto con el código que los genera. Figura 1.16: Panel de pestañas: aquí encontrarás: el ambiente (Environment) donde se guardan los objetos creados o cargados en RStudio; la historia (History) de las ejecuciones realizadas durante la sesión de RStudio; archivos (Files) para visualizar los archivos de la carpeta de trabajo actual (definida como la carpeta documentos por defecto); la pestaña de visualización de gráficos estáticos (Plots); pestaña de instalación y actualización de paquetes (Packages); la pestaña de ayuda (Help); y el visualizador (Viewer) de gráficos animados, gráficos 3D, objetos HTML. las conexiones (Connections) que se pueden realizar con bases de datos (Oracle, SQL, Salesforce, Spark, Hipe, entre otros); tutoriales (tutorial) precargados usando shiny para el uso básico de R y RStudio. Figura 1.17: Barra de opciones rápidas. Figura 1.18: Barra de menús. De las pestañas más importantes: File nos permite crear o cargar archivos; Session, definir espacio de trabajo actual; y Tools, ingresar a las configuraciones de RStudio. Usos más avanzados, como la depuración de código o el uso de versiones de control (Git), también se manejan desde las opciones de esta barra. "],["librerías-y-repositorios.html", "1.6 Librerías y Repositorios", " 1.6 Librerías y Repositorios Una de las mayores virtudes de R es la enorme comunidad de desarrollo que ha creado asombrosas funcionalidades para simplificarle el flujo de trabajo a otras personas. Estas funcionalidades en realidad son funciones (para mayor detalle sobre ellas, visita la sección 2.7 Funciones). La estructura que almacena funciones se conoce como librería o paquete. Para poder una función en RStudio, se debe instalar previamente el paquete que la contiene. Los paquetes están publicados en repositorios. Los principales son: CRAN (de Comprehensive R Archive Network en inglés), el repositorio oficial de R. Solo los paquetes aprobados y con soporte de fallos constante son publicados aquí. GitHub, el repositorio más grande no oficial en el que se pueden encontrar paquetes de R. Muchos repositorios en CRAN mantienen versiones beta en GitHub para su testeo. Bioconductor, el mayor repositorio de paquetes asociados a bioinformática y ciencias afines. Figura 1.19: Instalación manual de paquetes. Si se requiere instalar paquetes de CRAN (e.g., tidyverse) con código, se utilizará un código similar a este: install.packages(&quot;tidyverse&quot;) "],["actualización-de-librerías.html", "1.7 Actualización de librerías", " 1.7 Actualización de librerías Es importante mantener actualizada la paquetería. En los repositorios de cada paquete se suelen reportar fallos o inconsistencias que son resueltas y liberadas como una actualización. Se recomienda hacer esto al menos una vez por mes. Figura 1.20: Actualización manual de paquetes de CRAN. Los paquetes instalados desde repositorio no oficial, deberán ser actualizados reinstalándolos de manera forzada. Para forzar la instalación de un paquete ya instalado desde github, se usa el argumento force=TRUE: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;irwingss/rbrack&quot;, force=TRUE) Una vez instalados, los paquetes se almacenan en un estado no activo. Para usar sus funciones, se requiere activar el paquete que la contiene. Para activar un paquete utiliza la función library(): library(tidyverse) Desde el momento que se ejecuta el código anterior, tidyverse estará activo hasta que se cierre o reinicie el programa RStudio. Otra manera de usar una función es activar su uso puntualmente, sin activar toda la librería. En este respecto, el operador :: permite acceder a las funciones de un paquete para seleccionar una y activar su uso Para acceder puntualmente a la función bind_cols() de la librería dplyr, se usa: dplyr::bind_cols() "],["tipos-de-documentos-en-rstudio.html", "1.8 Tipos de documentos en RStudio", " 1.8 Tipos de documentos en RStudio Luego de conocer los paneles de RStudio, es necesario crear los espacios donde se escribirán las órdenes a modo de código. Estos documentos, como cualquier editor de texto, se pueden guardar o compartir, por ejemplo, mediante un correo electrónico. 1.8.1 R Script (.R) Es el documento más simple donde puedo escribir R. Es un editor de texto como el bloc de notas de cualquier sistema operativo. No obstante, este editor lee y colorea la sintaxis especial del código de R. Esto permite identificar cada parte del código según lo que sea: una variable, una función, un número, un texto, símbolos especiales, operadores, entre otros; simplificando enormemente la lectura del código y el aprendizaje de R. Puedes crear un R script utilizando clics (ver Figura 1.21), o con atajo de teclado: Control + shift + N (Windows) o Command + shift + N (MacOS). Figura 1.21: Procedimiento para abrir un documento de RScript usando el menú File/ New File/ R script. Figura 1.22: Apariencia de un R script con código. Notar los colores diferenciales para cada parte del código. 1.8.2 R Markdown (.Rmd) Es un formato de archivo para la creación de documentos dinámicos. Estos pueden ser: páginas web, aplicaciones shiny, diapositivas, o cualquier tipo de reporte que puede ser exportado en formato .docx, .pdf o .html. Utiliza la sintaxis de Markdown pero posibilitando la inclusión de pedacitos de código, la traducción literal de code chunk. Los chunk se comportan como pequeños R scripts embebidos en el documento de texto plano escrito con sintaxis Markdown. Suena extremadamente complejo el decir sintaxis Markdown, pero no lo es. Una vez uno sabe utilizar R, aprender Markdown resulta sencillo. Puedes aprender a utilizar R Markdown con el libro en línea R Markdown: The Definitive Guide en su versión de 2018, o el más actualizado R Markdown Cookbook de 2020. Ambos libros han sido escritos en colaboración de Yihui Xie, uno de las mentes brillantes de RStudio y a quien le debemos el uso de documentos dinámicos en RStudio. No se profundizará en el uso de R Markdown, dado que no es el objetivo del programa, pero se utilizará frecuentemente durante las clases. Si eres un estudiante que no ha está llevando el programa, podrás siempre utilizar tanto R script como R Markdown para ejecutar tus códigos. Se recomienda fuertemente comenzar a utilizar este último dada la ventaja de permitir hacer anotaciones de texto plano como en cualquier editor de texto común. Figura 1.23: Procedimiento para abrir un documento de R Markdown usando el menú File/ New File/ R Markdown.... Figura 1.24: Ventana emergente para darle nombre al documento R Markdown. Figura 1.25: Aparecerá un archivo R Markdown con texto de ejemplo para que tengamos una idea de qué se puede hacer con él. Figura 1.26: knit es una función del paquete knitr, desarrollado por Yihui Xie y colaboradores, para la generación de reportes dinámicos con R Markdown. Haciendo clic en el botón se despliega la lista de posibles exportaciones del documento. La exportación Knit to HTML produce una página web de reporte. Figura 1.27: Tras hacer clic en Knit to HTML, será necesario guardar en el almacenamiento de la computadora el documento, cuya extensión es .Rmd. Figura 1.28: En la consola, o en una pestaña Render, comenzará a mostrarse la ejecución del código que knit desplegó para exportar el R Markdown a página web HTML. Figura 1.29: Vista del archivo HTML generado a partir del R Markdown de ejemplo. "],["proyectos-de-rstudio.html", "1.9 Proyectos de RStudio", " 1.9 Proyectos de RStudio Este es el santo grial del uso de RStudio para crear una diversidad de repositorios: de trabajo, colaboraciones, diapositivas, páginas web, blogs, libros, entre otros. Para poder usar un proyecto de RStudio con dichos propósitos, se necesita aprender a usar las versiones de control de proyectos con Git y Shell. Puedes iniciar en este tema con una genial presentación de su uso, elaborado por University of Zurich. Este apartado solo se centrará en el uso de proyectos para trabajos locales. Una vez se domine este uso, será más sencillo entender cómo elaborar otras cosas más complejas. Aquí se muestran los pasos para crear un proyecto local: Figura 1.30: Para crear un proyecto local, ir a menu File/ New Project.... Figura 1.31: Para efectos de este libro, selecciona la primera opción. Clic en New Directory para crear en el almacenamiento de tu computador una carpeta nueva donde se almacenará todo los respecto a este proyecto. Existing Directory solo se usará cuando ya se ha creado de antemano una carpeta donde se quiere almacenar el proyecto. Para versiones de control con Git y GitHub, el proceso se inicia con Version Control, para crear la carpeta de trabajo (tal como las anteriores opciones), pero el proyecto estará casi listo para hacer commit y publicar los cambios en GitHub. Figura 1.32: En Directory name: escribe el nombre del proyecto, mismo que también tendrá la nueva carpeta de trabajo que se creará en tu computador. En el botón Browse..., podrás ubicar una carpeta madre donde irás creando proyectos para mantenerlos todos ordenados y accesibles. Puede ser una subcarpeta dentro de documentos, con algún nombre genérico como proyectos, proyectos de R, entre otros. Finalmente, clic en Create Project. Figura 1.33: Se abrirá una nueva sesión con título idéntico a la carpeta de proyecto creada (aquí Investigación A). Nótese el ambiente (environment) en blanco. Todas las variables y funciones que se creen o carguen en el proyecto permanecerán en este ambiente específico del proyecto. Figura 1.34: En la pestaña de Files se verá el contenido de todo lo que copiemos dentro de la carpeta del proyecto. Puedes acceder a la carpeta de trabajo haciendo clic en More/ Show Folder in New Windows. Allí podrás pegar archivos o documentos que necesites cargar posteriormente en tu proyecto. Figura 1.35: Para crear un nuevo proyecto, abrir uno existente o cerrar el proyecto actual (flecha roja), existe el menú de acceso rápido que tiene el mismo nombre que tu proyecto actual. Para ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd(). Figura 1.36: En tu computador, encontrarás creada la carpeta del proyecto, en la dirección que especificaste, donde podrás pegar los archivos que aparecerán en la pestaña de Files del Panel de Ambiente del proyecto. Para ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd(). Si necesitas cambiar manualmente tu proyecto a otro directorio (carpeta) de trabajo, ejecuta la función setwd() definiendo dentro de ella y entre comillas la nueva dirección deseada. Por ejemplo: setwd(\"C:/Users/irwin/Documents/Otra_Carpeta/Subcarpeta B\") No olvides las comillas al inicio y final de la dirección, ni que los slash usados son forwardslash (hacia delante) /, no backslash (hacia atrás) \\. "],["pedir-ayuda.html", "1.10 Pedir ayuda", " 1.10 Pedir ayuda Pedir ayuda sin internet es algo posible en RStudio. Todas las librerías instaladas contienen información de respaldo sobre el uso de cada función que almacenan. Para acceder a ella, se debe acceder a la pestaña Help. Figura 1.37: Accediendo a la pestaña Help para buscar ayuda sobre la función mean(). Nótese que solo se busca el nombre de la función sin paréntesis. Figura 1.38: Detalle de la ayuda de la función mean(). Es muy útil revisar la sección Arguments donde se describen los argumentos, además los ejemplos de uso. Es posible pedir ayuda con código. Ejecutando la función help() conteniendo el nombre de la función que se desea buscar, abrirá automáticamente la página de ayuda en la pestaña Help. Por ejemplo:help(varimax). Otra forma de obtener el mismo resultado es usando el símbolo ?. Por ejemplo: ?varimax. Si se necesita buscar un término, no una función, se usaría el simbolo doble ?? antes del término a buscar. Esta búsqueda es más lenta porque es más profunda y nos da todas las funciones donde se use dicho término. Por ejemplo, para buscar en todos archivos de ayuda de R el término deviance: ??deviance. Para pedir ayuda en internet, se recomienda el uso del buscador exclusivo de temas en R conocido como rseek. Figura 1.39: Búsqueda de ayuda para la función mean() en rseek. Puedes acceder directamente a la viñeta (PDF o web) del uso de la función (que es la misma información que en la búsqueda en RStudio), documentación, funciones asociadas, paquetes populares que usen mean, wikipedia, blogs como R-Bloggers donde expliquen su uso, Issues que son problemas reportados para la función, o paquetes que contengan una función con el mismo nombre. "],["rbasico.html", "Capítulo 2 Primer contacto con R", " Capítulo 2 Primer contacto con R Este capítulo se centra en el manejo y comprensión del lenguaje de programación R (en adelante: R) en nivel introductorio. Se asume que el lector tiene instalados y configurados los programas R, RStudio y algún otro programa de soporte para el manejo de paquetes. Si no cuentas con ninguno en tu computadora, visita el capítulo 1 Esenciales de R y RStudio. Una ventaja de los lenguajes de programación es que permiten al usuario definir una secuencia de órdenes (comandos) adaptadas a los requerimientos analíticos que tenga. El flujo de trabajo completo, el paso a paso, queda escrito en el código. Este puede ser compartido con colegas en trabajos colaborativos. Antes de aprender sobre los métodos estadísticos de análisis que se revisarán en este libro, se necesita hablar correctamente el lenguaje R. Aprenderás a trabajar con el código básico en R, a crear variables para almacenar información, a crear funciones para agilizar el flujo de trabajo, a utilizar tidyverse para el manejo y limpieza de bases de datos, entre otros códigos útiles para inicar con R. La forma simplificada de cómo funciona R se resume en escribir una orden, presionar algo para que la computadora comience a procesar la orden, y luego recibir un resultado textual o gráfico. Básicamente lo que hace cualquier otro lenguaje de programación. No obstante, R es considerada una de los mejores lenguajes informáticos si nuestra orientación es más la investigación científica que el desarrollo informático. Otros lenguajes informáticos populares entre científicos son Python, MATLAB, C, C++, JavaScript, SQL, Scala, Julia, SAS, pero ninguno esta tan orientado al desarrollo estadístico como R. Figura 2.1: Ejemplo de uso de RStudio en el análisis estadístico. R es considerada como una calculadora con esteroides dado que puedes aplicar matemáticas con él; aquella ciencia sobre la que se cimentan casi todas las demás. Si puedes hacer ello, tienes las puertas abiertas a aplicar análisis estadísticos, generar gráficos y todo lo que te imagines. Y pues sí, también hay cosas algo bizarras en R, como poder crear tu propio calendario o usar gatitos en un gráfico de dispersión de puntos. A diferencia de los lenguajes humanos (idiomas), un lenguaje de programación debe estar escrito a la perfección. No hay espacio para una coma mal puesta, un paréntesis olvidado, o un nombre errado. La computadora solo ejecutará la orden si todo está escrito exactamente, tal y como debe ser. Todos los ejemplos de este libro pueden ser ejecutados correctamente si se escriben como es mostrado, y si instalaste todo lo necesario para trabajar (revisa las secciones Prerrequisitos y 1 Esenciales de R y RStudio. "],["ejecutar-código.html", "2.1 Ejecutar código", " 2.1 Ejecutar código ¿Alguna vez hiciste un histograma de frecuencias?. Hacer uno de manera exploratoria es muy sencillo en R. El siguiente código hará dos cosas en un solo paso: Creará un conjunto de 10,000 datos aleatorios que siguen en la distribución normal. Generará el gráfico del histograma de frecuencias utilizando el conjunto previamente creado. Por ahora no se ahondará en el detalle de qué cosa es rnorm() o hist(). hist(rnorm(10000)) Para replicarlo, es necesario escribir el código exacto, para luego dar la orden, es decir, ejecutar el código. La ejecución se hace presionando en el teclado de tu computador control + enter o command + enter (usuarios macOS). Existen otros atajos de teclado para ejecuciones especiales. Ejecutar todas las líneas de código del script: control (o command) + shift + enter. Ejecutar desde el inicio del script hasta la línea actual: control (o command) + Alt + B. Ejecutar desde la línea actual hasta el final del script: control (o command) + Alt + E. No obstante, no son necesarias. Es suficiente con conocer la ejecución básica, dado que para ejecutar varias líneas de código a la vez solo se deben seleccionar las requeridas y ejecutar con control + enter o command + enter. Una pregunta que siempre genera confusión es la presencia de unos corchetes [1] en los resultados vistos tanto en consola como en este libro. Esto no es parte de un resultado por si mismo, es la posición del elemento mostrado justo a la derecha del corchete. Si se ejecuta el símbolo : entre dos números, R generará el rango de valores enteros entre dichos números, incluyéndolos. 1:100 # [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # [20] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # [39] 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 # [58] 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 # [77] 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 # [96] 96 97 98 99 100 El resultado muestra los confusos [] a la izquierda del primer elemento de cada fila del conjunto de datos resultante, indicando su posición dentro de la secuencia de elementos. "],["r-como-calculadora.html", "2.2 R como calculadora", " 2.2 R como calculadora Como ya se había mencionado antes, R nos permite operar con código. La cosa más sencilla para hacer en R es sumar. 10 + 10 # [1] 20 En adelante se visualizará tanto el código a ejecutar (primera línea del ejemplo de suma aquí propuesto) como su resultado textual, mismo que obtendrás en la consola de RStudio (segunda línea del ejemplo) si sigues los pasos de cada ejemplo o ejercicio. Tabla 2.1: Operaciones (símbolos) aritméticas en R Operador Operación Ejemplo Resultado + Suma 10 + 3 13.000 - Resta 10 - 3 7.000 * Multiplicación 10 * 3 30.000 / División 10 / 3 3.333 ^ Potencia 10 ^ 3 1000.000 %/% División entera (parte entera) 10 %% 3 3.000 %% Residuo de dividir un número entre otro 10 %/% 3 1.000 2.2.1 Funciones matemáticas Operaciones más complejas necesitan el uso de funciones. Estas son secuencias de ordenes empaquetadas con un nombre pequeño y recordable  la información sobre las funciones será desarrollada más adelante (2.6 Funciones y 6.2 Creación de Funciones). En la siguiente tabla se presentan las funciones matemáticas más comunes en R: Tabla 2.2: Operaciones matemáticas en R. Estos procedimientos matemáticos vienen predefinidos como ordenes denominadas Funciones. Operador Operación Ejemplo Resultado exp(n) Eleva e a la n exp(3) 20.086 sqrt(n) Raíz cuadrada de n sqrt(3) 1.732 log(n) Logaritmo natural de n log(3) 1.099 log(n, b) Logaritmo de n en base b log(3, 10) 0.477 log10(n) Logaritmo de n en base 10 log10(3) 0.477 log1p(n) Logaritmo natural de n +1 log1p(2) 1.099 log2(n) Logaritmo en base 2 log2(10) 3.322 pi Número pi pi 3.142 abs(n) Convierte n en absoluto abs(-10.2) 10.200 "],["operadores-lógicos-y-relacionales.html", "2.3 Operadores lógicos y relacionales", " 2.3 Operadores lógicos y relacionales Además de poder operar matemáticamente dos objetos, los lenguajes de programación como R usan condiciones lógicas para definir estados de verdadero (TRUE) o falso (FALSE). Existen dos tipos de operadores en R para de definir un estado lógico: Los operadores relacionales permiten comparar dos objetos y definir si la condición solicitada es verdadera o falsa. Por ejemplo: al preguntar a R si 10 es mayor que 9, definirá la condición lógica como verdadera. Este tipo de comparaciones pueden ser mayor, menor, mayor igual, menor igual, igual, no es igual o negación de un valor. Los operadores lógicos permiten definir una condición lógica en base a los resultados de dos comparativas relacionales. Por ejemplo, si se desea filtrar las filas de una tabla para que se cumpla la condición 1: valores mayores a 10 en la columna A y la condición 2: valores menores que 5 en la columna B, es preciso que ambas condiciones se cumplan para que una fila se muestre en el resultado final, gracias al operador y. Si la condición usa el operador o, tanto se cumpla una u otra condición, la fila se mostrará en el filtrado final. En la siguiente tabla se muestran los operadores lógicos (últimos dos) y relacionales. Tabla 2.3: Operadores relacionales y lógicos en R, modos de uso y resultado lógico esperado (Verdadero o Falso). Operador Operación Ejemplo Resultado !a a no es verdadero (negación de a) !TRUE FALSE == a es igual b, donde b es un solo elemento 1 == 2 FALSE %in% a es igual b, donde b es un conjunto de elementos 1 %in% c(2,3,1) TRUE != a no es igual b A != A FALSE &gt; a es mayor que b 10 &gt; 9 TRUE &lt; a es menor que b 10 &lt; 9 FALSE &gt;= a es mayor igual que b 10 &gt;= 9 TRUE &lt;= a es menor igual que b 10 &lt;= 9 FALSE | o || Se cumple la Condición 1 o Condición 2. Si al menos una de las dos condiciones es verdadera, el resultado final es verdadero. 9 == 10 | 10 &gt; 9 TRUE &amp; o &amp;&amp; Se cumple la Condición 1 y la Condición 2. Si ambas condiciones son verdadera, el resultado final es verdadero, de otro modo, falso. 10 == 10 &amp; 10 &gt; 9 TRUE "],["comentar-el-código.html", "2.4 Comentar el código", " 2.4 Comentar el código Una forma de asegurar que en el futuro el código escrito sea entendible, incluso por nosotros mismos, es comentándolo. Dejar comentarios nos ayudará a recordar la intención con la que se escribió una sección determinada de los comandos. Para comentar en R, se requiere colocar el símbolo # a la izquierda del texto a ser considerado comentario. # Esta es una suma 2 + 2 # [1] 4 10 * 2 # + 3029 # [1] 20 Como queda en evidencia, no importa si el comentario está en solitario en una línea de código, o si está a la derecha de algo que sí se quiere ejecutar. Esto no afecta el resultado de la operación. "],["creación-de-variables.html", "2.5 Creación de variables", " 2.5 Creación de variables Las variables son espacios virtuales, que puede contener de elementos o estar vacíos. Imagina que en una tabla de datos es un objeto contenedor de mediciones de un trabajo de investigación. Dicha tabla puede ser considerada una variable u objeto en R. Más adelante se hablará sobre los tipos de variables que existen en R. Una forma sencilla de comenzar con variables es guardar un valor numérica en la memoria de trabajo de RStudio, también llamado ambiente (pestaña Environment). En este sentido, se necesita asignar el contenido a un nombre para que RStudio lo recuerde, haciendo uso de un operador de asignación &lt;-. Para crear una variable llamada NUM conteniendo el número 2022. NUM &lt;- 2022 Si se desea ver el contenido de una variable previamente guardada en el ambiente, basta con ejecutar el nombre d ela variable: NUM # [1] 2022 o usar la función print() para imprimirla en la consola: print(NUM) # [1] 2022 Una versión frecuentemente usada en ejemplos de R, involucra colocar a la asignación entre paréntesis para que hacer dos cosas a la vez: guardar la variable en el ambiente y mostrar su contenido en la consola. (NUM &lt;- 2022) # [1] 2022 Existe la posibilidad de asignar con un operador de asignación inverso -&gt;. Toma en cuenta qué debe ir en la cola (contenido) y en la cabeza (nombre) del operador. En otras palabras, la flecha que se forma con este operador siempre apunta al futuro nombre de la variable. Recuerda, la variable no existe hasta que no se ejecute y aparezca dicho nombre en el ambiente de RStudio. # Operador de asignación inverso 2022 -&gt; NUM El símbolo = también funciona, pero, por convención, este no se debe usar para crear variables. Se usará dentro de las funciones para asignar contenido a los argumentos de las mismas (se explicará a continuación). # Mal uso del símbolo = NUM = 2022 # Buen uso del símbolo = : siempre dentro de una función. # Calcular el logaritmo en base 2 de 10 bs &lt;- 2 + 8 log(10, base = bs) # [1] 1 Ciertamente, en el ejemplo anterior no fue esencial guardar la variable bs en el ambiente para su uso posterior dentro de log(). Sabemos de antemano que la suma es 10. No obstante, este ejemplo nos da idea de como aplicar el guardar un resultado para usarlo luego en ejercicios más complejos. No es posible continuar hablando de variables sin antes hacer una introducción a las funciones en R. "],["funciones.html", "2.6 Funciones", " 2.6 Funciones Se puede idealizar una función como una secuencia de órdenes (líneas de código) que tienen como objetivo aplicarle un procedimiento (gráfico, estadístico, de modificación o transformación, entre otros) a un objeto de entrada (input) para generar un resultado (ouput). Dichas líneas de código están empaquetadas y almacenadas con un nombre. Reconocer una función en R es tarea sencilla, siempre será un nombre seguido de paréntesis. Por ejemplo, la función para calcular la desviación estándar de un conjunto de datos es sd(), que proviene del inglés standard deviation. Dentro de los paréntesis se deben colocar los argumentos de la función. El argumento más sencillo que algunas funciones necesitan es un conjunto de datos, y es justamente lo único que necesita sd(). # Para crear un conjunto de datos en R se usa la función c() x &lt;- c(7,9,3,4,5,3,7,8) # Usando sd() para hallar la desviación estándar de x sd(x) # [1] 2.315 Si se ejecuta únicamente el nombre de una función existente en RStudio, en la consola se mostrará el contenido de la misma, la secuencia de órdenes que le dan forma a la función. Ejecuta el sd para ver su contenido: sd # function (x, na.rm = FALSE) # sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), # na.rm = na.rm)) # &lt;bytecode: 0x0000000015ccee78&gt; # &lt;environment: namespace:stats&gt; La secuencia de órdenes dentro de sd es corta. Básicamente utiliza la función sqrt() para sacarle la raíz cuadrada a la función var(), esta última calcula la varianza de un conjunto de datos. La estructura del código es propiamente la fórmula matemática para el cálculo de la desviación estándar. Aunque, a decir verdades, el código luce más complejo, y es debido a que aquí la función var() contiene argumentos condicionales para pedir que evalúe si el objeto x es correcto para la función, o si se necesita un cambio antes de procesarx en sd(). Pierde cuidado si no se entiende mucho por ahora, no es necesario comprender las funciones a este nivel al iniciar con R. "],["funciones-básica-útiles.html", "2.7 Funciones básica útiles", " 2.7 Funciones básica útiles En gran medida, las primeras etapas del aprendizaje de R involucran entender, siendo prioritario comprender qué dice un código y cómo se interpreta, más allá de escribirlo de memoria. En este sentido, la mayoría de funciones están nombradas de tal manera que indican para qué se pueden usar. Un dominio básico del idioma inglés será de mucha utilidad, principalmente porque casi todas las funciones de R están nombradas en inglés. Para facilitar esta primera etapa de aprendizaje, aquí se muestra una lista de funciones básica útiles, tanto a nivel de programación como de análisis de datos, que serán clave para iniciar con R. Los ejemplos de uso de la tabla son aplicables, siempre y cuando se ejecute antes el siguiente código para activar la base de datos iris, y crear los vectores x, y, y letras. data(&quot;iris&quot;) set.seed(123) x &lt;- rnorm(30,2,1) y &lt;- rnorm(30,5,3)*x/2 letras &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;A&quot;) Tabla 2.4: Cincuenta funciones básicas útiles en R. Función Descripción Ejmplo.de.uso mean() Promedio de un conjunto de datos x. mean(x) median() Mediana de un conjunto de datos x. median(x) sd() Desviación estándar de un conjunto de datos x. sd(x) var() Varianza de un conjunto de datos x. var(x) quantile() Cálculo de cuantiles de un conjunto de datos x. quantile(x) range() Valor mínimo y máximo de un conjunto de datos x. range(x) sum() Suma de todos los elementos numéricos de un conjunto de datos x. sum(x) max() Valor máximo de un conjunto de datos x. max(x) min() Valor mínimo de un conjunto de datos x. min(x) seq() Calcula una secuencia de números al ofrecerle un inicio, un final y cada cuántos valores. seq(0, 10, 2) seq() Calcula una secuencia de números al ofrecerle un inicio, un final y cada la cantidad de valores que necesito de dicho rango. seq(0, 10, length=25) rep() Repite un vector una cantidad de veces definida. rep(\"Perú\", 15) paste0() Concatena dos elementos de texto sin espacio entre ellos paste0(\"Séptima\",\"Maravilla\") paste() Concatena dos elementos de texto con espacio entre ellos paste(\"Séptima\",\"Maravilla\") sort() Reordena un vector de mayor a menor, o alfabéticamente. sort(c(\"C\",\"Z\",\"A\")) rev() Muestra un vector en orden reverso. rev(c(\"C\",\"Z\",\"A\")) unique() Muestra los valores únicos de un vector x. unique(letras) scale() Estandariza (centrado y escalado) un conjunto de datos x. scale(x) lm() Calcula un modelo lineal, siguiendo una fórmula predefinida. lm(Petal.Length ~ Sepal.Length, data=iris) aov() Calcula un ANOVA, siguiendo una fórmula predefinida. aov(Petal.Length ~ Species, data=iris) summary() Ofrece un resumen estadístico de un objeto especial, un vector o una base de datos. summary(x) chisq.test() Prueba de Chi cuadrado de dos variables. chisq.test(x, y) t.test() Prueba de T de dos variables. t.test(x, y) cor.test() Correlación (pearson, kendall, spearman) de dos conjuntos de datos. cor.test(x, y, method=\"pearson\") plot() Realizá un gráfico de dispersión de puntos entre dos vectores numéricos. plot(x, y) pairs() Genera un gráfico de enfrentamientos pareados entre todas las columnas de una base de datos. pairs(DF) hist() Grafica un histograma de frecuencias de un vector x. hist(x) boxplot() Grafica un gráfico de cajas de un vector x. boxplot(x) plot(density()) Produce el gráfico de función de densidad de un vector x. plot(density(x)) rnorm() Genera una cantidad de números aleatorios que siguen la distribución Normal, con parámetros definidos. rnorm(100, mean=1, sd=0) set.seed() Especifíca que secuencia de números aleatorios usar. Permite replicabilidad de un evento aleatorio. set.seed(123) getwd() Muestra la dirección del directorio de trabajo actual. getwd() setwd() Define la nueva dirección del directorio de trabajo. setwd(\"C:/mi carpeta\") str() Muestra la estructura de una base de datos. str(iris) View() Visualiza una base de datos en una nueva pestaña. View(iris) names() Reporta los nombres de las columnas de una base de datos. names(iris) colnames() Reporta los nombres de las columnas de una base de datos. colnames(iris) rownames() Reporta los nombres de las filas de una base de datos. rownames(iris) length() Reporta el número de elementos de un vector, o la cantidad de columnas de una base de datos. length(x) o length(iris) nrow() Reporta la cantidad de filas de una base de datos. nrow(iris) ncol() Reporta la cantidad de columnas de una base de datos. ncol(iris) rm() Elimina una variable del ambiente de RStudio. rm(iris) rm(ls()) Elimina todas las variables del ambiente de RStudio. rm(ls()) dev.off() Cierra forzadamente la salida gráfica de RStudio. Ejecutar para cuando existe algún error en la generación de un gráfico. Además, permite terminar la exportación de un archivo gráfico. dev.off() install.packages() Permite instalar una librería en RStudio. install.packages(\"tidyverse\") library() Permite activar durante la sesión actual una librería previamente instalada. library(tidyverse) table() Muestra la frecuencia de los elementos únicos de un vector. table(letras) subset() Devuelve un subgrupo de filas en una base de datos, filtradas si cumplen con una condición lógica. subset(iris, Petal.Length &gt; 6.5) sample() Devuelve un muestreo aleatorio de tamaño definido de un conjunto de datos x. sample(x, 3) data() Permite cargar una base de datos de ejemplo preinstalada en RStudio dentro de algún paquete activo. data(\"iris\") "],["ejercicios-del-capítulo.html", "2.8 Ejercicios del capítulo", " 2.8 Ejercicios del capítulo Soluciona la ecuación \\(\\frac{24+12}{(2 * 3)^2}\\). Resuelve \\(\\mathrm{log_{10}}(|\\frac{\\mathrm{exp(10)}^2}{-10*9^{6}}|)\\). Las barras verticales implican aplicar valor absoluto antes de calcular el logaritmo en base 10. 1.La función sigmoidal \\(\\sigma(\\mathrm{z}) = \\frac{1}{1+e^{-\\mathrm{z}}}\\) es muy importante en estadística. Permite convertir el resultado de una regresión logística (Odds ratios) en probabilidades, facilitando la interpretación. Utiliza la fórmula \\(z = -1.69 + 1*0.56\\), emulando el resultado hipotético de una regresión logística, como insumo para calcular su probabilidad correspondiente utilizando la función sigmoidal. Como dato extra, el resultado de \\(\\sigma(\\mathrm{z})\\) por 100 para convertirlo a probabilidad porcentual. Este ejercicio avanzado es de carácter explicativo. Sigue el ejercicio en la sección del Solucionario: Cap. 2, pregunta 3 correspondiente. Para calcular la derivaba de una función matemática, primero se debe crear la estructura matemática utilizando la función expression(). Una vez guardada la expresión, se utiliza la función D() para derivar. Calcula la primera derivada de: \\(f(x)=-2x+2\\) \\(f(x)=-2x^2-5\\) \\(f(x)=\\frac{x^3+2}{3}\\) Calcula la primera derivada de una expresión con dos variables: \\(f(x)=x^2+y^2+2*x*y-3*x+4*y+4\\) Calcula la segunda derivada de: \\(f(x)=x^2+3*x\\) Crea un vector con llamado num1 conteniendo 1000 números aleatorios con distribución normal, con promedio 19 y desviación estándar 1.29 (revisa la TABLA 2.4). Asegúrate de ejecutar previamente la función set.seed(123) para que el ejercicio sea replicable. Calcula el promedio y la desviación estándar del objeto num1. ¿Son exactamente iguales a los valores definidos con los que creaste el conjunto de datos usando rnorm()? Calcula los cuartiles de dicho conjunto de datos. ¿Cuál es el valor del cuartil 50% (que es conocido como mediana) (revisa la TABLA 2.4)? Utilizando los operadores relacionales, convierte el vector numérico num1 a vector lógico, aplicando la pregunta lógica números mayores a 20.0. Guarda el resultado en el ambiente con el nombre VL20 (revisa la TABLA 2.3). Coloca el objeto VL20 dentro de la función mean(). La función mean calcula normalmente el promedio de un conjunto de datos numéricos. No obstante, cuando se le ofrece un vector lógico, contabiliza la cantidad de elementos TRUE y ofrece la proporción de verdaderos respecto al total de elemento del conjunto. ¿Cuál es la proporción de elementos FALSE del vector VL20? (revisa la TABLA 2.3). Utilizando los operadores lógicos y relacionales, convierte el vector numérico num1 a vector lógico, aplicando la pregunta lógica números menor igual a 19.5 y números mayor a 15.7 (revisa la TABLA 2.3). "],["estructurasdatos.html", "Capítulo 3 Estructuras de datos", " Capítulo 3 Estructuras de datos La sección básica de R, introdujo la terminología de variables y funciones en lo que respecta a la sintaxis del código en R. En este capítulo, revisaremos todo lo que se debe conocer para manejar estructuras de datos diversas. Estos son los insumos esenciales que ingresarán más adelante en las funciones para poder procesar datos, analizarlos o convertirlos en impresionantes gráficos estadísticos. La teoría sobre las variables es la base de todo lo que desarrollarás en R. Figura 3.1: Ejemplos de código para crear las diferentes estructuras de datos de amplio uso en R. "],["clasificación-de-variables.html", "3.1 Clasificación de variables", " 3.1 Clasificación de variables Toda variable cuenta con dos atributos: clase y estructura. Para entender cómo se almacenan los datos en R, se necesita conocerlas a detalle. Figura 3.2: Analogía del gato en la caja para entender a las variables. Aquí, el gato es el contenido; la caja, la estructura. Esta variable podría ser considerada de la clase contenedora de gatos y de estructura cúbica. De igual manera, en R reconoceremos variables contenedoras de números, de caracteres, de valores lógicos, mismos que podrán estar ordenados en estructuras de una, dos, tres o N dimensiones. 3.1.1 Clases atómicas Según su contenido, en R existen seis clases básicas (o atómicas) de variables: Clase lógica: identificado con el nombre logical Clase caracter o texto: identificado con el nombre character Clase número con decimales: conocidos como doubles, identificado con el nombre numeric Clase número entero: identificado con el nombre integer Clase número complejo: identificado con el nombre complex Clase crudo o en bits: identificado con el nombre raw De estos, los últimos tres no serán utilizando a lo largo de este libro. Quizá surja la pregunta de por qué no usar números enteros. En realidad una variable del tipo numeric ya incluye enteros y con decimales (es decir, todos los números reales). Para efectos de una gran cantidad de funciones estadísticas, en R no es relevante brindarle números enteros como integer, o diferenciarlos de numeric. 3.1.2 Estructuras de datos Según su estructura, las variables pueden tener una forma de almacenamiento con diferente dimensionalidad. La estructura más básica de R es el vector, con una sola dimensión. El vector se convierte en un factor si es que contiene información categorizada, y sigue teniendo una dimensión. Si vectores se colocan verticalmente, y se apilan lado a lado, se convierten en una estructura de dos dimensiones. Dependiendo de sus características estas pueden ser: matrices, data frames o tibbles. Se puede considerar a los arrays como arreglos multidimensionales de vectores. Finalmente, las listas son estructuras de datos básicas. No se consideran dimensionales dado que almacena a otras estructuras de datos secuencialmente. Una lista puede albergar vectores, factores, matrices, data frames, tibbles, arrays, incluso otras listas. Figura 3.3: Estructuras informáticas para almacenar de datos en el lenguaje R. "],["vectores.html", "3.2 Vectores", " 3.2 Vectores R es un lenguaje basado en vectores. La estructura de almacenamiento de datos más básica es el vector. Un vector contiene elementos, que pueden ser números, textos, valores lógicos, y de cualquier clase atómica. No obstante, solamente puede almacenar elementos de una única clase atómica a la vez. Solo números, solo texto, solo valores lógicos. 3.2.1 Crear un vector Para crear un vector, se utiliza la función c() donde especifíco los elementos directamente: # Vector numérico numeros &lt;- c(1,2,3,4,5,6) numeros # [1] 1 2 3 4 5 6 Un operador de gran utilidad es : que permite crear rangos de números enteros. 1:6 # [1] 1 2 3 4 5 6 Además de c(), existe la función vector() para crear vectores vacíos de una longitud y clase atómica determinado. # Vector lógico de longitud (length) 10 vLog &lt;- vector(&quot;logical&quot;, length=10) vLog # [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE # Vector de caracteres de longitud (length) 15 vCha &lt;- vector(&quot;character&quot;, length=15) vCha # [1] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; # Vector de números de longitud (length) 20 vNum &lt;- vector(&quot;numeric&quot;, length=20) vNum # [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 La razón para usar vector() es para crear un contenido vacío de una longitud determinada, el cual podremos ir llenando con los resultados de un loop. Nos adelantaremos un poco con el código un tanto más avanzado, pero verás el uso de esta función. vNum &lt;- vector(&quot;numeric&quot;, length=6) vNum # [1] 0 0 0 0 0 0 # Loop donde a una secuencia de números del 1 al 6 # se le multiplica a cada uno por 100 for (i in 1:6){ vNum[i] &lt;- i * 100 } # Vector ya rellenado por el loop vNum # [1] 100 200 300 400 500 600 3.2.2 Vectores de secuencias y repeticiones Existen formas especiales de crear vectores implica el uso de seq() para crear secuencias numéricas, o rep() para repetir de algún valor una determinada cantidad de veces. Para crear una secuencia del 10 al 100 cada 5 elementos, se usa el argument by = dentro de seq() seq(10, 100, by=5) # [1] 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 Para crear una secuencia del 36 números entre 10 y 100, se usa el argument length = dentro de seq() seq(10, 100, length=36) # [1] 10.00 12.57 15.14 17.71 20.29 22.86 25.43 28.00 30.57 33.14 35.71 # [12] 38.29 40.86 43.43 46.00 48.57 51.14 53.71 56.29 58.86 61.43 64.00 # [23] 66.57 69.14 71.71 74.29 76.86 79.43 82.00 84.57 87.14 89.71 92.29 # [34] 94.86 97.43 100.00 Las repeticiones implica definir dos argumentos: lo que se repetirá, y la cantidad de veces. Para repetir el carácter América 10 veces, se usa: rep(&quot;América&quot;, 10) # [1] &quot;América&quot; &quot;América&quot; &quot;América&quot; &quot;América&quot; &quot;América&quot; &quot;América&quot; &quot;América&quot; &quot;América&quot; # [9] &quot;América&quot; &quot;América&quot; 3.2.3 Funciones útiles para vectores Resulta útil conocer algunas de las funciones básicas en R para trabajar con vector. Tabla 3.1: Operaciones (símbolos) aritméticas en R Función Descripción Ejmplo.de.uso length() Reporta el número de elementos de un vector, o la cantidad de columnas de una base de datos. length(x) o length(iris) max() Valor máximo de un conjunto de datos x. max(x) mean() Promedio de un conjunto de datos x. mean(x) median() Mediana de un conjunto de datos x. median(x) min() Valor mínimo de un conjunto de datos x. min(x) range() Valor mínimo y máximo de un conjunto de datos x. range(x) sd() Desviación estándar de un conjunto de datos x. sd(x) sum() Suma de todos los elementos numéricos de un conjunto de datos x. sum(x) var() Varianza de un conjunto de datos x. var(x) prod() Multiplica de todos los elementos numéricos de un conjunto de datos x. prod(x) rep() Repite un vector una cantidad de veces definida. rep(\"Perú\", 15) seq() Calcula una secuencia de números al ofrecerle un inicio, un final y cada cuántos valores. seq(0, 10, 2) 3.2.4 Operaciones numéricas con vectores Las operaciones matemáticas que involucran vectores se aplican con lo que se denomina element-wise, que se traduce como elemento a elemento. vector2 &lt;- 10:20 vector2 + 5 # [1] 15 16 17 18 19 20 21 22 23 24 25 En la operación anterior, se le sumó 5 unidades a cada elemento de vector2. Si se operan dos vectores de igual longitud, los elementos del primer vector se van operando uno por uno contra el elemento correspondiente en la posición homóloga del segundo vector. vector3 &lt;- 0:10 vector2 * vector3 # [1] 0 11 24 39 56 75 96 119 144 171 200 Si se operan dos vectores de diferente longitud de elementos, el resultado tendrá la longitud del mayor, y el menor se irá operando elemento a elemento, y se recliclará desde su primer elemento para aplicarse hasta culminar de operar todo. vector4 &lt;- 1:3 # Revisar el contenido de los vectores vector2 # [1] 10 11 12 13 14 15 16 17 18 19 20 vector4 # [1] 1 2 3 # Producto de dos vectores de longitud desigual vector2 * vector4 # Warning in vector2 * vector4: longer object length is not a multiple of shorter # object length # [1] 10 22 36 13 28 45 16 34 54 19 40 3.2.5 Valores perdidos en vectores Estos elementos son los tipicos NA que aparecen cuando no hay un dato disponible en un conjunto de datos. Si operamos un vector con funciones estadísticas, como mean() o sd(), el resultado se verá afectado por la presencia del NA, y este impedirá que se genere el resultado correcto. Para evitarlo, es importante incorporar el argumento na.rm = TRUE para remover los NA de un conjunto de datos y operar sin ellos. vectorNA &lt;- c(10, 20, NA, 40, 50) # Operar directo (errado) mean(vectorNA) # [1] NA # Operar incluyendo el argumento para remover NAs mean(vectorNA, na.rm = TRUE) # [1] 30 3.2.6 Indexación de vectores Indexar significa ubicar posiciones. Cada elemento dentro del vector tiene una posición única. Se puede extraer el contenido de una posición única definida dentro de un vector utilizando el operador []. Utilicemos el objeto vectorNA creado en la sección anterior: vectorNA[1] # [1] 10 vectorNA[3] # [1] NA vectorNA[5] # [1] 50 Para extraer más de un elemento a la vez, en lugar de colocar una sola posición dentro de [], se coloca un vector con las posiciones. vectorNA[c(1,3)] # [1] 10 NA vectorNA[c(1,3,5)] # [1] 10 NA 50 Otro modo es crear un vector de índice, index, que contenga las posiciones de interés: index &lt;- c(1,3,5) vectorNA[index] # [1] 10 NA 50 Indexar con operaciones lógicas también es posible. El operador [] puede recibir vectores lógicos, para entregar como resultado aquellos elementos cuyas posiciones sean TRUE dentro del vector lógico. Si se define una operación lógica como ¿Qué elementos de un vector numérico x son valores mayores iguales a 25?, se debe escribir en R: x&gt;=25. # Veamos el resultado para entender la operación lógica # (nota que los elemento NA no se convierten a TRUE o FALSE) vectorNA&gt;=25 # [1] FALSE FALSE NA TRUE TRUE Conociendo esto, el resultado de la indexación sería: # En dos pasos index &lt;- vectorNA&gt;=25 vectorNA[index] # [1] NA 40 50 # En un paso vectorNA[vectorNA&gt;=25] # [1] NA 40 50 En caso se requiera conocer en qué posiciones se cumple la condición lógica anterior, usa la función which(): which(vectorNA&gt;=25) # [1] 4 5 Dado que which() solo reporta posiciones TRUE y obvia las posiciones con NA, usarlo en la indexación es la mejor manera de reportar los elementos sin incluir en el resultado los valores NA: vectorNA[which(vectorNA&gt;=25)] # [1] 40 50 3.2.7 Muestreo de vectores En ocasiones es requerido realizar muestreos virtuales, en la que se especifique cuántos elementos se requieren extraer de un vector. En R, la extracción se realiza con la función sample(), como: Muestreo con reemplazamiento: donde cada elemento extraído se devuelve al conjunto inicial. Este elemento ya muestreado permanecer disponible para aparecer en siguiente muestreo aleatorio. Se especifica con el argumento replace = TRUE. Muestreo sin reemplazamiento: donde cada elemento extraído no vuelve a aparecer en el conjunto inicial. Este elemento ya muestreado no estará disponible para aparecer en siguiente muestreo aleatorio. Se especifica con el argumento replace = FALSE. Si el muestreo es sin reemplazamiento, solo se puede extraer un máximo de elementos igual a la cantidad de elementos del conjunto inicial. Antes de cualquier función de aleatorización, es importante establecer un conjunto de números aleatorios para que el código sea replicable. Asegurar replicabilidad de los experimentos y análisis es importante para las publicaciones científicas. Utiliza la función set.seed(123) definiendo un número cualquiera, como aquí se colocó 123. # Muestreo con reemplazamiento # de un conjunto de 2 elementos conjuntoInicial &lt;- c(&quot;A&quot;,&quot;Z&quot;) set.seed(123) sample(conjuntoInicial, 25, replace = TRUE) # [1] &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;Z&quot; &quot;A&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;A&quot; &quot;A&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;A&quot; &quot;Z&quot; &quot;A&quot; &quot;Z&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; # [21] &quot;A&quot; &quot;Z&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; # Muestreo sin reemplazamiento # de un conjunto con 30 elementos conjuntoInicial2 &lt;- rep(c(&quot;A&quot;,&quot;Z&quot;), c(10,20)) set.seed(321) sample(conjuntoInicial2, 25, replace = FALSE) # [1] &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;A&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;A&quot; &quot;A&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;A&quot; &quot;Z&quot; # [21] &quot;Z&quot; &quot;A&quot; &quot;Z&quot; &quot;A&quot; &quot;A&quot; "],["factores.html", "3.3 Factores", " 3.3 Factores Los factores son tipos especiales de vectores, donde R evalúa los valores únicos de la secuencia y los define como categorías. Son muy útiles en programación dado que permiten graficar, por ejemplo, con un color diferenciado cada nivel de una variable categorica. Imagina que se requiere hacer un gráfico de dispersión de puntos para ver la relación entre dos variables, pero permitiendo que el color de los puntos refleje el grupo al que pertenece cada observación: Figura 3.4: Ejemplo de uso de la variable Grupos (factor) empleada para colorear los puntos del gráfico de enfrentamiento de Pétalo y Sépalo. 3.3.1 Crear un factor Para crear un factor se utiliza la función factor(), y un vector dentro de ella. La función evaluará los valores únicos del vector y definirá los niveles del factor: # Crear un vector de texto cualquiera vectorC &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;C&quot;,&quot;C&quot;,&quot;B&quot;) # Crear un vector de texto cualquiera vectorN &lt;- c(1,1,2,1,2,2,1,1,2,1,2,1,2,2,2,1) # Crear factores en base a los vectores factor(vectorC) # [1] A B A A A A B A C C B # Levels: A B C factor(vectorN) # [1] 1 1 2 1 2 2 1 1 2 1 2 1 2 2 2 1 # Levels: 1 2 3.3.2 Niveles de un factor Cada factor muestra sus niveles (Levels) al final de la secuencia. Se puede conocer cuales son los niveles de un factor guardado en el ambiente, utilizando la función levels(): # Guardar el factor F1 &lt;- factor(vectorC) # Revisar los niveles del factor levels(F1) # [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; 3.3.3 Reordenar los niveles El orden de los niveles es importante. Por defecto se ordenan los niveles de menor a mayor (si son números), o de la A a la Z (sin son texto). Para una regresión, para un gráfico, el orden afecta los resultados. En una regresión lineal, el primer nivel de un factor puede ser considerado como nivel base, y las interpretaciones se harán como factores de aumento o disminución de los otros niveles respecto al nivel base. En un gráfico, el orden de los colores, o las etiquetas de un eje, seguirán este orden. Para cambiar el orden, las alternativas son variadas. Si solo se desea definir un nivel base, y el orden de los demás niveles no es importante, se usa relevel() con el segundo argumento especificando el nivel que será el nuevo nivel base. # Especificando el primer nivel como &quot;C&quot; F1_cambiado &lt;- relevel(F1, &quot;C&quot;) F1_cambiado # [1] A B A A A A B A C C B # Levels: C A B Si se necesita especificar un orden definido manualmente para todos los niveles, es mejor definirlo al momento de crear el factor, usando el argumento levels=: # Crear un factor con niveles ordenados manualmente F2 &lt;- factor(vectorC, levels=c(&quot;B&quot;,&quot;C&quot;,&quot;A&quot;)) # Revisar los niveles de F2 levels(F2) # [1] &quot;B&quot; &quot;C&quot; &quot;A&quot; 3.3.4 Etiquetas de un factor En algunas ocasionas existe la necesidad de cambiar el nombre de algún (o algunos) nivel(es), se puede usar un vector con los cambios deseados como contenido del argumento labels=. El orden de las etiquetas cambiadas debe seguir el mismo orden original de los niveles: # Crear un factor con cambie de etiqueta F3 &lt;- factor(F1, labels=c(&quot;Absoluto&quot;, &quot;B&quot;, &quot;Cambio&quot;)) # Revisar los niveles de F3 levels(F3) # [1] &quot;Absoluto&quot; &quot;B&quot; &quot;Cambio&quot; # Revisando el contenido original (sin cambios) en F1 F1 # [1] A B A A A A B A C C B # Levels: A B C # Revisar el contenido de F3 F3 # [1] Absoluto B Absoluto Absoluto Absoluto Absoluto B Absoluto # [9] Cambio Cambio B # Levels: Absoluto B Cambio Como fue evidente, al crear un factor se puede usar como insumo un vector, como vectorN, u otro factor previamente creado, como F1. 3.3.5 Valores perdidos en un factor Los valores perdidos no forman parte de los niveles de un factor. Se muestran como contenido del conjunto de datos, pero no son considerados niveles. conjunto1 &lt;- c(1,2,1,1,NA,2,1,NA,3,2,1,3,2,3,3,NA) fctConjunto1 &lt;- factor(conjunto1) fctConjunto1 # [1] 1 2 1 1 &lt;NA&gt; 2 1 &lt;NA&gt; 3 2 1 3 2 3 3 &lt;NA&gt; # Levels: 1 2 3 Por el contrario, si el investigador coloca deliberadamente los NA como texto, estos sí serán considerados como nivel: conjunto2 &lt;- c(1,2,1,1,&quot;NA&quot;,2,1,&quot;NA&quot;,3,2,1,3,2,3,3,&quot;NA&quot;) fctConjunto2 &lt;- factor(conjunto2) fctConjunto2 # [1] 1 2 1 1 NA 2 1 NA 3 2 1 3 2 3 3 NA # Levels: 1 2 3 NA 3.3.6 Indexación de factores Indexar significa ubicar posiciones. Tal cual con un vector, en los factores cada elemento dentro del vector tiene una posición única. Para extraer el contenido de una posición única definida se utiliza igualmente el operador []. Utilicemos el objeto conjunto1 creado en la sección anterior: fctConjunto2[3] # [1] 1 # Levels: 1 2 3 NA fctConjunto2[5] # [1] NA # Levels: 1 2 3 NA El resto de reglas para indexar varios elementos a la vez, o indexar con vectores lógicos, son las mismas que para un vector: # Indexar varios elementos a la vez fctConjunto2[c(3,5,10)] # [1] 1 NA 2 # Levels: 1 2 3 NA Indexar con operaciones relacionales puede ser engorroso. Debido a que los niveles del factor ya no son considerados números per se, sino que son categorías textuales, utiliza operaciones como mayor qué, menor qué y otras similares, produce resultados vacíos NA. Es imposible para R saber que Categoría 1 es menor igual que Categoría 2. No obstante, se pueden aún utiliza operaciones relacionales de igualdad: # Con operación relacional de menor qué # obtendremos un resultado erróneo index &lt;- fctConjunto2 &lt; 3 # Warning in Ops.factor(fctConjunto2, 3): &#39;&lt;&#39; not meaningful for factors fctConjunto2[index] # [1] &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; # Levels: 1 2 3 NA # Con operación relacional de igualdad index &lt;- fctConjunto2 == 3 fctConjunto2[index] # [1] 3 3 3 3 # Levels: 1 2 3 NA # Utilizando el operador %in% podemos pedir # varias igualdades a la vez index &lt;- fctConjunto2 %in% c(1,2) fctConjunto2[index] # [1] 1 2 1 1 2 1 2 1 2 # Levels: 1 2 3 NA Si se lidia con factores conteniendo NA (no su versión en texto NA), el indexar sin which() genera que se muestren los NA cuando no son requeridos. Utilicemos el objeto fctConjunto1: index &lt;- fctConjunto1 == 3 fctConjunto1[index] # [1] &lt;NA&gt; &lt;NA&gt; 3 3 3 3 &lt;NA&gt; # Levels: 1 2 3 Esto no ocurre al usar which() dentro de los []: fctConjunto1[which(index)] # [1] 3 3 3 3 # Levels: 1 2 3 "],["matrices.html", "3.4 Matrices", " 3.4 Matrices Las matrices son la primera estructura de dos dimensiones aquí presentada. Son útiles cuando se desee aplicar álgebra de matrices. Pero en el día a día, son rudimentarias y limitantes. Sobre esto último, se comporta como un vector: permiten almacenar solamente un tipo de elemento en toda la tabla. Para crear una matriz, podemos tomar un vector e ir ordenando los elementos de manera vertical u horizontal en una tabla de \\(n*p\\) dimensiones (donde: \\(n\\) es la cantidad de filas y \\(p\\) de columnas), utilizando la función matrix(). # Crear un rango de valores cualquiera vector1&lt;-1:10 Al encajar el contenido del vector de longitud \\(n\\) en forma de matriz (dos dimensiones) sin especificar la cantidad de columnas o filas, crea una matriz de una sola columna con \\(n\\) filas. matrix(vector1) # [,1] # [1,] 1 # [2,] 2 # [3,] 3 # [4,] 4 # [5,] 5 # [6,] 6 # [7,] 7 # [8,] 8 # [9,] 9 # [10,] 10 Para definir la cantidad de columnas y filas se usan los argumentos ncol= y nrow=, respectivamente: matrix(vector1, ncol=2, nrow=5) # [,1] [,2] # [1,] 1 6 # [2,] 2 7 # [3,] 3 8 # [4,] 4 9 # [5,] 5 10 Por defecto las columnas se llenan columna por columna. Para cambiar el comportamiento de llenado a fila por fila, se usa: matrix(vector1, ncol=2, nrow=5, byrow=TRUE) # [,1] [,2] # [1,] 1 2 # [2,] 3 4 # [3,] 5 6 # [4,] 7 8 # [5,] 9 10 En este libro no se hace uso extenso de matrices, por lo que no es necesario conocerlas a mayor detalle. "],["data-frames.html", "3.5 Data Frames", " 3.5 Data Frames Esta estructura de datos de dos dimensiones es la más parecida a lo que una hoja de cálculo permite: colocar diferentes tipos de elementos dentro de la tabla, como texto, números, elementos lógicos, entre otros. Al cargar en RStudio una base de datos de un estudio, esta se almacenará como data frame casi siempre (cuando no, podrá ser un tibble o una lista). Para crear data frames manualmente en R, se utiliza la función data.frame(), especificando como elementos el contenido de cada columna. DF &lt;- data.frame(Col1 = 1:5, Col2 = c(&quot;Sit1&quot;,&quot;Sit1&quot;,&quot;Sit2&quot;,&quot;Sit2&quot;,&quot;Sit3&quot;), Log = c(T,T,F,F,T), Fct = factor(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;B&quot;,&quot;A&quot;))) DF # Col1 Col2 Log Fct # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A No obstante, el modo de trabajo habitual implica cargar archivos desde el computador hacia RStudio para guardar tablas de datos como objetos data frame en el ambiente. Para cargar archivos excel (.xlsx) o delimitados (.csv, .txt), o incluso archivos desde SPSS (.SAV), revisa la sección 4.2 Lectura de bases de datos. "],["tibbles.html", "3.6 Tibbles", " 3.6 Tibbles Los Tibbles son estructuras de datos en dos dimensiones que tienen todas las ventajas de almacenaje que los data frame. Pueden almacenar datos de cualquier clase (texto, números, lógicos, etc). Pero presentan dos ventajas adicionales: Pueden almacenar objetos complejos, como modelos o fórmulas en las celdas, como si se tratase de un elemento cualquiera. Al imprimir sus resultados en consola, brindan información extra sobre el tamaño de la tabla (filas por columnas), y el tipo de datos que almacena de cada columna (su clase). También, al ser vistos en consola, solo muestran las filas y columnas adecuadas para el pequeño tamaño de la consola, sin desbordarse como lo hacen los data frame. Esto último se verá reflejado cuando visualices en consola bases de datos grandes. TB &lt;- tibble(Col1 = 1:5, Col2 = c(&quot;Sit1&quot;,&quot;Sit1&quot;,&quot;Sit2&quot;,&quot;Sit2&quot;,&quot;Sit3&quot;), Log = c(T,T,F,F,T), Fct = factor(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;B&quot;,&quot;A&quot;))) TB # # A tibble: 5 x 4 # Col1 Col2 Log Fct # &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; &lt;fct&gt; # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A "],["listas.html", "3.7 Listas", " 3.7 Listas Las listas son estructuras de datos primitivas. En teoría, los data frame y tibbles son estructuras internamente basadas en listas. En ellos, sus elementos son únicamente vectores de elementos que se comportan como columnas de las tablas cuando imprimidos el objeto. Las listas propiamente dichas, las que creamos con la función list(), son estructuras amigables, almacenando prácticamente toda clase de objetos: vectores, factores, matrices, data frames, tibbles, incluso otras listas. Como se mencionó arriba, la función list() permite crear listas no nombradas. Cada elemento adquiere como nombre un número correlativo: # Creación de una lista no nombradas. Utilizaremos # algunos objetos que hemos ido creando hasta aquí. primeraLista &lt;- list(TB, DF, vector1, F2) primeraLista # [[1]] # # A tibble: 5 x 4 # Col1 Col2 Log Fct # &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; &lt;fct&gt; # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A # # [[2]] # Col1 Col2 Log Fct # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A # # [[3]] # [1] 1 2 3 4 5 6 7 8 9 10 # # [[4]] # [1] A B A A A A B A C C B # Levels: B C A Para crear una lista nombrada, se puede colocar cada elemento precedido con un nombre y el símbolo igual. # Creación de una lista no nombradas. Utilizaremos # algunos objetos que hemos ido creando hasta aquí. L1 &lt;- list(TB = TB, DF = DF, vecThor = vector1, factor = F2) L1 # $TB # # A tibble: 5 x 4 # Col1 Col2 Log Fct # &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; &lt;fct&gt; # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A # # $DF # Col1 Col2 Log Fct # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A # # $vecThor # [1] 1 2 3 4 5 6 7 8 9 10 # # $factor # [1] A B A A A A B A C C B # Levels: B C A Resulta muy engorroso tener que colocar los nombres dado que las variables ya tienen uno, esto se puede solucionar si se usa la función lst() de la librería dplyr. L2 &lt;- dplyr::lst(TB, DF, vector1, F2) L2 # $TB # # A tibble: 5 x 4 # Col1 Col2 Log Fct # &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; &lt;fct&gt; # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A # # $DF # Col1 Col2 Log Fct # 1 1 Sit1 TRUE A # 2 2 Sit1 TRUE B # 3 3 Sit2 FALSE C # 4 4 Sit2 FALSE B # 5 5 Sit3 TRUE A # # $vector1 # [1] 1 2 3 4 5 6 7 8 9 10 # # $F2 # [1] A B A A A A B A C C B # Levels: B C A Es más que seguro que en el futuro encontrarás ventajoso tener listas nombradas para el manejo de estructuras de datos. "],["coerción-de-variables.html", "3.8 Coerción de variables", " 3.8 Coerción de variables Existe la posibilidad de cambiar la naturaleza digital, es decir, la clase y/o estructura, de un objeto en R. Coercer implica permitir que un objeto transforme su clase o estructura a otra diferente a la inicial, permitiendo flexibilizar el manejo de datos de una manera increíblemente sencilla. Para coercer basta con usar las variables del grupo as.---(). Los tres guiones equivalen a un texto variable que le da la característica a cada función de dicho grupo. A continuación se muestran algunas de las funciones de coerción más importantes: Tabla 3.2: Principales funciones de coerción de clase de variable. Función Descripción as.numeric() Cambia la naturaleza de un vector hacia clase numérica (decimales). as.integer() Cambia la naturaleza de un vector hacia clase numérica (enteros). as.character() Cambia la naturaleza de un vector hacia clase texto o carácter. as.logical() Cambia la naturaleza de un vector hacia clase lógica (TRUE o FALSE). Tabla 3.3: Principales funciones de coerción de estructura de variable. Función Descripción as.vector() Coerciona un factor a vector. as.factor() Coerciona un vector a factor. as.matrix() Coerciona una estructura 2D cualquiera hacia matriz. as.data.frame() Coerciona una estructura 2D cualquiera hacia data frame. as.list() Coerciona una estructura N dimensional hacia una lista. dplyr::as_tibble() Coerciona una estructura 2D hacia Tibble (del entorno de tidyverse). Más allá de las funciones convencionales, existen muchas más funciones de coerción que modificas conjuntos de datos particulares. Por ejemplo, para trabajar con fechas, objetos especiales de R como dendrogramas, fórmulas, entre otros. Tabla 3.4: Algunas funciones de coerción especiales. Función Descripción as.Date() Coerciona un texto o elemento numérico hacia fecha (formato calendario). as.POSIXct() Coerciona un texto o elemento numérico hacia fecha UTC (formato calendario). as.dengrogram() Coerciona un objeto de ordenamiento hcluster hacia dendrogram. as.hclust() Coerciona un objeto de ordenamiento dendrogram hacia hcluster. as.formula() Coerciona un texto hacia una fórmula estadística. Identico a formula(). as.roman() Coerciona números enteros hacia números romanos. image() Coerciona una matriz numérica hacia una imagen raster. Para casos incluso más especiales, como tópicos relacionados a sistemas de información geográfica, bioinformática, entre otros, encontrarás las funciones de coerción respectivas dentro de cada paquetes específico que utilices. "],["ejercicios-del-capítulo-1.html", "3.9 Ejercicios del capítulo", " 3.9 Ejercicios del capítulo Crea una variable llamada datosNumeros que contenga 200 números (decimales) entre el 20 y 80. Utilizando la función sample(), crea una variable llamada muestr4 que contenga el muestreo de 10 elementos (con repetición) del objeto datosNumeros. Utiliza set.seed(123) antes del muestro para asegurar la replicabilidad del mismo. Redondea todos los elementos del vector datosNumeros a dos decimales, coerciona el objeto a texto, y guarda el resultado en el ambiente con el nombre coer. Utiliza coer para coercer el objeto hacia número nuevamente. Crea el vector miPais que contenga únicamente el nombre de tu país de residencia. Coerce miPaishacia vector numérico. ¿Notas la advertencia? Crea una data frame llamada DF10, cuyo contenido sea: una columna numérica, otra de texto, y otra lógica, todas de 5 elementos. Coerce DF10 hacia matriz. ¿Notas algo particular en los elementos de la matriz? Crea una lista llamda list1 que contenga los objetos: muestr4, datosNumeros,DF10. Luego, indexa las posiciones: - Fila 2, columna 3 del objeto DF10. - Elemento 150 del objeto datosNumeros. - El elemento 5 del objeto muestr4. Realiza esto utilizando tanto una lista nombra como no nombrada. "],["carga-y-exportación-de-datos.html", "Capítulo 4 Carga y exportación de datos", " Capítulo 4 Carga y exportación de datos En este capítulo corto, se abordarán los tópicos de carga y exportación de bases de datos. Si bien no se abordará la carga de todos los tipos posibles de archivos en RStudio, se cubrirán las extensiones esenciales para todo iniciante en el manejo de datos. Extensiones especiales como, .shp para la diagramación de mapas, no serán desarrollados en este libro. Figura 4.1: Extensiones de archivos frecuentemente usados en R y RStudio. Más allá de lo mencionado aquí, existe una vasta cantidad de extensiones posibles de gestionar con RStudio. Dependiendo del campo de aplicación específico en el que te desarrolles, continuarás encontrando nuevas extensiones. En adelante se espera que los archivos a cargar estén colocados dentro de la carpete de proyecto activa. De no ser el caso, se pueden buscar manualmente los archivos con una ventana emergente de búsqueda activada por la función file.choose(). Por ejemplo, para leer un archivo .csv dentro de la carpeta de proyecto, se usa: misDatos &lt;- read.csv(&quot;archivo.csv&quot;) Con búsqueda manual, se recomienda emplear file.choose() en reemplazo del nombre del archivo: misDatos &lt;- read.csv(file.choose()) Figura 4.2: Vista previa de la venta emergente que se abre tras ejecutar el código mostrado anteriormente con file.choose(). Si no se muestra automáticamente, algunas veces se abre minimizada. Se recomienda buscar en los programas abiertos de la barra de tareas del sistema operativo en cuestión. Nunca olvidar la extensión respectiva dentro de las comillas y al final del nombre del archivo (como en el ejemplo archivo.csv mostrado aneriormente). Si se coloca la extensión correcta, el archivo exportado será ilegible. "],["lectura-de-bases-de-datos.html", "4.1 Lectura de bases de datos", " 4.1 Lectura de bases de datos 4.1.1 Archivos delimitados Modo de uso de la función read.csv() para la carga de archivos delimitados por comas, extensión .csv: ### Argumentos a utilizar read.csv(&quot;archivo.csv&quot;, # Nombre o ruta completa al archivo sep = &quot;,&quot;, # Separador de los valores dec = &quot;.&quot;, # Punto decimal header = TRUE, # Leer el encabezado (TRUE) o no (FALSE) fill = TRUE) # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE) Los argumentos por defecto de read.csv() permiten cargar un archivo con encabezados, rellenar las celdas vacías con NA (recomendado), con el separador de celdas coma , y el separador de decimales .. Si el documento de interés tiene estas características, bastará con colocar lo siguiente para cargarlo: read.csv(&quot;datos_investig.csv&quot;) Modo de uso de la función read.csv() para la carga de archivos delimitados por comas, extensión .csv: ### Argumentos a utilizar read.csv(&quot;archivo.csv&quot;, # Nombre o ruta completa al archivo sep = &quot;,&quot;, # Separador de los elementos dec = &quot;.&quot;, # Separador decimal header = TRUE, # Leer el encabezado (TRUE, por defecto) o no (FALSE) fill = TRUE) # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE) Por otro lado, existe read.csv2() que hace lo mismo que la anterior, pero para tablas que cuenten con el separador de celdas punto y coma ; y el separador de decimales ,. Todo dependerá de cómo esté configurado tu archivo original. read.csv2(&quot;datos_investig2.csv&quot;) Otros argumentos interesantes en ambas funciones son: ### Para definir qué valores sean considerados como NA (y no solo las celdas vacías) read.csv2(&quot;datos_investig3.csv&quot;, na.strings = c(&quot;Na&quot;, &quot;NA&quot;, &quot;-9999&quot;)) ### Para coercer las columnas de texto a factor al leer el documento read.csv2(&quot;datos_investig3.csv&quot;, stringsAsFactos = TRUE) ### Para no cargar ciertas filas del documento (por ejemplo la fila 10) read.csv2(&quot;datos_investig3.csv&quot;, skip = 10) 4.1.2 Archivos tabulados Modo de uso de la función read.table() para la carga de archivos delimitados por tabulaciones, extensión .txt: ### Argumentos a utilizar read.table(&quot;archivo.txt&quot;, # Nombre o ruta completa al archivo sep = &quot;&quot;, # Separador de los elementos dec = &quot;.&quot;, # Separador decimal header = FALSE) # Leer el encabezado (TRUE) o no (FALSE, por defecto) Otros argumentos interesantes son idénticos a los encontrados en las funciones mostradas anteriormente: ### Para definir qué valores sean considerados como NA (y no solo las celdas vacías) read.table(&quot;datos_investig3.txt&quot;, na.strings = c(&quot;Na&quot;, &quot;NA&quot;, &quot;-9999&quot;)) ### Para coercer las columnas de texto a factor al leer el documento read.table(&quot;datos_investig3.txt&quot;, stringsAsFactos = TRUE) ### Para no cargar ciertas filas del documento (por ejemplo la fila 10) read.table(&quot;datos_investig3.txt&quot;, skip = 10) 4.1.3 Archivos delimitados con otros caracteres Una función versátil es read.delim() y su compañera read.delim2(). Ambas permiten cargar archivos delimitados por cualquier carácter. Realizan carga de archivos tal y como lo hacen read.csv(), read.csv2() o read.table(). read.delim(&quot;archivo.txt&quot;, # Nombre o ruta completa al archivo (puede ser .csv también) sep = &quot;\\t&quot;, # Separador de columnas dec = &quot;.&quot;, # Separador decimal header = TRUE, # Leer el encabezado (TRUE, por defecto) o no (FALSE) fill = TRUE) # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE) read.delim2(&quot;archivo.txt&quot;, # Nombre o ruta completa al archivo (puede ser .csv también) sep = &quot;\\t&quot;, # Separador de columnas dec = &quot;,&quot;, # Separador decimal header = TRUE, # Leer el encabezado (TRUE, por defecto) o no (FALSE) fill = TRUE) # Rellenar celdas vacías: sí (TRUE, por defecto) o no (FALSE) Cuando se define el sep = \"\\t\" leen archivos tabulados; sep = \" \", separados por espacios; sep = \",\", separados por comas; o sep = \";\", separados por punto y coma. Se podrá colocar el separador respectivo en caso sea uno diferente a los mencionados. 4.1.4 Hojas de cálculo de Excel Existen varias librerías para cargar archivos de excel en R, con extensión .xlsx. Se recomienda el uso de la librería openxlsx, por su simplicidad de uso y porque no demanda de instalaciones adicionales de otros programas. library(openxlsx) read.xlsx(&quot;archivo.xslx&quot;, # Nombre o ruta completa al archivo colNames = TRUE, # Leer el encabezado (TRUE, por defecto) o no (FALSE) na.strings = c(&quot;Na&quot;, &quot;NA&quot;, &quot;-9999&quot;), # Valores a ser considerados como NA sep.names = &quot;.&quot;) # Rellena los espacios de los nombres de columnas con . Es mucho más fácil trabajar con archivos con extensión .xlsx. Si forzosamente se debe abrir un archivo .xls (más antiguo), utiliza: readxl::read_xls(\"archivo.xls\") 4.1.5 Bases de datos de R Los archivos de extensión .rda son la forma más sencilla de compartir bases de datos que solo serán abiertas en el entorno de R. No son leídas con otro programa. Lo interesante de estas bases es que almacenan el nombre del objeto original con el que fueron creadas en R. Una vez cargas el archivo con la función load(), el objeto aparecerá en el ambiente con su nombre original (no necesariamente el mismo nombre que el archivo.rda): load(&quot;archivo.rda&quot;) También existen archivos .RData que aparecen automáticamente uno crea un proyecto. Estos son los archivos que almacenan el ambiente de un proyecto, es decir, todas las variables creadas durante la sesión de RStudio, y que fueron guardadas al cerrar esta misma. 4.1.6 Archivos de SPSS En algunas ocasiones, los investigadores que manejen SPSS querrán abrir sus archivos de datos, con extensión .SAV, para generar gráficos o análisis en R. Esto es posible gracias a la integración realizada por una librería de tidyverse llamada haven: library(haven) read_sav(&quot;archivo.SAV&quot;) "],["exportar-basas-de-datos.html", "4.2 Exportar basas de datos", " 4.2 Exportar basas de datos Exportar archivos desde R es tarea sencilla. Se listan a continuación las funciones de exportación de los formatos descritos en la sección anterior. ### Exportar a .csv write.csv(objeto, # Objeto del ambiente a exportar &quot;nombre nuevo.csv&quot;, # Nombre del archivo a generar row.names = FALSE) # Incluir (TRUE) o no (FALSE, por defecto) # los nombres de las filas en el archivo final ### Exportar a .txt write.delim(objeto, # Objeto del ambiente a exportar &quot;nombre nuevo.txt&quot;, # Nombre del archivo a generar sep=&quot;\\t&quot;) # Separador de columnas ### Exportar a .xlsx library(openxlsx) write.xlsx(objeto, # Objeto del ambiente a exportar &quot;nombre nuevo.xlsx&quot;) # Nombre del archivo a generar) ### Exportar a .rda save(objeto, # Objeto del ambiente a exportar &quot;nombre nuevo.rda&quot;) # Nombre del archivo a generar) # Exportar a .SAV library(haven) write_sav(objeto, &quot;nombre nuevo.sav&quot;) "],["programación-funcional.html", "Capítulo 5 Programación funcional", " Capítulo 5 Programación funcional R, en esencia, es un lenguaje de programación funcional. En R existen muchas herramientas y facilidades para la creación de funciones. Es posible hacer prácticamente de todo con funciones: crear nuevas variables, automatizar resultados de una secuencia de pasos de código usada frecuentemente, crear funciones dentro de funciones para automatizar procesos, por mencionar algunas posibilidades. En este capítulo, se comenzará describiendo la creación de funciones básicas para resolver problemas sencillos, se revisará el uso de operadores de control de flujo (for, if, else, while), y finalmente se utilizarán ambos conceptos para aplicaciones más avanzadas de programación con R. Estos tópicos son considerados por muchos autores como el una introducción a R Avanzado, donde se explota al máximo el pensamiento funcional para aplicarlo en análisis de datos. Siéntete libre de revisar repetidamente el siguiente contenido porque será de muchísima utilidad en tu desarrollo como investigador usuario de R. Figura 5.1: Ejemplo sencillo del uso de programación funcional con loops (ciclos o iteraciones repetidas i veces) para obtener un resultado. "],["creacion-fun.html", "5.1 Creación de funciones", " 5.1 Creación de funciones La gran comunidad de desarrollo detrás de R ha creado una infinidad de funciones, almacenadas en los miles de paquetes (o librerías), disponibles en el repositorio oficial CRAN, así como en repositorios secundarios (ver sección 1.6 Librerías y repositorios). Es casi seguro que más adelante te será útil crear funciones con las que suplir alguna necesidad en el análisis de datos. Cuando se detecta que algunas secuencias de órdenes se suelen repetir, crear una función que empaquete dicha secuencia permitirá automatizar procedimientos y simplificar el código. Como regla general, si copias y pegas una secuencia de órdenes para usarla más de 2 veces, ya se debería pensar en crear una función que compile la tarea. Crear un función involucra los siguientes pasos: Darle un nombre. Crear una función es como crear una variable: hay que asignarle un contenido a un nombre. Luego de escribir el nombre, se tiene que usar la función llamada function()para indicar qué argumentos tendrá la nueva función. Definir el contenido de la función, la secuencia de órdenes, dentro de corchetes. Dentro de ellos se usarán los argumentos establecidos en function(). 5.1.1 Ejemplo simple Ejemplo 5.1 Comenzando con ejemplo muy simple, se creará una función que le sume 100 a un número dado: ### Modo 1: ### Crear la función con corchetes mi.fun1 &lt;- function(x){ x+100 } ### Modo 2: ### Cuando el contenido de una función es muy sencillo, ### el contenido puede ir sin llaves y en una sola línea: mi.fun2 &lt;- function(x) x+100 ### Ambas funciones brindan el mismo resultado mi.fun1(156) # [1] 256 mi.fun2(156) # [1] 256 5.1.2 Función de Gauss Ejemplo 5.2 Recrear la famosa función de Carl Friedrich Gauss para calcular la suma de todos los números dentro de un rango numérico, implicar tomar su fórmula matemática: \\[ k = \\frac{n * ( n + 1 )}{2} \\] y convertirla en código funcional: ### Crear la función k.Gauss &lt;- function(n) { (n * (n+1))/2 } ### Usar la función k.Gauss(100) # [1] 5050 5.1.3 Variables y valores por defecto Esa letra o palabra que se ha colocado dentro de la función function() recibe el nombre de variable de la función. Hasta aquí se definió una única variable dentro de cada función: x para mi.fun1() y mi.fun2(), o n para k.Gaus(). Pero se puede colocar más de una, e incluso definir valores por defecto en function(), mismos que se podrán modificar al usar la función ya creada. Ejemplo 5.3 La siguiente función permitirá hallar el logaritmo en base 2 (definido por defecto) de la función matemática de Gauss, pero podrás modificar el valor cuando quieras posteriormente: ### Crear la función log.Gauss &lt;- function(n, base = 2) { resultado.Gauss &lt;- (n * (n+1))/2 logaritmo &lt;- log(resultado.Gauss, base=base) return(logaritmo) } ### Usar la función log.Gauss(100) # [1] 12.3 ### Cambiando la base del logaritmo log.Gauss(100, base = 10) # [1] 3.703 ### En casos como estos, donde la posición ### de un argumento es única, puedes obviar ### el nombre del mismo (base) log.Gauss(100, 10) # [1] 3.703 5.1.4 Almacenar variables directamente en el ambiente Como es evidente en el ejemplo anterior, se pueden crear variables dentro de una función utilizando el operador &lt;-, pero estas son de carácter temporal. Una vez se imprime el resultado en consola, la variable temporal desaparece. Para que algún paso realizado dentro de una función se guarde como un objeto permanentemente en el ambiente, usa el símbolo especial &lt;&lt;-. Ejemplo 5.4 En el siguiente ejemplo permitiremos que un paso de la función log.Gauss() se guarde en el ambiente: ### Crear la función con guardado especial log.Gauss &lt;- function(n, base = 2) { resultado.Gauss &lt;&lt;- (n * (n+1))/2 # Este objeto se guardará logaritmo &lt;- log(resultado.Gauss, base=base) print(logaritmo) } ### Usar la función log.Gauss(100, base = 5) # [1] 5.298 ### Mostrar el objeto resultado.Gauss que se creó ### automáticamente tras ejecutar log.Gauss() print(resultado.Gauss) # [1] 5050 "],["control-de-flujo.html", "5.2 Control de flujo", " 5.2 Control de flujo En R existen algunos operadores para controlar el flujo de las acciones a tomar en la ejecución. Esto sucede solamente cuando se cumple una condición dada. Recordemos que las condiciones lógicas se resuelven como verdadera TRUE o falsa FALSE. Existen operadores de elección (if, else) y de iteración o loop (for, while). Se revisará a detalle sus usos en las siguientes secciones. 5.2.1 Control con if El primer operador de control de flujo a destacar es el condicional if. Este significa si, y ejecuta la expresión: si A se cumple (es decir, si A es TRUE), muestro un resultado. Este tienen la estructura básica: if (condición) acción_si_la_condición_es_verdadera Ejemplo 5.5 Para poner en contexto lo anterior: ### Crear una condición verdadera condicion &lt;- TRUE if(condicion) 1 # [1] 1 En este sentido,if mostrará como resultado lo que esté a la derecha del paréntesis de condición, siempre y cuando la condición sea verdadera. Cuando la condición es falsa, no muestra resultado alguno: ### Crear una condición falsa condicion &lt;- FALSE if (condicion) 1 Ejemplo 5.6 En la siguiente expresión, reemplazaremos la condición TRUE por una condición real con un vector llamado num. Se hará la pregunta lógica ¿es el objeto num numeric?. El resultado será un texto indicando que num es un número siempre que la condición sea verdadera. ### Cuando num es un número num &lt;- 123 if (is.numeric(num)) paste(num, &quot;es un número&quot;) # [1] &quot;123 es un número&quot; ### Cuando num no es un número num &lt;- &quot;Andes Tropicales&quot; if (is.numeric(num)) paste(num, &quot;es un número&quot;) En el ejemplo con \"Andes Tropicales\", la condición no fue verdadera, if no mostró resultado alguno en consola. 5.2.2 Control completo con if y else El segundo operador de control que uno debe conocer es else. Este significa entonces, y suele colocarse acompañando a if para completar la condición universal: si A se cumple, muestro un resultado; si A no se cumple, entonces muestro otro resultado. Utilizando ambis, se obtiene tienen la estructura básica: if (condición) acción_si_la_condición_es_verdadera else acción_si_la_condición_es_falsa Ejemplo 5.7 Poniendo en contexto lo mencionado: ### Usar if y else con una condición lógica condicion &lt;- TRUE if (condicion) 1 else 0 # [1] 1 ### Usar if y else con una condición lógica condicion &lt;- FALSE if (condicion) 1 else 0 # [1] 0 Es más frecuente utilizar llaves {} para definir el resultado de if o el otro resultado de else: ### Usar if y else con una condición lógica condicion &lt;- TRUE if (condicion) {1} else {0} # [1] 1 ### Usar if y else con una condición lógica condicion &lt;- FALSE if (condicion) {1} else {0} # [1] 0 Para escribir un código con varias líneas de if y else, es necesario respetar el sangrado (espacio desde el borde), siendo que else se muestre sangrado dentro de la cadena de código iniciada con if. ### Código de if y else en varias líneas condicion &lt;- FALSE if (condicion) { 1 } else { 0} # [1] 0 Ejemplo 5.8 Veamos una aplicación más completa de todo lo discutido hasta el momento: ### Cuando num es un número num &lt;- 123 if (is.numeric(num)) { paste(num, &quot;es un número&quot;) } else { paste(num, &quot;no es un número&quot;) } # [1] &quot;123 es un número&quot; ### Cuando num no es un número num &lt;- &quot;Andes Tropicales&quot; if (is.numeric(num)) { paste(num, &quot;es un número&quot;) } else { paste(num, &quot;no es un número&quot;) } # [1] &quot;Andes Tropicales no es un número&quot; Ejemplo 5.9 A continuación varias aplicaciones para identificar si un valor numérico es par o impar, para identificar si un valor es NA, y para identificar si un valor es del tipo carácter o texto: ### Con valor numérico para identificar par o impar valor &lt;- 120 if((valor %% 2) == 0) { print(paste(valor,&quot;es par&quot;)) } else if ((valor %% 2) != 0) { print(paste(valor,&quot;es impar&quot;)) } # [1] &quot;120 es par&quot; ### Con valor NA para identificar si es NA o un texto valor &lt;- NA if (is.na(valor)) { print(paste(valor, &quot;es un valor perdido&quot;)) } else { print(paste(valor, &quot;no es un valor perdido, debe ser un texto&quot;)) } # [1] &quot;NA es un valor perdido&quot; ### Con valor NA para identificar si es NA o un texto valor &lt;- &quot;América&quot; if (is.na(valor)) { print(paste(valor, &quot;es un valor perdido&quot;)) } else { print(paste(valor, &quot;no es un valor perdido, debe ser un texto&quot;)) } # [1] &quot;América no es un valor perdido, debe ser un texto&quot; Ejemplo 5.10 Crear un proceso complejo que involucre una respuesta para cualquiera de los tipos de elementos ofrecidos en el ejemplo anterior (valor numérico, NA y textual) puede ser un dolor de cabeza. Si se concatenan las condiciones con else e if de manera errada, generará un error: ### Forma errada valor &lt;- &quot;Mil quinientos veinte&quot; if((valor %% 2) == 0) { print(paste(valor,&quot;es par&quot;)) } else if ((valor %% 2) != 0) { print(paste(valor,&quot;es impar&quot;)) } else if (is.na(valor)) { print(paste(valor, &quot;es un valor perdido&quot;)) } else { print(paste(valor, &quot;no es un valor perdido, debe ser un texto&quot;)) } # Error in valor%%2 : non-numeric argument to binary operator La manera correcta de crear esta condición compleja se obtiene primero preguntando si el elemento valor es número o no. Este paso es fundamental debido a las limitaciones razonables de operar numéricamente con %% un texto, generando un error: &quot;Mil quinientos veinte&quot; %% 2 # Error in &quot;Texto&quot;%%2 : non-numeric argument to binary operator Incluyendo la pregunta ¿es verdad TRUE que el valor es un número? con is.numeric(valor) == TRUE para cuando valor es número; y la pregunta ¿es falso FALSE que el valor es un número? con is.numeric(valor) == FALSE, para cuando valor es texto: ### Tómate el tiempo que necesites para ### entender cómo funciona esta estructura ### Prueba su aplicación cambiando el contenido de valor: valor &lt;- &quot;Mil quinientos veinte&quot; if (is.numeric(valor) == TRUE) { if((valor %% 2) == 0) { print(paste(valor,&quot;es par&quot;)) } else if ((valor %% 2) != 0) { print(paste(valor,&quot;es impar&quot;)) } } else if (is.numeric(valor) == FALSE) { if (is.na(valor)) { print(paste(valor, &quot;es un valor perdido&quot;)) } else { print(paste(valor, &quot;no es un valor perdido, debe ser un texto&quot;)) } } # [1] &quot;Mil quinientos veinte no es un valor perdido, debe ser un texto&quot; Tanto if como else permiten evaluar elementos dentro de una función y pueden funcionar como interruptores que de decanten en la elección de una ruta de análisis en relación a una condición relacionada con el elemento u objeto de entrada. Para entender la importancia de estos interruptores en la creación de funciones, revisemos el contenido de la función dist(), que calcula una matriz de distancias para análisis multivariados. Para esta función, es importante especificar qué método de cálculo de distancias se debe usar. Siempre existirá alguno definido por defecto, en este caso \"euclidean\" (distancia euclidiana). Reconoce las estructuras if y else que usa la función para decidir qué hacer cuando se le a otorgado uno u otro valor en el argumento method. dist # function (x, method = &quot;euclidean&quot;, diag = FALSE, upper = FALSE, # p = 2) # { # if (!is.na(pmatch(method, &quot;euclidian&quot;))) # method &lt;- &quot;euclidean&quot; # METHODS &lt;- c(&quot;euclidean&quot;, &quot;maximum&quot;, &quot;manhattan&quot;, &quot;canberra&quot;, # &quot;binary&quot;, &quot;minkowski&quot;) # method &lt;- pmatch(method, METHODS) # if (is.na(method)) # stop(&quot;invalid distance method&quot;) # if (method == -1) # stop(&quot;ambiguous distance method&quot;) # x &lt;- as.matrix(x) # N &lt;- nrow(x) # attrs &lt;- if (method == 6L) # list(Size = N, Labels = dimnames(x)[[1L]], Diag = diag, # Upper = upper, method = METHODS[method], p = p, call = match.call(), # class = &quot;dist&quot;) # else list(Size = N, Labels = dimnames(x)[[1L]], Diag = diag, # Upper = upper, method = METHODS[method], call = match.call(), # class = &quot;dist&quot;) # .Call(C_Cdist, x, method, attrs, p) # } # &lt;bytecode: 0x000000002456ce20&gt; # &lt;environment: namespace:stats&gt; 5.2.3 Condicionales en vectores de más de un elemento con ifelse() De manera similar al uso de if y else, es posible operar de manera vectorial. Esto significa: aplicar una condición a cada elemento de un vector, para que cuando esta se cumpla (sea TRUE) se de un resultado, mientras que otorgue otro cuando no se cumpla (sea FALSE). La función ifelse(), encargada de ello, requiere como argumentos una condición lógica, un valor para cuando la condición sea TRUE y otro valor para cuando sea FALSE. La estructura básica es: ifelse(condicion, &quot;acción_si_la_condición_es_verdadera&quot;, &quot;acción_si_la_condición_es_falsa&quot;) Ejemplo 5.11 Usando ifelse() para identificar los valores pares e impares de un vector numérico: ### Crear un vector cualquiera vector &lt;- 1:50 ### Usar ifelse() ifelse((vector %% 2) == 0, &quot;Par&quot;, &quot;Impar&quot;) # [1] &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; # [11] &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; # [21] &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; # [31] &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; # [41] &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; &quot;Impar&quot; &quot;Par&quot; Es posible incluir una función ifelse*() dentro de otra en la posición de resultado FALSE para concatenar varias condiciones aplicadas al mismo vector: ### Usar ifelse() ifelse((vector %% 2) == 0 &amp; vector &gt; 10, &quot;Par &gt;10&quot;, ifelse((vector %% 2) == 0 &amp; vector &lt;= 10, &quot;Par &lt;=10&quot;, ifelse((vector %% 2) != 0 &amp; vector &gt; 10, &quot;impar &gt;10&quot;, &quot;impar &lt;=10&quot;))) # [1] &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; # [7] &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [13] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [19] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [25] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [31] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [37] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [43] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [49] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; 5.2.4 Condicionales en vectores case_when() de dplyr La función case_when() de la librería dplyr es la solución para cuando se necesita utilizar muchos ifelse() concatenados. Su uso, como otras funciones de dplyr, es sencillo. La estructura básica es: case_when( condicion ~ &quot;resultado_verdadero&quot;, condicion ~ &quot;resultado_verdadero&quot;, condicion ~ &quot;resultado_verdadero&quot;, condicion ~ &quot;resultado_verdadero&quot; ) Ejemplo 5.12 Resolviendo el último ejemplo de la sección anterior con case_when(): ### Crear un vector vector &lt;- 1:50 ### Evaluar el vector con case_when() library(dplyr) case_when( (vector %% 2) == 0 &amp; vector &gt; 10 ~ &quot;Par &gt;10&quot;, (vector %% 2) == 0 &amp; vector &lt;= 10 ~ &quot;Par &lt;=10&quot;, (vector %% 2) != 0 &amp; vector &gt; 10 ~ &quot;impar &gt;10&quot;, (vector %% 2) != 0 &amp; vector &lt;= 10 ~ &quot;impar &lt;=10&quot; ) # [1] &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; # [7] &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &lt;=10&quot; &quot;Par &lt;=10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [13] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [19] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [25] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [31] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [37] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [43] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; # [49] &quot;impar &gt;10&quot; &quot;Par &gt;10&quot; Cuando hay elementos que no cumplen con ninguna condición ofrecida, el elemento se reemplaza por NA en el vector de resultado: ### Crear un vector vector &lt;- 1:50 ### Evaluar el vector con case_when() ### con una sola condición library(dplyr) case_when( (vector %% 2) == 0 &amp; vector &gt; 10 ~ &quot;Par &gt;10&quot; ) # [1] NA NA NA NA NA NA NA NA # [9] NA NA NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; # [17] NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; # [25] NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; # [33] NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; # [41] NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; NA &quot;Par &gt;10&quot; # [49] NA &quot;Par &gt;10&quot; 5.2.5 Ciclos o Loops con for El segundo grupo de operadores de control de flujo incluye a los responsables de ciclos, iteraciones o loops. Un loop con for tienen la siguiente estructura básica: for (elemento in vector_secuencial) {acciones a realizar} 5.2.5.1 Entendiendo la estructura básica de for Elemento y vector_secuencial son dos cosas que no se han visto hasta el momento. Elemento se comporta como una variable de posición. Es clásico que se coloque a i como elemento, pero puede ser cualquier letra o palabra, siempre y cuando esta se utilice dentro del loop. El elemento funciona como variable de posición, y en cada vuelta del loop, i será reemplazado con un elemento del vector_secuencial, uno a uno en orden correlativo. El vector_secuencial, por su parte, es un vector que debe contener la secuencia correlativa de números que vaya desde 1 hasta la cantidad máxima de elementos que tiene el vector sobre el que se pretende aplicar el loop. Si el vector inicial al que se le aplicará el loop contiene solo cuatro elementos: c(10.1, 50.9, 23.4, 31.5), se debe colocar una de las siguientes opciones dentro del paréntesis de for: ### Vector sobre el que aplicar el loop vector &lt;- c(10.1, 50.9, 23.4, 31.5) ### Opción 1: colocar un rango manualmente (poco eficiente) for (i in 1:4) ### Opción 1: colocar un rango con length() (no recomendado) for (i in 1:length(vector)) ### Opción 1: usando seq_along() para crear el rango (recomendado) for (i in seq_along(vector)) 5.2.5.2 Uso de for Ejemplo 5.13 Utilizando un loop para obtener solo los valores mayores igual al promedio de un conjunto de datos: ### Crear aleatoriamente un conjunto de datos ### que siga la distribución normal set.seed(123) aleatorio &lt;- rnorm(200, mean = 20, sd=5.6) ### Crear un objeto vacío para rellenarlo ### con el resultado de cada vuelta del loop res &lt;- c() ### Loop sin importar que se generen NA for (i in seq_along(aleatorio)){ if (aleatorio[i] &gt;= mean(aleatorio)) { res[i] &lt;- aleatorio[i] } } ### Resultado res # [1] NA NA 28.73 20.39 20.72 29.60 22.58 NA NA NA 26.85 22.01 22.24 # [14] 20.62 NA 30.01 22.79 NA 23.93 NA NA NA NA NA NA NA # [27] 24.69 20.86 NA 27.02 22.39 NA 25.01 24.92 24.60 23.86 23.10 NA NA # [40] NA NA NA NA 32.15 26.76 NA NA NA 24.37 NA 21.42 NA # [53] NA 27.66 NA 28.49 NA 23.27 20.69 21.21 22.13 NA NA NA NA # [66] 21.70 22.51 20.30 25.16 31.48 NA NA 25.63 NA NA 25.74 NA NA # [79] 21.02 NA 20.03 22.16 NA 23.61 NA 21.86 26.14 22.44 NA 26.43 25.56 # [92] 23.07 21.34 NA 27.62 NA 32.25 28.58 NA NA NA 21.44 NA NA # [105] NA NA NA NA NA 25.15 NA 23.40 NA NA 22.91 21.69 20.59 # [118] NA NA NA 20.66 NA NA NA 30.33 NA 21.32 20.44 NA NA # [131] 28.09 22.53 20.23 NA NA 26.34 NA 24.14 30.69 NA 23.93 NA NA # [144] NA NA NA NA 23.85 31.76 NA 24.41 24.31 21.86 NA NA NA # [157] 23.15 NA 25.47 NA 25.90 NA NA 38.15 NA 21.67 23.56 NA 22.89 # [170] 22.07 NA 20.37 NA 31.92 NA NA 20.21 21.74 22.44 NA NA 27.07 # [183] NA NA NA NA 26.22 20.47 24.22 NA 21.20 NA 20.53 NA NA # [196] 31.18 23.36 Para no generar NA en el resultado se usa un truco: ir adicionando el resultado a res como un vector que concatena el contenido de hasta la iteración anterior de res, más el contenido de la iteración actual: ### Loop sin NA res &lt;- c() for (i in seq_along(aleatorio)){ if (aleatorio[i] &gt;= mean(aleatorio)) { res &lt;- c(res, aleatorio[i]) # aquí está el truco } } ### Resultado res # [1] 28.73 20.39 20.72 29.60 22.58 26.85 22.01 22.24 20.62 30.01 22.79 23.93 24.69 # [14] 20.86 27.02 22.39 25.01 24.92 24.60 23.86 23.10 32.15 26.76 24.37 21.42 27.66 # [27] 28.49 23.27 20.69 21.21 22.13 21.70 22.51 20.30 25.16 31.48 25.63 25.74 21.02 # [40] 20.03 22.16 23.61 21.86 26.14 22.44 26.43 25.56 23.07 21.34 27.62 32.25 28.58 # [53] 21.44 25.15 23.40 22.91 21.69 20.59 20.66 30.33 21.32 20.44 28.09 22.53 20.23 # [66] 26.34 24.14 30.69 23.93 23.85 31.76 24.41 24.31 21.86 23.15 25.47 25.90 38.15 # [79] 21.67 23.56 22.89 22.07 20.37 31.92 20.21 21.74 22.44 27.07 26.22 20.47 24.22 # [92] 21.20 20.53 31.18 23.36 Ejemplo 5.14 Otra manera de conseguir el efecto visto en el ejemplo anterio es utilizando el operador condicional next. Este salta un ciclo cuando se cumple la condición del if previo. Nota como la condición en if pide lo contrario a lo que se necesita, para que cuando se cumpla se active next y cuando no se cumpla se guarda el valor concatenado en res. ### Crear un objeto vacío res &lt;- c() ### Loop con next y condición if inversa a lo requerido for (i in seq_along(aleatorio)){ if (aleatorio[i] &lt; mean(aleatorio)) # condición inversa para usar next next res &lt;- c(res, aleatorio[i]) } ### Resultado res # [1] 28.73 20.39 20.72 29.60 22.58 26.85 22.01 22.24 20.62 30.01 22.79 23.93 24.69 # [14] 20.86 27.02 22.39 25.01 24.92 24.60 23.86 23.10 32.15 26.76 24.37 21.42 27.66 # [27] 28.49 23.27 20.69 21.21 22.13 21.70 22.51 20.30 25.16 31.48 25.63 25.74 21.02 # [40] 20.03 22.16 23.61 21.86 26.14 22.44 26.43 25.56 23.07 21.34 27.62 32.25 28.58 # [53] 21.44 25.15 23.40 22.91 21.69 20.59 20.66 30.33 21.32 20.44 28.09 22.53 20.23 # [66] 26.34 24.14 30.69 23.93 23.85 31.76 24.41 24.31 21.86 23.15 25.47 25.90 38.15 # [79] 21.67 23.56 22.89 22.07 20.37 31.92 20.21 21.74 22.44 27.07 26.22 20.47 24.22 # [92] 21.20 20.53 31.18 23.36 Ejemplo 5.15 Si es requerido frenar el loop antes de que culmine, en base a una nueva condición definida, se debe utilizar break. En nuestro ejemplo, para frenar el loop cuando aparezca el primer valor mayor a 30.5, es necesario ir evaluando en cada iteración del loop si existe al menos un valor &gt; 30.5 en el objeto res. Esto se obtiene con any(res &gt; 30.5). En el momento que se cumpla, break frena el loop. ### Crear un objeto vacío res &lt;- c() ### Loop con next y condición if inversa a lo requerido for (i in seq_along(aleatorio)){ if (aleatorio[i] &lt; mean(aleatorio)) next res &lt;- c(res, aleatorio[i]) if (any(res &gt; 30.5)) # hay que evaluar si hay algún (any) break } ### Resultado res # [1] 28.73 20.39 20.72 29.60 22.58 26.85 22.01 22.24 20.62 30.01 22.79 23.93 24.69 # [14] 20.86 27.02 22.39 25.01 24.92 24.60 23.86 23.10 32.15 5.2.6 Ciclos o loops con replicate() La función replicate() facilita mucho procesos iterativos para simulación. Permite replicar una o varias líneas de código las veces que sean definidas, para almacenarlas como una lista de vectores (con el argumento simplify = FALSE), o como un vector único (con el argumento simplify = TRUE, como está por defecto). Ejemplificaremos su uso con un caso de estudio: Ejemplo 5.16 Se ha evaluado una población, de la cual se obtuvo como muestra 100 medidas de una longitud. Al obtener el valor más grande de dicha muestra se obtiene: ### Valores del estudio muestra &lt;- c(155.62, 158.5, 174.06, 161.11, 161.62, 175.42, 164.51, 149.49, 154.52, 156.62, 171.15, 163.63, 163.99, 161.46, 155.66, 176.05, 164.83, 143.39, 166.6, 156.39, 151.21, 158.6, 151.57, 154.16, 155.06, 145.83, 167.79, 161.83, 150.6, 171.41, 164.21, 157.93, 168.29, 168.14, 167.65, 166.49, 165.32, 159.96, 157.84, 157.19, 154.46, 158.69, 149.49, 179.37, 171.01, 150.73, 156.99, 156.44, 167.29, 159.77, 162.7, 160.25, 160.13, 172.41, 158.54, 173.69, 147.03, 165.59, 161.58, 162.38, 163.8, 156.13, 157.6, 151.64, 151.18, 163.14, 164.4, 160.96, 168.52, 178.34, 156.23, 140.41, 169.25, 154.33, 154.51, 169.42, 158.02, 149.88, 162.08, 159.29, 160.55, 163.85, 157.28, 166.11, 158.58, 163.39, 170.04, 164.29, 157.66, 170.49, 169.14, 165.27, 162.58, 155.04, 172.34, 155.28, 179.53, 173.83, 158.45, 151.57) ### El valor más alto de dicha población max(muestra) # [1] 179.5 Pero ¿Siempre será así?. ¿Será que si evaluo nuevamente la población obtendré el mismo valor máximo?. Como no tenemos dinero ni tiempo para volver a evaluar dicha población, decidimos simularla. En este paso necesitamos información de la muestra: ### Promedio promedio &lt;- mean(muestra) ### Desviación estándar desvest &lt;- sd(muestra) Con estos datos se puede simular una población en R. Asumiendo que esta siguen una distribución normal, utilizamos: ### Simular los datos set.seed(123) muestra_simulada &lt;- rnorm(100, mean = promedio, sd = desvest) ### Ver los resultados muestra_simulada # [1] 156.8 159.5 173.7 161.8 162.3 174.9 164.9 151.2 155.8 157.7 171.0 164.1 164.5 # [14] 162.2 156.9 175.5 165.2 145.7 166.9 157.5 152.8 159.6 153.1 155.5 156.3 147.9 # [27] 167.9 162.5 152.2 171.2 164.7 158.9 168.4 168.3 167.8 166.8 165.7 160.8 158.9 # [40] 158.3 155.8 159.6 151.2 178.5 170.9 152.4 158.1 157.6 167.5 160.6 163.3 161.1 # [53] 160.9 172.2 159.5 173.3 149.0 165.9 162.3 163.0 164.3 157.3 158.6 153.2 152.8 # [66] 163.7 164.8 161.7 168.6 177.6 157.4 142.9 169.3 155.7 155.8 169.4 159.0 151.6 # [79] 162.7 160.2 161.3 164.3 158.3 166.4 159.5 163.9 170.0 164.7 158.7 170.4 169.2 # [92] 165.6 163.2 156.3 172.1 156.5 178.7 173.5 159.4 153.1 Para repetir esta simulación diez mil veces, y obtener estadísticos descriptivos de los valores máximos de dichas muchas simuladas, utilizaremos replicate() con dos pasos internos por cada iteración del loop: Crear un conjunto de números aleatorios para la iteración. Hallar el valor máximo de la longitud en dicho conjunto. ### Usar replicate() set.seed(123) resultados &lt;- replicate(n = 10000, { parcial &lt;- rnorm(100, mean = promedio, sd = desvest) max(parcial) } ) ### Revisar el valor máximo, mínimo y promedio de longitudes ### máximas obtenidas por el loop de replicate() min(resultados) # [1] 171.8 max(resultados) # [1] 199.8 mean(resultados) # [1] 181.2 ### Valor máximo de la muestra original max(muestra) # [1] 179.5 Con ello nos hemos dado cuenta que, asumiendo que la variable tiene distribución de probabilidades normal, el valor máximo de la muestra original (179.53), es menor al promedio poblacional simulado con diez mil réplicas (199.809). Por el contrario, está más cerca del valor máximo más pequeño dentro de los diez mil datos (171.7636). 5.2.7 Ciclos o Loops con while Otro operador de control de flujo con el que se crea loops es while. A diferencia de for, que opera hasta que se acaben las iteraciones definidas por el rango 1:n, while se detendrá solo hasta que se cumpla una condición. Si dicha condición nunca se cumple, se crea un loop infinito. Un loop con while tienen la siguiente estructura básica: # Posición inicial index &lt;- 1 # Loop con while while (condicion_respecto_a_index) { acciones a realizar index &lt;- index + 1 } Es la segunda línea de la condición a realizar dentro del loop while lo que le da la continuidad. En alguna iteración, el ir sumando valores al index hará que se cumpla la condición definida. Ejemplo 5.17 Veamos su aplicación: # Posición inicial index &lt;- 1 # Loop con while while (index &lt;= 5) { # Acción a realizar print(paste(&quot;El número es&quot;, index)) # Suma una posición para la siguiente iteración index &lt;- index + 1 } # [1] &quot;El número es 1&quot; # [1] &quot;El número es 2&quot; # [1] &quot;El número es 3&quot; # [1] &quot;El número es 4&quot; # [1] &quot;El número es 5&quot; Una segunda manera de operar es indicar que se frene el loop hasta que una condición lógica cambie de estado (FALSE a TRUE, o viceversa). Ejemplo 5.18 Se aplicará el imprimir la secuencia de bases nitrogenadas (letras A, C, G, T) hasta que se ubique la primera base G. Trata de interpretar cada paso dentro de una iteración del loop while: ### Vector sobre el cual hacer la impresión de elementos vector &lt;- c(&quot;A&quot;,&quot;T&quot;,&quot;C&quot;,&quot;A&quot;,&quot;T&quot;,&quot;G&quot;,&quot;G&quot;,&quot;G&quot;,&quot;G&quot;,&quot;C&quot;,&quot;C&quot;) ### Condición en estado falso condicion &lt;- FALSE ### Índice index &lt;- 1 ### Loop con while ### Aquí !condicion significa: ### &quot;mientras que condición no sea verdadera, continuar&quot; while ( !condicion ) { print(vector[index]) # imprime el elemento index &lt;- index + 1 # adiciona una posición condicion &lt;- vector[index] == &quot;G&quot; # evalúa si es G la siguiente posición } # [1] &quot;A&quot; # [1] &quot;T&quot; # [1] &quot;C&quot; # [1] &quot;A&quot; # [1] &quot;T&quot; Intentar con for lo explicado en el ejemplo anterior llevaría al resultado erróneo de imprimir todo menos los elementos que se soliciten, como G: ### Vector sobre el cual hacer la impresión de elementos vector &lt;- c(&quot;A&quot;,&quot;T&quot;,&quot;C&quot;,&quot;A&quot;,&quot;G&quot;,&quot;T&quot;,&quot;C&quot;,&quot;A&quot;, &quot;T&quot;,&quot;G&quot;,&quot;G&quot;,&quot;C&quot;,&quot;G&quot;,&quot;G&quot;,&quot;C&quot;,&quot;C&quot;) ### Loop con for for(i in seq_along(vector)){ if(vector[i]!=&quot;G&quot;) print(vector[i]) } # [1] &quot;A&quot; # [1] &quot;T&quot; # [1] &quot;C&quot; # [1] &quot;A&quot; # [1] &quot;T&quot; # [1] &quot;C&quot; # [1] &quot;A&quot; # [1] &quot;T&quot; # [1] &quot;C&quot; # [1] &quot;C&quot; # [1] &quot;C&quot; Algo más interesante para el loop while podría ser frenar la impresión de elementos cuando se identifique que a partir de la siguiente iteración aparecerá una secuencia definida. Ejemplo 5.19 Imagina que necesitas frenar la impresión hasta que aparezca la primera secuencia TGC, en ese orden: # Objetos necesarios vector &lt;- c(&quot;A&quot;,&quot;T&quot;,&quot;C&quot;,&quot;A&quot;,&quot;G&quot;,&quot;T&quot;,&quot;C&quot;,&quot;A&quot;, &quot;T&quot;,&quot;G&quot;,&quot;G&quot;,&quot;C&quot;,&quot;G&quot;,&quot;G&quot;,&quot;C&quot;,&quot;C&quot;) condicion &lt;- FALSE index &lt;- 1 ### Loop con while while ( !condicion ) { print(vector[index]) index &lt;- index + 1 condicion &lt;- identical(c(vector[index], vector[index+1], vector[index+2]), c(&quot;T&quot;,&quot;G&quot;,&quot;G&quot;)) } # [1] &quot;A&quot; # [1] &quot;T&quot; # [1] &quot;C&quot; # [1] &quot;A&quot; # [1] &quot;G&quot; # [1] &quot;T&quot; # [1] &quot;C&quot; # [1] &quot;A&quot; "],["operadoresfuncion.html", "5.3 Operadores de función", " 5.3 Operadores de función Los operadores de función son funciones que toman como entrada una función y devuelven como resultado otra función generada como una modificación de la inicial. Esto es diferente de lo mostrado hasta el momento, donde una función usualmente genera un objeto como resultado. Ejemplo 5.20 Veamos un ejemplo sobre la identificación de números primos. La forma más sencilla de hacer es creando una función que identifique si un número dado es primo o no. El proceso de idear esta función comienza con crear una función que identifique si un número es primo o no. Esta función inicial debe ser pensada como una función que se le puede aplicar a un solo elemento, no a un conjunto de datos. ### Crear la función primo.logic() para identificar números primos primo.logic &lt;- function(x) { if (x == 2) { TRUE } else if (any(x %% 2:(x-1) == 0)) { FALSE } else { TRUE } } ### Probar la función con los números primos 2, 3, 5, y no primos 4, 9, 27 primo.logic(2) # [1] TRUE primo.logic(3) # [1] TRUE primo.logic(5) # [1] TRUE primo.logic(4) # [1] FALSE primo.logic(9) # [1] FALSE primo.logic(27) # [1] FALSE El resultado es excelente, primo.logic() identifica si un número es primo o no. Sin embargo, no es eficiente ir probando elemento a elemento el contenido de un conjunto de datos. Automatizar primo.logic() para que aplique la búsqueda de números primos elemento a elemento (element-wise) a un vector completo, implica vectorizar primo.logic() usando la función Vectorize(). Este es el operador de funciones que nos devolverá como resultado la función primo.logic() aplicable a un vector: ### Crear un vector para buscar los números primos en él sec &lt;- 1:100 ### Vectorizar la función primo.logic() y ### guardarla como una nueva función primoV primoV &lt;- Vectorize(primo.logic) ### Usar primoV() primoV(seciltrar los números primos de la secuencia sec[primoV(sec)] # [1] 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 De manera similar a lo mostrado con Vectorize(), existen otros enfoques en R que utilizan funciones de la familia apply(). Este tema es abordado en la siguiente sección. "],["familia-apply.html", "5.4 Familia apply()", " 5.4 Familia apply() 5.4.1 Función apply() La familia de funciones apply() reúne a varias funciones que permiten, como se implica de su nombre, aplicar algo a un objeto. Ese algo es una función. Ejemplo 5.21 Para explorar los beneficios de este grupo de funciones, comencemos con un problema básico: calcular el promedio de varias columnas numéricas de una data frame. ### Activar la data frame de ejemplo llamada iris data(iris) ### Ver las primeras 10 filas de la tabla head(iris, 10) # Sepal.Length Sepal.Width Petal.Length Petal.Width Species # 1 5.1 3.5 1.4 0.2 setosa # 2 4.9 3.0 1.4 0.2 setosa # 3 4.7 3.2 1.3 0.2 setosa # 4 4.6 3.1 1.5 0.2 setosa # 5 5.0 3.6 1.4 0.2 setosa # 6 5.4 3.9 1.7 0.4 setosa # 7 4.6 3.4 1.4 0.3 setosa # 8 5.0 3.4 1.5 0.2 setosa # 9 4.4 2.9 1.4 0.2 setosa # 10 4.9 3.1 1.5 0.1 setosa Calcular el promedio de las primeras cuatro columnas (las únicas numéricas), se puede hacer manualmente: mean(iris$Sepal.Length) # [1] 5.843 mean(iris$Sepal.Width) # [1] 3.057 mean(iris$Petal.Length) # [1] 3.758 mean(iris$Petal.Width) # [1] 1.199 O con apply(). Esta función necesita que especifiquemos como argumentos: una base de datos tabular (DF), un modo de aplicación de la función (fila por fila: MARGIN = 1, columna por columna: MARGIN = 2), y la función (sin paréntesis) a ser aplicada. El resultado obtenido es un vector, cuyos elementos reciben el nombre de la columna de la cual proceden. En consecuencia, la estructura básica es: ### Modo largo apply(DF, MARGIN = 2, FUN = FUNCIÓN) ### Modo corto apply(DF, 2, FUNCIÓN) Poniendo en contexto apply() para el ejemplo planteado: ### Seleccionando las 4 primeras columnas de iris apply(iris[,1:4], 2, FUN = mean) # Sepal.Length Sepal.Width Petal.Length Petal.Width # 5.843 3.057 3.758 1.199 Dentro de la familia apply() podrás encontrar: Tabla 5.1: Funciones de la familia apply() que se pueden utilizar en R para automatizar la aplicación de funciones sobre diferentes estructuras de datos. Función Descripción apply() Aplica una función a las columnas (MARGIN = 2) o filas (MARGIN = 1) de una base de datos en dos dimensiones (tablas, matrices, data frames). Produce un vector nombrado como resultado. lapply() Aplicar una función sobre un vector o lista. Produce una lista como resultado. sapply() Igual que lapply() pero produce un vector o matriz como resultado. vapply() Igual que sapply() pero produce un resultado con estructura predefinida por el usuario. tapply() Aplica una función a un vector separándolo primero por grupos en base a otro vector. Devuelve como resultado un array. mapply() Es la versión multivariada de sapply(). Aplica una función a la vez sobre varios vectores. En estos evalúa sobre la función de manera agrupada los primeros elementos, segundos elementos, terceros elementos, y así para delante, hasta acabar con los elementos de todos los vectores. 5.4.2 Función lapply() La función lapply() se aplica tanto a una base de datos tabular o sobre una lista. Si se aplica a una tabla (DF), lo hace siempre de manera columna a columa, lo mismo que hace apply() con el argumento MARGIN = 2. No obstante, el resultado es siempre una lista, no un vector. La estructura básica es: lapply(DF, FUN = FUNCIÓN) Ejemplo 5.22 Aplicando lapply() al ejemplo propuesto anteriormente, se tiene: lapply(iris[,1:4], FUN = mean) # $Sepal.Length # [1] 5.843 # # $Sepal.Width # [1] 3.057 # # $Petal.Length # [1] 3.758 # # $Petal.Width # [1] 1.199 Siempre que se necesite deslistar una lista y extraer los elementos como un único vector, se utiliza unlist(): lista &lt;- lapply(iris[,1:4], FUN = mean) unlist(lista) # Sepal.Length Sepal.Width Petal.Length Petal.Width # 5.843 3.057 3.758 1.199 En este último ejemplo, vemos como el resultado converge con el de apply(). 5.4.3 Función tapply() Esta función es excepcional. Permite calcular el resultado de una función aplicada sobre un vector, pero muestra los resultados agrupados en base a las categorías de otro vector de misma longitud. El resultado obtenido es un vector. La estructura básica es: tapply(VECTOR_NUMÉRICO, VECTOR_DE_AGRUPAMIENTO, FUN = FUNCIÓN) Ejemplo 5.23 El siguiente código sirve para calcular el promedio por especie (grupo especificado en la columna Species), de la variable en la columna 1 de la base de datos iris: tapply(iris[,1], iris$Species, FUN = mean) # setosa versicolor virginica # 5.006 5.936 6.588 Recuerda que siempre que necesites puedes crear una función. Si unificamos el uso de lapply() para aplicar tapply() a cada elemento de columna de iris[,1:4], es necesario crear una función con tapply() dentro del cual se especifique el uso de la función mean(): lapply(iris[,1:4], FUN = function(x) tapply(x, iris$Species, mean)) # $Sepal.Length # setosa versicolor virginica # 5.006 5.936 6.588 # # $Sepal.Width # setosa versicolor virginica # 3.428 2.770 2.974 # # $Petal.Length # setosa versicolor virginica # 1.462 4.260 5.552 # # $Petal.Width # setosa versicolor virginica # 0.246 1.326 2.026 5.4.4 Función sapply() Una forma de usar funciones elemento a elemento (element-wise) en un vector sin tener que vectorizar (ver Sección 5.3), y que otorgue como resultado un vector, se obtiene con sapply(). Esta se puede aplicar sobre vectores. La estructura básica es: sapply(VECTOR, FUN = FUNCIÓN) Ejemplo 5.24 Aplicado al caso de la Sección 5.3 Operadores de Función en el que se requería aplicar primo.logic() sobre un vector numérico llamado sec para la búsqueda de números primos, se tiene: ### Recreando sec para buscar los números primos en él sec &lt;- 1:100 ### Aplicar sapply() sapply(sec, FUN = primo.logicejercicios-del-capítulo-2.html", "5.5 Ejercicios del capítulo", " 5.5 Ejercicios del capítulo Reproduce el resultado del siguiente loop for, utilizando la función replicate(): set.seed(123) lista1 &lt;- list() # Lista vacía for (i in 1:3) { # Número de iteraciones = 5 lista1[[i]] = rnorm(6, 0, 1) # Conjunto aleatorio normal para cada iteración } lista1 # [[1]] # [1] -0.56048 -0.23018 1.55871 0.07051 0.12929 1.71506 # # [[2]] # [1] 0.4609 -1.2651 -0.6869 -0.4457 1.2241 0.3598 # # [[3]] # [1] 0.4008 0.1107 -0.5558 1.7869 0.4979 -1.9666 Crea la base de datos DF numérica (código ya definido en el siguiente chunk), que tiene las dimensiones 12 (filas) x 5 (columnas). Esta base contiene valores no deseados: -999. Crea y utiliza una función llamada cambiarNA() que te permita cambiar estos valores por NA. # Base de datos DF set.seed(123) secuencia &lt;- c(seq(0.5, 7.9, length = 10), -999, 5555) DF &lt;- data.frame(replicate(5, sample(secuencia, 12, rep = TRUE))) DF &lt;- round(DF,2) # Darle nombre a sus columnas colnames(DF) &lt;- paste0(&quot;Var&quot;, 1:5) # Revisar el contenido de DF DF # Var1 Var2 Var3 Var4 Var5 # 1 2.14 3.79 7.08 7.90 6.26 # 2 2.14 2.14 2.14 5.43 5555.00 # 3 7.90 -999.00 2.97 -999.00 1.32 # 4 1.32 7.08 0.50 5555.00 0.50 # 5 4.61 5555.00 -999.00 3.79 7.08 # 6 -999.00 7.08 5.43 5.43 -999.00 # 7 3.79 7.08 3.79 3.79 7.08 # 8 2.97 2.14 5555.00 -999.00 4.61 # 9 4.61 6.26 7.90 4.61 3.79 # 10 7.08 7.90 5.43 7.08 7.08 # 11 7.90 5.43 7.08 1.32 7.90 # 12 -999.00 7.90 7.08 3.79 5555.00 Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA() para que no solo cambie -999 a NA, sino que cambie cualquier valor que tú le proporciones con un argumento. Llama a esta función cambiarNA2(). Utilízala para reemplazar los valores 5555 a NA. Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA2() de tal manera que te permita definir más de un valor (un vector numérico) como elementos a ser reemplazados por NA. Llama a esta función cambiarNA3(). Cambia por NA los valores -999 y 5555. Pista: Esta función deberá contener un loop para aplicarle la función de cambio por NA a un elemento del vector a la vez en cada iteración. Crea un loop for que itere sobre los números del 1 al 50 y calcule el cubo de cada número, de manera que los resultados se vayan guardando en un vector llamado preliminar. Luego, crea un segundo loop que te permita identificar y almacenar solamente los números menores a la mediana median() del conjunto de datos preliminar en un nuevo vector llamado final. En R ya existe una función para calcular la varianza y es var(). Pero este ejercicio se trata de poner en juego lo que aprendiste sobre programación en R. La fórmula matemática de la varianza poblacional, con denominador \\(n\\), Ecuación (5.1). Pero la función var() de R contiene la fórmula matemática para calcular la varianza de muestras, no de poblaciones enteras. La fórmula matemática de la varianza muestral que usa R tiene como denominador \\(n-1\\), Ecuación (5.2). Crea una función llamada var2() que calcule la varianza del conjunto de datos llamado vector. Finalmente, compara tus resultados con los obtenidos por var(). \\[\\begin{align} \\sigma^2 = \\frac{1}{n}*{\\displaystyle\\sum_{i=1}^{n}(x_i - \\mu)^2} \\tag{5.1} \\end{align}\\] \\[\\begin{equation} \\sigma^2 = \\frac{1}{n-1}*{\\displaystyle\\sum_{i=1}^{n}(x_i - \\mu)^2} \\tag{5.2} \\end{equation}\\] set.seed(123) vector &lt;- rnorm(50, 21, 1.6) Carga la base de datos npk. Usando una función de la familia apply(), calcula la el promedio, mediana y desviación estándar de la columna yield para cada categoría (numérica) de la columna block. Con ello, se conocerá el promedio de producción que se obtuvo en cada bloque para un estudio de mejora fitogenética: data(&quot;npk&quot;) Ejecuta el siguiente código para crear una lista llamada iris3Lista a partir de la base de datos de ejemplo iris3 (un array). Si revisas iris3Lista, notarás que continene 3 elementos, cada uno de ellos es una matriz de datos de cuatro columnas (Sepal L., Sepal W., Petal L., y Petal W.). Utilizando dos funciones de la familia apply(), calcula el promedio de cada columna de cada elemento de la lista iris3Lista. # Cargar iris3 data(&quot;iris3&quot;) # Convertirla a lista iris3Lista &lt;- list(setosa = iris3[,,1], versicolor = iris3[,,2], virginica = iris3[,,3]) "],["tidyversecap.html", "Capítulo 6 Manejo de datos con tidyverse", " Capítulo 6 Manejo de datos con tidyverse En esta capítulo brindaremos las pautas de trabajo de uno de los paquetes más importantes para análisis de datos. Esta colección de paquetes ha sido diseñado para facilitar el flujo de trabajo en estadística y análisis de datos. Tareas recurrentes que se realizan con este objetivo son cubiertas por diferentes paquetes de tidyverse: importar datos, reordarlos, transformarlos y manipularlos para que estén listos para el análisis, y visualización. Los paquetes que pertenecen al núcleo de tidyverse se activan en la sesión de RStudio tras ejecutar library(tidyverse). Estos son: readr: carga de archivos orientada a producir tibbles. dplyr: manipulación, arreglo y ordenamiento de bases de datos. ggplot2: reconocida como la mejor librería de graficación estadística. tibble: modernización de las capacidades de un data frame. tidyr: complemento de dplyr limpieza de datos. purrr: trabajo mejorado en programación funcional. stringr: trabajo con cadenas de texto de una manera cohesiva y simple. forcats: manejo de variables categóricas (factores). Para más detalles, visita la página web de tidyverse. Figura 6.1: Librerías de tidyverse y asociadas. Se ha creado una masiva cantidad de librerías que mejoran las particularidades de tidyverse para ofrecer una experiencia de usuario más completa en diferentes áreas:carga de datos, reordenamiento, transformación, programación, manipulación de datos, graficación, modelamiento y publicación. Más allá de los ocho paquetes núcleo de tidyverse, se ha desarrollado una gran batería de paquetes asociados, diseñados en el entorno de la sintaxis especial de esta librería. El ecosistema de tidyverse incluye librerías para la carga de bases de datos provenientes de softwares estadísticos (e.g., SPSS con haven), manejo de variables especiales (e.g., datos de fechas con lubridate), modelamiento estadístico (con tidymodels) y revisión de modelos (con broom). Otros paquetes se han desarrollado para cubrir funciones que interactúen en las pipelines (pipe original %&gt;% del paquete magrittr), para crear código más legible (e.g., funciones de rstatix). Figura 6.2: Ejemplo del uso de pipe (%&gt;%) en una pipeline para trabajar con tidyverse. Activación de tidyverse Para instalar tidyverse en tu equipo, ejecuta: install.packages(&quot;tidyverse&quot;) Para activar tidyverse, ejecuta: library(tidyverse) Resolver conflictos Tras activar tidyverse, aparecerán en la consola los paquetes nucleo que estan siendo activados (Attaching packages) y los conflictos que tienen con otras librerías (Conflicts) (Figura 6.3). Un conflicto significa que dentro de la librería activada (tidyverse en este caso) existen una o más funciones que tienen el mismo nombre que una función alojada en otra librería actualmente activa en la sesión de RStudio. El texto dplyr::filter() masks stats::filter() indica que la función filter() de la librería dplyr es idéntica en nombre a filter() de la librería stats. Figura 6.3: Vista previa de los conflictos detectados en consola tras la activación de la librería tidyverse. Para resolver el conflicto, cada vez que se use una función conflictiva se debe especificar la librería de origen con el operador ::; el código debe ser como el siguiente: dplyr::filter(). R reconocerá que se está utilizando la función filter() del paquete dplyr. "],["datosordenados.html", "6.1 Datos ordenados (tidy)", " 6.1 Datos ordenados (tidy) Un gran porcentaje del tiempo que se suele emplear en el análisis de datos en R está dedicado a manipular objetos para su limpieza y preparación. Este lenguaje de programación necesita datos ordenados (del inglés tidy) para que su sintaxis de código funcione sin errores. Para R, datos ordenados implica tener objetos tabulares (2D) en los que: Cada fila contenga información de una sola observación o unidad muestral (e.g., parcela, punto, transecto, paciente, placa, o el nombre que reciba su unidad muestral). Cada columnas contenga una única variable de medición y esta sea independiente de las demás. Figura 6.4: Datos ordenados correctamente para analizar en R El estructurar las bases de datos de esta manera se puede hacer fuera del entorno de R, utilizando el gestor de hojas de cálculo de tu preferencia. 6.1.1 ¿Qué evitar para tener datos tidy? En principio, recordando que cada columna es una variable en las que cada fila solo podrá tener un solo valor, se deben evitar las siguientes situaciones: Figura 6.5: Evitar poner encabezados (texto en negritas), comentarios o usar columnas que no contengan datos (texto resaltado). Celdas fusionadas (texto en rojo) generan problemas porque al cargarse en RStudio, las celdas se desagregan y dejan espacios en blanco. Figura 6.6: Evitar colocar más de una variable de medición en una columna. En este caso, la columna Status contiene información de estado, categoría y nivel. Estas deben ser tratadas como variables independientes unas de otras. Figura 6.7: Evitar nombres complejos como nombre de variable (columna). Al cargar en R, dependiendo de la función, los espacios en blanco entre palabras se autocorregirán por . o _. Es mejor modificar estos nombres para simplificarlos, acortarlos y evitar espacios en blanco. Figura 6.8: Si una variable contiene categorías, es probable que en R la quieras tratar como factor para análisis o graficación. Evita nombres de categorías excesivamente largos o con símbolos extraños. Puedes asegurarte en convertirlos a categorías numéricas (1, 2, 3, etc.). Como dato adicional. Trata de utilizar una sola hoja de cálculo por archivo. Facilitará la carga de datos. 6.1.2 ¿Cómo se debe ver una base tidy? Con todas las consideraciones mencionadas, una base de datos perfectamente tidy se vería: Figura 6.9: Tabla de datos ordenada. Vista de hoja de cálculo. Asumiendo que se está utilizando proyectos de RStudio, y que la base de datos WHO_tidy.xlsx existe dentro de dicha carpeta, el código para cargar la base datos en R es: WHO &lt;- openxlsx::read.xlsx(&quot;WHO_tidy.xlsx&quot;) Figura 6.10: Tabla perfectamente ordenada vista en RStudio. "],["introducción-a-dplyr-y-tidyr.html", "6.2 Introducción a dplyr y tidyr", " 6.2 Introducción a dplyr y tidyr En el universo de tidyverse existen dos asombrosa librerías para realizar limpieza y manejo de datos: dplyr y tidyr. De manera sencilla, las funciones más útiles que contienen son: Tabla 2.2: Funciones útiles para la limpieza y manejo de datos con tidyr. Función Descripción pivot_longer() Pivotar una tabla de columnas a filas (hacia tabla larga) pivot_wider() Pivotar una tabla de filas de columnas (hacia tabla ancha) gather() Permite convertir una tabla ancha a una tabla larga spread() Permite convertir una tabla larga a una tabla ancha unite() Permite unir el contenido textual varias columnas en una sola. separate() Permite separar el contenido textual de una columna en varias columnas. drop_na() Elimina las filas que contengan NA en una tabla. Tabla 2.3: Funciones útiles para la limpieza y manejo de datos con dplyr. Función Descripción filter() Filtra filas en base a criterios lógicos. select() Familia de funciones que permite seleccionar columnas por su nombre o indexación. group_by() Agrupa virtualmente las filas en base a una columna categórica. arrange() Reordena verticalmente columnas, sea de menor a mayor o de A a Z. arrange(desc()) Reordena verticalmente columnas, sea de mayor a menor o de Z a A. count() Cuenta las veces que cada valor se repite en una columna. mutate() Familia de funciones que permite crear nuevas columnas o modificar las existentes. summarize() Familia de funcione generan resúmenes estadísticos. anti_join() Función para fusionar tablas A y B, devuelve las filas de A que no existen B. semi_join() Función para fusionar tablas A y B, devuelve las filas que existen en A y B. Puede duplicar filas de A. inner_join() Función para fusionar tablas A y B, devuelve las filas que existen en A y B. No duplica filas de A. full_join() Función para fusionar tablas A y B, devuelve todas las filas de A y B. right_join() Función para fusionar tablas A y B, devuelve A más las filas de B que existan en A. left_join() Función para fusionar tablas A y B, devuelve B más las filas de A que existan en B. "],["pipelines-con-tidyverse.html", "6.3 Pipelines con tidyverse", " 6.3 Pipelines con tidyverse Cuando se inicia en el lenguaje de R, la manera intuitiva de aplicar secuencialmente varias funciones a una base de datos puede lucir así: Res1 &lt;- Funcion1(BASE_DE_DATOS) Res1 &lt;- Funcion2(Res1) Res3 &lt;- Funcion3(Res2) Pero existe un concepto para explorar en este contexto: anidar variables. Implica colocar funciones una dentro de otra de manera que la aplicación se hace de adentro hacia afuera: sobre BASE_DE_DATOS se aplicará Funcion1(); al resultado de ella, se aplicará Funcion2(); y al siguiente resultado, Funcion3(). Funcion3(Funcion2(Funcion1(BASE_DE_DATOS))) Los programadores de la librería magrittr diseñaron un operador llamado pipe, en Español tubo, %&gt;%. Este permite ir pasando el resultado de una función como primer argumento (o argumento de data) de la siguiente función. Este sencillo operador mejora enormemente la lectura y compresión del código, haciéndolo incluso más elegante. Con pipe, el ejemplo secuencial explicado arriba se convierte en: # Pipeline BASE_DE_DATOS %&gt;% Funcion1() %&gt;% Funcion2() %&gt;% Funcion3() La gran ventaja es que tidyverse ha sido diseñado en torno a la creación de pipelines, en Español tuberías. Siendo que todo se simplifica para su uso con estas librerías y otras que sean consideradas pipe-friendly, como rstatix. A lo largo del capítulo, se irá aplicando el concepto de tuberías para que te familiarices con su uso. Como un ejemplo definitivo, así es como se crean pipelines que generen gráficos con ggplot2 y dplyr: # Cargar la base de datos Boston library(MASS) data(&quot;Boston&quot;) # Pipeline Boston %&gt;% filter(rad %in% 1:3 &amp; zn != 0) %&gt;% group_by(tax) %&gt;% summarise(age_promedio = mean(age), rad = unique(rad)) %&gt;% mutate(tax = paste0(&quot;N_&quot;,tax), tax = as.factor(tax), rad = as.factor(rad)) %&gt;% ggplot(aes(x=reorder(tax, age_promedio), y=age_promedio, fill=rad))+ geom_bar(stat=&quot;identity&quot;)+ geom_text(aes(label=round(age_promedio,2)), color =&quot;white&quot;, hjust = 1.1)+ scale_y_discrete(expand = c(0,0,0,10))+ scale_fill_manual(values = colorPal)+ labs(x=&quot;Nivel de Tax&quot;, y=&quot;Edad promedio&quot;, fill=&quot;Grupo&quot;, title = &quot;Edad promedio por nivel de Tax&quot;, subtitle = &quot;Datos obtenidos de Boston (1969)&quot;)+ coord_flip()+ theme_minimal()+ theme(legend.position = &quot;bottom&quot;, axis.ticks.length.y = unit(0, &quot;cm&quot;), legend.key.height = unit(0.2,&quot;cm&quot;), legend.key.width = unit(1.5, &quot;cm&quot;), title = element_text(face = 2)) Figura 6.11: Ejemplo de código con ggplot2 y dplyr utilizando una pipeline. "],["tablas-anchas-y-largas-con-tidyr.html", "6.4 Tablas anchas y largas con tidyr", " 6.4 Tablas anchas y largas con tidyr En general, mucho de lo que se puede hacer en R necesita de tablas anchas. Este es el nombre que reciben las tablas que cumplen con ser tidy (ordenadas, revisa la Sección 6.1 Datos ordenados): cada columna es una variable. cada fila es una observación. Figura 6.12: Comparativa entre tabla ancha y larga, y las funciones para pasar de una estructura a otra. 6.4.1 De ancha a larga En ciertas ocasiones, trabajar con tablas largas es lo que necesitamos para analizar o generar gráficos con los datos. La función gather() de la librería tidyr permite convertir una tabla ancha en larga, apilando dos o más variables en tan solo dos columnas: una de etiquetas (argumento key) y una de valores o contenidos de las celdas (argumento value). La estructura básica es: gather(DF, # base de datos key = &quot;COL1&quot;, # nombre de la futura columna de etiquetas value = &quot;COL2&quot;, # nombre de la futura columna de valores COL3:COL4) # columnas a apilar (e.g, posiciones 3:4) Ejemplo 6.1 Considera la tabla mice2: # install.packages(&quot;datarium&quot;) library(datarium) data(&quot;mice2&quot;) # Ver el contenido mice2 # id before after # 1 1 187.2 429.5 # 2 2 194.2 404.4 # 3 3 231.7 405.6 # 4 4 200.5 397.2 # 5 5 201.7 377.9 # 6 6 235.0 445.8 # 7 7 208.7 408.4 # 8 8 172.4 337.0 # 9 9 184.6 414.3 # 10 10 189.6 380.3 mice2 es una tabla ancha. Para apilar sus columnas before y after en una nueva columna llamada Tiempo, mientras que sus valores se apilan en Valores, se tiene: # Utilizar gather() para apilar las columnas 2 y 3 # en las columnas Tiempo (etiquetas) y Valor (valores) ratones_larga &lt;- gather(mice2, key=&quot;Tiempo&quot;, value=&quot;Valor&quot;, 2:3) # Ver el contenido ratones_larga # id Tiempo Valor # 1 1 before 187.2 # 2 2 before 194.2 # 3 3 before 231.7 # 4 4 before 200.5 # 5 5 before 201.7 # 6 6 before 235.0 # 7 7 before 208.7 # 8 8 before 172.4 # 9 9 before 184.6 # 10 10 before 189.6 # 11 1 after 429.5 # 12 2 after 404.4 # 13 3 after 405.6 # 14 4 after 397.2 # 15 5 after 377.9 # 16 6 after 445.8 # 17 7 after 408.4 # 18 8 after 337.0 # 19 9 after 414.3 # 20 10 after 380.3 6.4.2 De larga a ancha Apilar variables en tablas largas es muy frecuente en procesos de toma de datos, quizá por facilidad o rapidez en el almacenamiento de los mismos durante los estudios. La función spread() permite dispersar datos partiendo de dos columnas: una de etiquetas apiladas (key) y otra de valores apilados (values), hacia las columnas que sean necesarias (igual a la cantidad de niveles en key). La estructura básica es: spread(DF, # base de datos key = COL1, # columna de etiquetas value = COL2) # columna de valores Ejemplo 6.2 Considera la tabla ratones_larga obtenida en el ejemplo anterior: # Utilizar gather() para apilar las columnas 2 y 3 # en las columnas Tiempo (etiquetas) y Valor (valores) spread(ratones_larga, key=Tiempo, value=Valor) # id after before # 1 1 429.5 187.2 # 2 2 404.4 194.2 # 3 3 405.6 231.7 # 4 4 397.2 200.5 # 5 5 377.9 201.7 # 6 6 445.8 235.0 # 7 7 408.4 208.7 # 8 8 337.0 172.4 # 9 9 414.3 184.6 # 10 10 380.3 189.6 "],["filtrado.html", "6.5 Filtrado", " 6.5 Filtrado Conocer cómo filtrar correctamente una base de datos es fundamental en el manejo de bases de datos. Implica escoger del total de filas solo aquellas que cumplan con ciertos criterios lógicos. 6.5.1 Procedimiento de filtrado Primer paso: saber qué se va a filtrar. Por ejemplo: en la base de datos DF se desea filtrar solo aquellas filas que en la columna A tengan valores mayores iguales a 5.32. Segundo paso: formalizar la petición en sintaxis de R, utilizando operadores lógicos y/o relacionales. Para escribir en R todos los valores de un vector A mayor igual a 5.32, colocamos: A &gt;= 5.32 Tercer paso: incluir esta petición lógica en la función de filtrado de dplyr: DF %&gt;% filter(A &gt;= 5.32) 6.5.2 Aplicaciones de filtrado Considera la base de datos WHO_tidy.xlsx: WHO &lt;- openxlsx::read.xlsx(&quot;WHO_tidy.xlsx&quot;) Ejemplo 6.3 Filtrar únicamente las filas de la categoría Category B columna Category. ¿Cuál es el porcentaje de filas que tiene esta nueva base de datos respecto a la original? # Número de filas de WHO nrow(WHO) # [1] 2938 # Filtrado WHO1 &lt;- WHO %&gt;% filter(Category == &quot;Category B&quot;) # Número de filas de WHO1 nrow(WHO1) # [1] 963 # Porcentaje de filas en WHO1 respecto a WHO (nrow(WHO1) / nrow(WHO)) * 100 # [1] 32.78 Para incorporar más de una condición relacional, utiliza los operadores lógicos y &amp; u o |. Ejemplo 6.4 Filtrar únicamente las filas con cumplan con tener Category B en la columna Category y Level 1 en la columna Level. Calcular el número de filas de la tabla: WHO %&gt;% filter(Category == &quot;Category B&quot; &amp; Level == &quot;Level 1&quot;) %&gt;% nrow() # [1] 309 Cuando se necesita filtrar más de un nivel para una columna, se utiliza el operador %in% (ver sección 2.3 Operadores lógicos y relacionales). Cuando se deba filtrar todos los niveles excepto uno, es más sencillo el proceso utilizando el operador !=. Ejemplo 6.5 Filtrar las categorías Category A y Category B en la columna Category, además de y Level 1 en la columna Level. Calcular el número de filas de la tabla: WHO %&gt;% filter(Category %in% c(&quot;Category A&quot;, &quot;Category B&quot;) &amp; Level == &quot;Level 1&quot;) %&gt;% nrow() # [1] 645 Como era de esperar, ahora hay más filas en la tabla filtrada. Ejemplo 6.6 Considera adicionar una tercer condición lógica al ejemplo anterior. Esta vez, se requiere filtrar aquellas filas que con valores de expectativa de vida (columna Life_exp) mayor a 60: WHO %&gt;% filter(Category %in% c(&quot;Category A&quot;, &quot;Category B&quot;) &amp; Level == &quot;Level 1&quot; &amp; Life_exp &gt; 80) %&gt;% nrow() # [1] 49 Ejemplo 6.7 Aprovechemos a adicionar una cuarta condición de filtrado: años (columna Year) 2013 a 2015. WHO %&gt;% filter(Category %in% c(&quot;Category A&quot;, &quot;Category B&quot;)) %&gt;% filter(Level == &quot;Level 1&quot; &amp; Life_exp &gt; 80) %&gt;% filter(Year %in% 2013:2015) %&gt;% nrow() # [1] 18 "],["selección.html", "6.6 Selección", " 6.6 Selección Al igual que con el filtrado de filas, una sola función para seleccionar columnas, select(). La función devuelve solo las columnas seleccionadas, ya sea utilizando sus nombres o su indexación de posición. El orden en el que coloques las columnas dentro de la función será el orden en el que aparecerán en el resultado final. A partir de la reciente versión de R 4.1.3., en algunos equipos es necesario colocar dplyr::select() en lugar de simplemente usar select(). Si en tu equipo funciona directamente select(), no te preocupes en mencionar de qué paquete procede. Ejemplo 6.8 Considerando la base de datos WHO, seleccionar las columnas Country, Year, Polio, Diph, utilizando posición y nombre. Mostrar las primeras 6 filas. # Por posición WHO %&gt;% dplyr::select(1,2,17,18) %&gt;% head() # Country Year Polio Tot_exp # 1 Afghanistan 2015 6 8.16 # 2 Afghanistan 2014 58 8.18 # 3 Afghanistan 2013 62 8.13 # 4 Afghanistan 2012 67 8.52 # 5 Afghanistan 2011 68 7.87 # 6 Afghanistan 2010 66 9.20 # Por nombre WHO %&gt;% dplyr::select(Country, Year, Polio, Diph) %&gt;% head() # Country Year Polio Diph # 1 Afghanistan 2015 6 65 # 2 Afghanistan 2014 58 62 # 3 Afghanistan 2013 62 64 # 4 Afghanistan 2012 67 67 # 5 Afghanistan 2011 68 68 # 6 Afghanistan 2010 66 66 Lo más complicado de indexar por posición es justamente saber el número exacto de cada columna. En cualquiera de los casos, revisar los nombres de columnas se puede realizar con names(): names(WHO) # [1] &quot;Country&quot; &quot;Year&quot; &quot;Status1&quot; &quot;Category&quot; &quot;Level&quot; &quot;Status2&quot; # [7] &quot;St2_categ&quot; &quot;Life_exp&quot; &quot;Ad_mort&quot; &quot;Inf_deaths&quot; &quot;Alcohol&quot; &quot;Per_exp&quot; # [13] &quot;Hep_B&quot; &quot;Measles&quot; &quot;BMI&quot; &quot;U5Y&quot; &quot;Polio&quot; &quot;Tot_exp&quot; # [19] &quot;Diph&quot; &quot;AIDS&quot; &quot;GDP&quot; &quot;Pop&quot; &quot;Thin1_19&quot; &quot;Thin5_9&quot; # [25] &quot;Income&quot; &quot;Schooling&quot; 6.6.1 Seleccionar con funciones especiales Para aprovechar al máximo la función select(), se puede incluir en ella funciones de selección específicas con funciones de ayuda. Tabla 6.1: Funciones de selección específicas utilizando funciones de ayuda Función Descripción select(DF, contains(\".\")) Selecciona las columnas cuyo nombre contengan ese carácter. select(DF, num_range(\"a\", 1:5)) Selecciona las columnas a1, a2, a3, a4, y a5. select(DF, starts_with(\"XYZ\")) Selecciona las columnas cuyo nombre comience con XYZ. select(DF, ends_with(\"XYZ\")) Selecciona las columnas cuyo nombre termina en XYZ. Ejemplo 6.9 Seleccionar todas las columnas que contengan el carácter _. Mostrar las primeras 6 filas. WHO %&gt;% dplyr::select(contains(&quot;_&quot;)) %&gt;% head() # St2_categ Life_exp Ad_mort Inf_deaths Per_exp Hep_B Tot_exp Thin1_19 Thin5_9 # 1 1 65.0 263 62 71.280 65 8.16 17.2 17.3 # 2 2 59.9 271 64 73.524 62 8.18 17.5 17.5 # 3 2 59.9 268 66 73.219 64 8.13 17.7 17.7 # 4 1 59.5 272 69 78.184 67 8.52 17.9 18.0 # 5 2 59.2 275 71 7.097 68 7.87 18.2 18.2 # 6 1 58.8 279 74 79.679 66 9.20 18.4 18.4 La función num_range(\"TEXTO\", RANGO) crea un vector de caracteres de la misma manera que lo hace paste0(). La diferencia es que num_range() solo funciona dentro de select(). # Resultado de paste0() idéntico a lo que se obtendría con num_range() paste0(&quot;Status&quot;, 1:5) # [1] &quot;Status1&quot; &quot;Status2&quot; &quot;Status3&quot; &quot;Status4&quot; &quot;Status5&quot; Ejemplo 6.10 Seleccionar todas las columnas Status1 y Status2 con la función num_range(). Mostrar las primeras 6 filas. # Con num_range() WHO %&gt;% dplyr::select(num_range(&quot;Status&quot;, 1:2)) %&gt;% head() # Status1 Status2 # 1 Developing Developing in an inconsisten rate of increase # 2 Developing No deteminated by the OMS, but is OK # 3 Developing No deteminated by the OMS, but is OK # 4 Developing Developing in an inconsisten rate of increase # 5 Developing No deteminated by the OMS, but is OK # 6 Developing Developing in an inconsisten rate of increase # Con paste0() WHO %&gt;% dplyr::select(paste0(&quot;Status&quot;, 1:2)) %&gt;% head() # Status1 Status2 # 1 Developing Developing in an inconsisten rate of increase # 2 Developing No deteminated by the OMS, but is OK # 3 Developing No deteminated by the OMS, but is OK # 4 Developing Developing in an inconsisten rate of increase # 5 Developing No deteminated by the OMS, but is OK # 6 Developing Developing in an inconsisten rate of increase Las dos funciones que se verán a continuación permiten seleccionar utilizando una o varias letras iniciales o finales de cada nombre. La búsqueda no es sensible a si la letra es mayúscula o minúscula. Ejemplo 6.11 Seleccionar las columnas cuyo nombre comience con la letra S. Mostrar las primeras 6 filas. # Con num_range() WHO %&gt;% dplyr::select(starts_with(&quot;S&quot;)) %&gt;% head() # Status1 Status2 St2_categ Schooling # 1 Developing Developing in an inconsisten rate of increase 1 10.1 # 2 Developing No deteminated by the OMS, but is OK 2 10.0 # 3 Developing No deteminated by the OMS, but is OK 2 9.9 # 4 Developing Developing in an inconsisten rate of increase 1 9.8 # 5 Developing No deteminated by the OMS, but is OK 2 9.5 # 6 Developing Developing in an inconsisten rate of increase 1 9.2 Ejemplo 6.12 Seleccionar las columnas cuyo nombre termine con la letra o. Mostrar las primeras 6 filas. # Con num_range() WHO %&gt;% dplyr::select(ends_with(&quot;o&quot;)) %&gt;% head() # Polio # 1 6 # 2 58 # 3 62 # 4 67 # 5 68 # 6 66 "],["agrupamiento.html", "6.7 Agrupamiento", " 6.7 Agrupamiento La función group_by() genera agrupamientos virtuales. Divide a una base de datos en función de una columna categórica (factor), pero esta división no se almacena como tal. Si se escogiera como columna de agrupamiento un factor con tres niveles, no esperes ver como resultado tres tablas, cada una con las filas de cada nivel. Este agrupamiento virtual solo permite que las siguientes funciones de la pipeline traten por separado a cada nivel. Esto es muy útil cuando se debe generar resúmenes estadísticos, por ejemplo promedio y desviación estándar, de variables separado por niveles de un factor en la tabla. En el siguiente ejemplo solo veremos la agrupación, visible como un dato extra mostrado en consola impreso encima la tabla. Más adelante se usará agrupamiento dentro de una pipeline más realista. Es importante desagrupar una vez que se acabaron los cálculos hechos con la pipeline. El no colocar ungroup() al final producirá errores cuando más adelante se usa la base de datos resultante en otras pipelines. Nunca dejes un group_by() sin desagrupar al final. Ejemplo 6.13 Seleccionar las columnas Country, Year, Polio, Diph, y agrupar la base de datos WHO por año (columna Year). Mostrar las primeras 6 filas. # Para este ejemplo no usaremos ungroup() # con la finalidad de mostrar el resultado # textual que aparece sobre una tabla agrupada # indicando los grupos &gt;&gt; Groups: Year [6] WHO %&gt;% dplyr::select(Country, Year, Polio, Diph) %&gt;% group_by(Year) %&gt;% head() # # A tibble: 6 x 4 # # Groups: Year [6] # Country Year Polio Diph # &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 Afghanistan 2015 6 65 # 2 Afghanistan 2014 58 62 # 3 Afghanistan 2013 62 64 # 4 Afghanistan 2012 67 67 # 5 Afghanistan 2011 68 68 # 6 Afghanistan 2010 66 66 Si estas seleccionando y luego agrupando, asegúrate de que la columna de agrupamiento esté dentro de las seleccionadas. La función antagonista de group_by() es ungroup(). "],["conteo.html", "6.8 Conteo", " 6.8 Conteo La función de conteo es muy sencilla. Utilizar count() brinda el número de veces que cada nivel de una columna del tipo factor aparece en la misma. Ejemplo 6.14 Considerando la base de datos WHO, filtrar la base para que aparezcan solo las filas que tengan valores mayor igual a 80 de expectativa de vida (columna Life_exp). Realizar un conteo de la veces que cada año (columna Year) aparece en la base de datos. Año es una variable numérica de valores enteros, y puede ser tratada como factor. WHO %&gt;% filter(Life_exp &gt;= 80) %&gt;% count(Year) # Year n # 1 2000 1 # 2 2001 3 # 3 2002 4 # 4 2003 5 # 5 2004 10 # 6 2005 12 # 7 2006 12 # 8 2007 15 # 9 2008 18 # 10 2009 21 # 11 2010 23 # 12 2011 25 # 13 2012 28 # 14 2013 29 # 15 2014 29 # 16 2015 29 Es notable, ahora, que con el pasar de los años la cantidad de filas con expectativa mayor igual a 80 años ha ido incrementando. Es una respuesta a que la calidad de vida ha mejorado en el mundo. "],["resúmenes-estadísticos.html", "6.9 Resúmenes estadísticos", " 6.9 Resúmenes estadísticos Realizar resúmenes estadísticos es uno de los grandes motivos de aprender a trabajar con pipelines. Puede aplicarse promedio mean(), mediana median(), desviación estándar sd(), varianza var(), suma sum(), mínimo min(), máximo max(), además de cualquier función existente o creada siempre y cuando el resultado de dichas funciones sea un único valor (es decir, un vector de un elemento). El resultado final de cualquier función de la familia de summarise() es una tabla conteniendo las columnas que se solicitaron como resumen estadístico. La estructura base es: BASE_DE_DATOS %&gt;% ... %&gt;% summarise(COLUMNA_NUEVA = FUNCION_ESTADÍSTICA(COLUMNA_ANTIGUA)) Las funciones estadísticas como mean(), median() y las demás mencionadas arriba, tienen problemas lidiando con valores NA. Si se calcula el promedio de una columna que se conoce contiene NA, se debe colocar el argumento na.rm = TRUE dentro de cada función para hacer esta obvie los NA y calcule el estimados estadístico deseado. Por ejemplo mean(vector, na.rm = TRUE). Ejemplo 6.15 Considerando la base de datos WHO, calcular el promedio de la columna Life_exp, la mediana de la columna Polio, y el promedio y desviación estándar de GDP. Agrupa previamente por año (columna Year). # Sin consideraro los NA WHO %&gt;% group_by(Year) %&gt;% summarise(Promed = mean(Life_exp), Pol = median(Polio), GDP_prom = mean(GDP), GDP_sd = sd(GDP)) %&gt;% ungroup() # # A tibble: 16 x 5 # Year Promed Pol GDP_prom GDP_sd # &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 2000 66.8 NA NA NA # 2 2001 67.1 NA NA NA # 3 2002 67.4 NA NA NA # 4 2003 67.4 NA NA NA # 5 2004 67.6 NA NA NA # 6 2005 68.2 NA NA NA # # ... with 10 more rows # Especificando el argumento na.rm = TRUE # para obviar los NA de cada columna WHO %&gt;% group_by(Year) %&gt;% summarise(Promed = mean(Life_exp, na.rm = TRUE), Pol = median(Polio, na.rm = TRUE), GDP_prom = mean(GDP, na.rm = TRUE), GDP_sd = sd(GDP, na.rm = TRUE)) %&gt;% ungroup() # # A tibble: 16 x 5 # Year Promed Pol GDP_prom GDP_sd # &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 2000 66.8 88 4709. 9182. # 2 2001 67.1 89 4855. 8892. # 3 2002 67.4 91 4599. 8541. # 4 2003 67.4 91 4775. 9144. # 5 2004 67.6 91 7056. 13504. # 6 2005 68.2 93 7250. 13107. # # ... with 10 more rows 6.9.1 Otras funciones de la familia summarise() En dplyr existen algunas funciones que tienen versiones similares a ellas. Consideremos esta agrupaciones como familias de funciones. En estas familias, como la de summarise(), encontrarás funciones de aplicación específica: Tabla 3.3: Funciones de la familia summarise() Función Descripción summarise() Permite realizar resúmenes estadísticos especificados columna a columna. summarise_all() Permite realizar resúmenes estadísticos aplicando una o más funciones a todas las columnas de la tabla. summarise_at() Permite realizar resúmenes estadísticos aplicando una o más funciones a un grupo de columnas de la tabla. summarise_if() Permite realizar resúmenes estadísticos aplicando una o más funciones si se cumple una condición lógica definida. summarise_each() Idéntica a summarise_all() es considerada obsoleta (deprecated). Variantes Algunas funciones tienes variantes escritas con _ al final o con la palabra summarize (con z), hacen lo mismo que las originales sin _ o con summarise (con s). 6.9.1.1 summarise_all() Aplicará la o las funciones especificadas a todas las columnas. Si alguna columna no cumple con lo necesario para se analizada (por ejemplo: intentar obtener el promedio de una columna categórica), se genera error. Asegúrate de que la tabla por completo es analizable, o utiliza la función de dplyr select() para seleccionar las columnas de trabajo antes de aplicar summarise_all(). La estructura básica es: BASE_DE_DATOS %&gt;% summarise_all(.funs = lst(LISTA_DE_FUNCIONES)) Ejemplo 6.16 Obtener el promedio, y varianza de las columnas GDP, Life_exp y Pop por país de Colombia, México y Perú (recuerda que la base tiene estos nombres en inglés). WHO %&gt;% filter(Country %in% c(&quot;Colombia&quot;,&quot;Mexico&quot;,&quot;Peru&quot;)) %&gt;% group_by(Country) %&gt;% dplyr::select(GDP, Life_exp, Pop) %&gt;% summarise_all(.funs = lst(mean, var), na.rm=TRUE)%&gt;% ungroup() # Adding missing grouping variables: `Country` # # A tibble: 3 x 7 # Country GDP_mean Life_exp_mean Pop_mean GDP_var Life_exp_var Pop_var # &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 Colombia 3322. 73.3 31767433. 7555129. 1.16 4.08e14 # 2 Mexico 5179. 75.7 27585265. 15368266. 0.386 2.02e15 # 3 Peru 2929. 73.7 16854322. 5660203. 1.64 1.77e14 6.9.1.2 summarise_at() Otra función muy útil al momento de aplicar diferentes funciones estadísticas a varias columnas es summarise_at(). Esta función permite seleccionar las columnas de trabajo, como si incorporara su propia función select(). La estructura básica es: BASE_DE_DATOS %&gt;% summarise_at(.vars = vars(COLUMNAS_DE_TRABAJO), .funs = lst(LISTA_DE_FUNCIONES)) Ejemplo 6.17 Siguiendo el ejemplo @ref:(exm:summariseall), recrear el resultado utilizando summarise_at(): WHO %&gt;% filter(Country %in% c(&quot;Colombia&quot;,&quot;Mexico&quot;,&quot;Peru&quot;)) %&gt;% group_by(Country) %&gt;% summarise_at(.vars = vars(GDP, Life_exp, Pop), .funs = lst(mean, median, sd), na.rm=TRUE)%&gt;% ungroup() # # A tibble: 3 x 10 # Country GDP_mean Life_exp_mean Pop_mean GDP_median Life_exp_median Pop_median # &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 Colombia 3322. 73.3 31767433. 2434. 73.5 43004898. # 2 Mexico 5179. 75.7 27585265. 6976. 75.6 11460708. # 3 Peru 2929. 73.7 16854322. 2601. 73.8 26088121 # # ... with 3 more variables: GDP_sd &lt;dbl&gt;, Life_exp_sd &lt;dbl&gt;, Pop_sd &lt;dbl&gt; 6.9.1.3 summarise_if() Aplicar condicionales para seleccionar columnas es muy útil. Esta función permite indicar una condición lógica con funciones de la familia is(), como is.numeric() que haría la petición de seleccionar solo las funciones numéricas y sobre todas ellas aplicar alguna función estadística. La estructura básica es: BASE_DE_DATOS %&gt;% summarise_if(.predicate = FUNCIÓN_IS_SIN_PARÉNTESIS, .funs = lst(LISTA_DE_FUNCIONES)) Ejemplo 6.18 Realizar el promedio y desviación estándar de las columnas numéricas que existan entre las siguientes: GDP, Life_exp, Pop, Status1, Status2; agrupando por país para Colombia, México y Perú (recuerda que la base tiene estos nombres en inglés): WHO %&gt;% filter(Country %in% c(&quot;Colombia&quot;,&quot;Mexico&quot;,&quot;Peru&quot;)) %&gt;% group_by(Country) %&gt;% dplyr::select(GDP, Life_exp, Pop, Status1, Status2) %&gt;% summarise_if(is.numeric, .funs = lst(mean, sd), na.rm=TRUE)%&gt;% ungroup() "],["reordenamiento.html", "6.10 Reordenamiento", " 6.10 Reordenamiento El concepto detrás de la función arrange() es el de brindarle un orden numérico (menor a mayor) o alfabético (A a la Z) a una columna. Si se desea el orden inverso, sea numérico o alfabético, utiliza arrange(desc()). Ejemplo 6.19 Filtrar las filas con GDP mayor a 70000 y menores de 100000, agrupar por país (columna Country) y obtener el promedio y desviación estándar de GDP. Reordenar de mayor a menor en base al promedio. WHO %&gt;% filter(GDP &gt;= 70000 &amp; GDP &lt;= 100000) %&gt;% group_by(Country) %&gt;% summarise_at(.vars = vars(GDP), .funs = lst(mean, sd), na.rm = TRUE) %&gt;% arrange(desc(mean)) # # A tibble: 4 x 3 # Country mean sd # &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 Qatar 86083. 2344. # 2 Luxembourg 82728. 9916. # 3 Norway 82297. 7197. # 4 Switzerland 81339. 6536. "],["creación-y-transformación-de-columnas.html", "6.11 Creación y transformación de columnas", " 6.11 Creación y transformación de columnas Las funciones de la familia mutate() simplifican enormemente el proceso de crear columnas en la base de datos. Algo muy interesante es que es posible aplicar una transformación a una columna que se está creando o modificando dentro de la misma función de mutate() y transmute() (revisa la COL_NUEVA4 en el siguiente código). La estructura base es: # Usando mutate() BASE_DE_DATOS %&gt;% ... %&gt;% mutate(COL_NUEVA1 = FUNCION_DE_TRANSFORMACION(COL_ANTIGUA1), COL_NUEVA2 = FUNCION_DE_TRANSFORMACION(COL_ANTIGUA2), COL_NUEVA3 = FUNCION_DE_TRANSFORMACION(COL_ANTIGUA3), COL_NUEVA4 = FUNCION_DE_TRANSFORMACION(COL_NUEVA1)) # Usando transmute() BASE_DE_DATOS %&gt;% ... %&gt;% transmute(COL_NUEVA1 = FUNCION_DE_TRANSFORMACION(COL_ANTIGUA1), COL_NUEVA2 = FUNCION_DE_TRANSFORMACION(COL_ANTIGUA2), COL_NUEVA3 = FUNCION_DE_TRANSFORMACION(COL_ANTIGUA3), COL_NUEVA4 = FUNCION_DE_TRANSFORMACION(COL_NUEVA1)) El resultado de transformación con transmute() es el mismo, excepto que las nuevas columnas aparecerán solitarias en su propia tabla, separadas de la original. Con mutate(), las nuevas columnas aparecen adjuntas a la derecha de la última columna dentro de la tabla original. Ejemplo 6.16 Se pretende ejemplificar un nuevo índice de la relación Poliomielitis - Sarampión utilizando la fórmula: \\[MP = 0.00001*\\frac{\\sqrt{\\text{#Casos de Sarampión}}}{0.39*\\text{#Casos de Polio}^2} \\] Crear la nueva columna MP operando las columnas Measles para Sarampión y Polio para Poliomielitis. Por motivos del ejemplo, seleccionar previamente únicamente las columnas de trabajo, junto con Country y Year para identificar en qué países y qué años se tuvo un mayor valor del índice. Reordenar la columna MP de modo descendente y mostrar las primeras 10 filas. # con mutate() WHO %&gt;% dplyr::select(Measles, Polio, Country, Year) %&gt;% mutate(MP = (0.00001*(sqrt(Measles) / 0.39 * Polio^2))) %&gt;% arrange(desc(MP)) %&gt;% head(10) # Measles Polio Country Year MP # 1 131441 99 China 2008 91.11 # 2 109023 94 China 2007 74.81 # 3 99602 94 China 2006 71.50 # 4 124219 87 China 2005 68.40 # 5 118712 86 Malawi 2010 65.34 # 6 52628 99 China 2014 57.65 # 7 52461 99 China 2009 57.56 # 8 90387 86 India 2015 57.01 # 9 88962 86 China 2001 56.56 # 10 133802 77 Democratic Republic of the Congo 2011 55.61 # con transmute(), no es necesario seleccionar # debido a que solo se mostrará la columna creada WHO %&gt;% transmute(MP = (0.00001*(sqrt(Measles) / 0.39 * Polio^2))) %&gt;% arrange(desc(MP)) %&gt;% head(10) # MP # 1 91.11 # 2 74.81 # 3 71.50 # 4 68.40 # 5 65.34 # 6 57.65 # 7 57.56 # 8 57.01 # 9 56.56 # 10 55.61 Tabla 6.2: Funciones de la familia mutate() y transmute() Función Descripción mutate() Crea o modifica columnas especificadas una por una. El resultado muestra todas las columnas de la tabla original. transmute() Crea o modifica columnas especificadas una por una. El resultado solo muestra las columnas creadas o modificadas. mutate_all() Aplica una modificación a todas las columnas de una tabla. mutate_at() Aplica la(s) modificación(es) solo a la(s) columna(s) especificada(s) en la tabla. mutate_if() Aplica una modificación a todas las columnas que cumplan con una condición lógica. mutate_each() Idéntica a mutate_all() es considerada obsoleta (deprecated). mutate_each_() también es obsoleta. transmute_all() Aplica una modificación a todas las columnas de una tabla. Las exporta en una nueva tabla, no dentro de la original. transmute_at() Aplica la(s) modificación(es) solo a la(s) columna(s) especificada(s) en la tabla. Las exporta en una nueva tabla, no dentro de la original. transmute_if() Aplica una modificación a todas las columnas que cumplan con una condición lógica. Las exporta en una nueva tabla, no dentro de la original. transmute_each() Idéntica a transmute_all() es considerada obsoleta (deprecated). transmute_each_() también es obsoleta. 6.11.0.1 mutate_all() y transmute_all() Estas funciones aplicarán las funciones especificadas a todas las columnas de la tabla. Si alguna columna no cumple con lo necesario para se analizada, se genera error. Asegúrate de que la tabla por completo sea modificable con las funciones de transformación definidas. Como alternativa, se utiliza la función de dplyr select() para seleccionar las columnas de trabajo antes de aplicar mutate_all() o transmute_all(). La estructura básica es: BASE_DE_DATOS %&gt;% mutate_all(.funs = lst(LISTA_DE_FUNCIONES)) Si la función a usar en el argumento .funs = require más de un argumento para funcionar, es mejor crear una función con todas los argumentos definidos tal y como se necesitan. Luego usa la función nueva dentro de alguna función de la familia mutate(). Ejemplo 6.20 Seleccionando las columnas Income, GDP y Life_exp, aplicar la función round() para redondear a un dígito los decimales de estas columnas. Crea previamente la función rr() para redondear a dos decimales un valor dado. # Crear una función de rendondeo a dos decimales rr &lt;- function(x)round(x,2) # Aplicar dentro de mutate_all WHO %&gt;% dplyr::select(Income, GDP, Life_exp) %&gt;% mutate_all(.funs = lst(rr)) %&gt;% head(10) # Income GDP Life_exp Income_rr GDP_rr Life_exp_rr # 1 0.479 584.26 65.0 0.48 584.26 65.0 # 2 0.476 612.70 59.9 0.48 612.70 59.9 # 3 0.470 631.74 59.9 0.47 631.74 59.9 # 4 0.463 669.96 59.5 0.46 669.96 59.5 # 5 0.454 63.54 59.2 0.45 63.54 59.2 # 6 0.448 553.33 58.8 0.45 553.33 58.8 # 7 0.434 445.89 58.6 0.43 445.89 58.6 # 8 0.433 373.36 58.1 0.43 373.36 58.1 # 9 0.415 369.84 57.5 0.42 369.84 57.5 # 10 0.405 272.56 57.3 0.41 272.56 57.3 6.11.0.2 mutate_at() y transmute_at() Estas funciones permite seleccionar las columnas de trabajo a las cuales se les aplicará algo. La estructura básica es: BASE_DE_DATOS %&gt;% mutate_at(.vars = vars(COLUMNAS_DE_TRABAJO), .funs = lst(LISTA_DE_FUNCIONES)) BASE_DE_DATOS %&gt;% transmute_at(.vars = vars(COLUMNAS_DE_TRABAJO), .funs = lst(LISTA_DE_FUNCIONES)) Ejemplo 6.21 Siguiendo el ejemplo @ref:(exm:mutateall), recrear el resultado utilizando mutate_at(). Si se utiliza mutate_at() con toda la tabla, el resultado será la misma base de datos más las nuevas columnas transformadas. Para no imprimir tanta información, utiliza transmute_at() # Crear una función de rendondeo a dos decimales rr &lt;- function(x)round(x,2) # Aplicar dentro de mutate_all WHO %&gt;% transmute_at(.vars = vars(Income, GDP, Life_exp), .funs = lst(rr)) %&gt;% head(10) # Income_rr GDP_rr Life_exp_rr # 1 0.48 584.26 65.0 # 2 0.48 612.70 59.9 # 3 0.47 631.74 59.9 # 4 0.46 669.96 59.5 # 5 0.45 63.54 59.2 # 6 0.45 553.33 58.8 # 7 0.43 445.89 58.6 # 8 0.43 373.36 58.1 # 9 0.42 369.84 57.5 # 10 0.41 272.56 57.3 6.11.0.3 mutate_if() y transmute_if() Como otras funciones nombradas como _if, estas permiten indicar una condición lógica para seleccionar solo las columnas que cumplan con dicha condición. Para establecer la condición se utiliza funciones de la familia is(), como is.numeric(). La estructura básica es: BASE_DE_DATOS %&gt;% mutate_if(.predicate = FUNCIÓN_IS_SIN_PARÉNTESIS, .funs = lst(LISTA_DE_FUNCIONES)) BASE_DE_DATOS %&gt;% transmute_if(.predicate = FUNCIÓN_IS_SIN_PARÉNTESIS, .funs = lst(LISTA_DE_FUNCIONES)) Ejemplo 6.22 Aplicar la transformación a factor de las columnas del tipo carácter: # Revisar la estructura de WHO # Notar las columnas chr str(WHO) # Utilizar mutate_if() WHO2 &lt;- WHO %&gt;% mutate_if(is.character, as.factor) # Revisar la estructura de WHO2 # Notar que las columnas chr cambiaron a Factor str(WHO2) "],["combinar-bases-de-datos.html", "6.12 Combinar bases de datos", " 6.12 Combinar bases de datos Combinar bases de datos es una tarea recurrente en ciencia de datos. Las funciones de combinación de dplyr utilizan como materia prima data frames o tibbles. La mejor manera de explicar el uso de estas intrincadas funciones es a través de un gráfico. La Figura 6.13 muestra el detalle de las filas esperadas como resultado del uso de las funciones de combinación: Figura 6.13: Funciones de combinación de dplyr y resultado esperado. El color indica la base de datos de origen de las filas que aparecerán en la tabla de resultados. Veamos la aplicación de estas funciones con un ejemplo muy simple. Ejemplo 6.23 Considera las data frame Base_A y Base_B: # Crear las bases de datos Base_A &lt;- data.frame(ID = LETTERS[1:4], COL1 = 1:4) Base_B &lt;- data.frame(ID = LETTERS[c(1,3,4,5)], COL2 = c(T,T,F,F)) # Revisar las bases de datos Base_A # ID COL1 # 1 A 1 # 2 B 2 # 3 C 3 # 4 D 4 Base_B # ID COL2 # 1 A TRUE # 2 C TRUE # 3 D FALSE # 4 E FALSE 6.12.1 full_join() Une las dos bases de datos por completo. Las celdas en blanco que puedan aparecer se rellenan con NA. full_join(Base_A, Base_B, by=&quot;ID&quot;) # ID COL1 COL2 # 1 A 1 TRUE # 2 B 2 NA # 3 C 3 TRUE # 4 D 4 FALSE # 5 E NA FALSE 6.12.2 left_join() Devuelve todas las filas de Base_A y cualquier fila coincidente de Base_B. Las filas exclusivas de Base_B no aparecen. Las celdas en blanco que puedan aparecer se rellenan con NA. left_join(Base_A, Base_B, by=&quot;ID&quot;) # ID COL1 COL2 # 1 A 1 TRUE # 2 B 2 NA # 3 C 3 TRUE # 4 D 4 FALSE 6.12.3 right_join() Devuelve todas las filas de Base_B y cualquier fila coincidente de Base_A. Las filas exclusivas de Base_A no aparecen. Las celdas en blanco que puedan aparecer se rellenan con NA. right_join(Base_A, Base_B, by=&quot;ID&quot;) # ID COL1 COL2 # 1 A 1 TRUE # 2 C 3 TRUE # 3 D 4 FALSE # 4 E NA FALSE 6.12.4 inner_join() Devuelve todas las filas coincidentes de Base_A y Base_B, y muestra las columnas de ambas bases de datos. inner_join(Base_A, Base_B, by=&quot;ID&quot;) # ID COL1 COL2 # 1 A 1 TRUE # 2 C 3 TRUE # 3 D 4 FALSE 6.12.5 semi_join() Devuelve todas las filas coincidentes de Base_A y Base_B, y muestra únicamente las columnas de la Base_A. semi_join(Base_A, Base_B, by=&quot;ID&quot;) # ID COL1 # 1 A 1 # 2 C 3 # 3 D 4 6.12.6 anti_join() Devuelve solo las filas que son exclusivas de Base_A. anti_join(Base_A, Base_B, by=&quot;ID&quot;) # ID COL1 # 1 B 2 "],["limpieza-de-datos.html", "6.13 Limpieza de datos", " 6.13 Limpieza de datos Esta sección abordará algunos tópicos de limpieza de datos o Data cleaning. Como ya se ha revisado, los valores perdidos o NA causan problemas en el cálculo de parámetros estadísticos de las bases de datos. Más aún, cuando se pretende modelar la relación de una variable Y con los valores de una variable X, es imposible hacer regresión alguna con valores perdidos. Para estos casos, limpiar la base de datos será crucial. Siempre que necesites identificar si un elemento dentro de un objeto es NA o no, podrás utilizar la función is.na(). Esta devolverá un objeto lógico con la misma extensión que el objeto original. En aquellas posiciones donde exista un NA en la base de datos original, is.na() mostrará TRUE. 6.13.1 ¿Cuántos NA existen en la base de datos? Ejemplo 6.24 Considerando la base de datos WHO, calcular la cantidad de NA de la base. # Convertir WHO a tabla lógica # para ubicar con TRUE a los NA WHO_logical &lt;- is.na(WHO) Recuerda que para las funciones estadísticas y matemáticas, como mean() o sum(), TRUE equivale a 1 y FALSE a 0. Se puede obtener la proporción de TRUE de un vector con mean(), o la suma de TRUE en el vector con sum(). # Sumando todos los TRUE (equivalentes a 1) sum(WHO_logical) # [1] 2563 6.13.2 ¿Cuántos NA existen en cada columna? Hay muchas maneras de llegar a este resultado. Pero el procedimiento es similar en concepto al anterior. Se deben sumar los TRUE (celdas con NA) pero esta vez columna a columna. Como dato adicional, este objetivo también puede conseguir utilizando la función apply() (Sección 5.4 Familia apply()). Ejemplo 6.25 Crear una función que sume los NA de un vector: fun_na &lt;- function(x) sum(is.na(x)) Ahora, utilizar la función aplicada a todas las columnas de la base de datos WHO: WHO %&gt;% summarise_all(.funs = fun_na) # Country Year Status1 Category Level Status2 St2_categ Life_exp Ad_mort Inf_deaths # 1 0 0 0 0 0 0 0 10 10 0 # Alcohol Per_exp Hep_B Measles BMI U5Y Polio Tot_exp Diph AIDS GDP Pop Thin1_19 # 1 194 0 553 0 34 0 19 226 19 0 448 652 34 # Thin5_9 Income Schooling # 1 34 167 163 Si son demasiadas columnas para visualizar, considera seleccionar las columnas cuyos valores sean mayores de 0. Crea una función que evalúe un valor y otorgue TRUE si este es mayor que 0. # Crear la función fun0 &lt;- function(x) x &gt; 0 La selección ahora utiliza una función que no se utilizó antes: select_if(). Como todas las funciones _if de dplyr, esta necesita condicionales para función. Allí entra en juego la función antes creada: # Aplicarla en select_if() WHO %&gt;% summarise_all(.funs = fun_na) %&gt;% select_if(fun0) # Life_exp Ad_mort Alcohol Hep_B BMI Polio Tot_exp Diph GDP Pop Thin1_19 Thin5_9 # 1 10 10 194 553 34 19 226 19 448 652 34 34 # Income Schooling # 1 167 163 6.13.3 ¿En qué fila o columna están los NA? Ubicar la posición de fila y columna de los valores NA (celdas en blanco) se utiliza cuando se conoce que no deberían haber celdas vacías pero las hay. Encontrarlas permite rellenar dicho valor por el correspondiente que fue omitido en el proceso de rellenado de la base de datos. Ejemplo 6.26 Ubicar los valores NA de la base de datos WHO. Mostrar únicamente las 10 primeras del resultado: which(WHO_logical, arr.ind=TRUE) %&gt;% head(10) # row col # 625 625 8 # 770 770 8 # 1651 1651 8 # 1716 1716 8 # 1813 1813 8 # 1910 1910 8 # 1959 1959 8 # 2168 2168 8 # 2217 2217 8 # 2714 2714 8 En inglés, row significa fila y col columna. 6.13.4 ¿Cómo reemplazar los NA por otro valor? En ocasiones se necesita reemplazar los NA por algún valor por defecto que en el análisis sea útil. Por ejemplo, en bases que representan datos SIG (Sistemas de Información Geográficas), algunas celdas necesitan ser 9999, o -256, o algún otro valor, para que el análisis los considere bajo la categoría no hay dato. Otros estudios, por su parte, utilizan el rellenar los datos con el promedio o la mediana de la columna. En los siguientes ejemplos veremos su aplicación: Ejemplo 6.27 Rellenar los valores NA de la base de datos WHO con el valor 9999999. Es excesivamente largo solo con la finalidad de hacerlo notorio, no por otra razón. Selecciona previamente las columnas Alcohol, Hep_B, Measles, Polio, Diph para que el resultado no sea amplio en la consola. Reordenar el resultado por la columna Alcohol y mostrar las últimas 6 filas de la tabla. Aquí el truco está en una forma especial de mutate_all() para transformar todas las columnas pero utilizando ~ifelse() para reemplazar todas la NA (is.na(.x)) por 9999999, y las no NA con el mismo valor original (.x): WHO %&gt;% dplyr::select(Alcohol, Hep_B, Measles, Polio, Diph) %&gt;% arrange(Alcohol) %&gt;% mutate_all(~ifelse(is.na(.x), 9999999, .x)) %&gt;% tail() # Alcohol Hep_B Measles Polio Diph # 2933 1e+07 64 39 65 64 # 2934 1e+07 87 0 87 87 # 2935 1e+07 97 256 97 97 # 2936 1e+07 69 468 63 69 # 2937 1e+07 9 9 9 9 # 2938 1e+07 87 0 88 87 Ejemplo 6.28 Considera el mismo ejemplo anterior 6.27. No obstante, en lugar de reemplazar NA por 9999999, utiliza la función con mean(.x, na.rm = TRUE) para que los NA se reemplacen por el promedio de la columna. WHO %&gt;% dplyr::select(Alcohol, Hep_B, Measles, Polio, Diph) %&gt;% arrange(Alcohol) %&gt;% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))%&gt;% tail() # Alcohol Hep_B Measles Polio Diph # 2933 4.603 64 39 65 64 # 2934 4.603 87 0 87 87 # 2935 4.603 97 256 97 97 # 2936 4.603 69 468 63 69 # 2937 4.603 9 9 9 9 # 2938 4.603 87 0 88 87 "],["solucionario-de-ejercicios.html", "Apéndice A Solucionario de ejercicios", " Apéndice A Solucionario de ejercicios Este capítulo extra del libro permitirá al lector revisar si las soluciones realizadas a los ejercicios de cada capítulo son correctos. Recuerda que no existe una única solución a un problema en R. Uno es libre de programar las soluciones según su propio pensamiento creativo, nivel de conocimiento del código y practicidad. Se recomienda no revisar este capítulo antes de realizar los ejercicios, principalmente para permitir que el alumno desarrolle su pensamiento lógico respecto al código en R. Recuerda que la práctica hace al maestro. "],["cap.-2-primer-contacto-con-r.html", "A.1 Cap. 2: Primer contacto con R", " A.1 Cap. 2: Primer contacto con R Soluciona la ecuación \\(\\sqrt({\\frac{24+12}{(2 * 3)^3})}\\). Solución: sqrt((24+12)/(2*3)^3) # [1] 0.4082 Resuelve \\(\\mathrm{log_{10}}(|\\frac{\\mathrm{exp(10)}^2}{-10*9^{6}}|)\\). Las barras verticales implican aplicar valor absoluto antes de calcular el logaritmo en base 10. Solución: log10(abs((exp(10)**2)/(-10*(9^6)))) # [1] 1.96 1.La función sigmoidal \\(\\sigma(\\mathrm{z}) = \\frac{1}{1+e^{-\\mathrm{z}}}\\) es muy importante en estadística. Permite convertir el resultado de una regresión logística (Odds ratios) en probabilidades, facilitando la interpretación. Utiliza la fórmula \\(z = -1.69 + 1*0.56\\), emulando el resultado hipotético de una regresión logística, como insumo para calcular su probabilidad correspondiente utilizando la función sigmoidal. Como dato extra, el resultado de \\(\\sigma(\\mathrm{z})\\) por 100 para convertirlo a probabilidad porcentual. Solución: ### Crear z z &lt;- -1.69 + 1*0.56 ### Calcular la función sigmoidal 1 / (1 + exp(-z)) # [1] 0.2442 Este ejercicio avanzado es de carácter explicativo. Sigue el ejercicio en la sección del Solucionario: Cap. 2, pregunta 3 correspondiente. Para calcular la derivaba de una función matemática, primero se debe crear la estructura matemática utilizando la función expression(). Una vez guardada la expresión, se utiliza la función D() para derivar. Calcula la primera derivada de: \\(f(x)=-2x+2\\) \\(f(x)=-2x^2-5\\) \\(f(x)=\\frac{x^3+2}{3}\\) Calcula la primera derivada de una expresión con dos variables: \\(f(x)=x^2+y^2+2*x*y-3*x+4*y+4\\) Calcula la segunda derivada de: \\(f(x)=x^2+3*x\\) Solución: ### Crear las expresiones matemáticas eMat1 &lt;- expression((-2*x)+2) eMat2 &lt;- expression((-2*(x^2))-5) eMat3 &lt;- expression(((x^3)+2)/3) ### Función D() para derivar las expresiones sobre x D(eMat1, &quot;x&quot;) # -2 D(eMat2, &quot;x&quot;) # -(2 * (2 * x)) D(eMat3, &quot;x&quot;) # 3 * x^2/3 ### Crear la expresión matemática con dos variables (x e y) eMat4 &lt;-expression(x^2+y^2+2*x*y-3*x+4*y+4) ### Función D() para derivar la expresiones sobre x D(eMat4, &quot;x&quot;) # 2 * x + 2 * y - 3 ### Función D() para derivar la expresiones sobre y D(eMat4, &quot;y&quot;) # 2 * y + 2 * x + 4 ### Crear la expresión matemática para obtener segunda derivada eMat5 &lt;- expression(x^2+3*x) ### Primera derivada D(eMat5, &quot;x&quot;) # 2 * x + 3 ### Segunda derivada D(D(eMat5, &quot;x&quot;),&#39;x&#39;) # [1] 2 Para resolver integrales en R, puedes revisar la documentación de la función integrate() en RDocumentation. # Un ejemplo rápido de uso extraído de la documentación integrand &lt;- function(x) {1/((x+1)*sqrt(x))} integrate(integrand, lower = 0, upper = Inf) # 3.142 with absolute error &lt; 2.7e-05 Se recomienda la lectura del libro R for Calculus de Daniel Kaplan para profundizar en cálculo diferencial e integral en R. Crea un vector con llamado num1 conteniendo 1000 números aleatorios con distribución normal, con promedio 19 y desviación estándar 1.29 (revisa la TABLA 2.4). Asegúrate de ejecutar previamente la función set.seed(123) para que el ejercicio sea replicable. Solución: set.seed(123) num1 &lt;- rnorm(1000, mean=19, sd=1.29) ### La función head() permite ver los primeros N elementos del vector ### Aquí se define N como 20 elementos head(num1, 20) # [1] 18.28 18.70 21.01 19.09 19.17 21.21 19.59 17.37 18.11 18.43 20.58 19.46 19.52 # [14] 19.14 18.28 21.31 19.64 16.46 19.90 18.39 Calcula el promedio y la desviación estándar del objeto num1. ¿Son exactamente iguales a los valores definidos con los que creaste el conjunto de datos usando rnorm()?. Solución: mean(num1) # [1] 19.02 sd(num1) # [1] 1.279 Como habrás notado. Los valores obtenidos no son exactamente los valores de promedio y desviación estándar con los que se generaron los mil números aleatorios con rnorm(). La aleatorización impide que los valores sean idénticos, no obstante siempre tienden a lo solicitado. No que sucede exclusivamente en R, de hecho ningún lenguaje de programación lo hace idéntico. Calcula los cuartiles de dicho conjunto de datos. ¿Cuál es el valor del cuartil 50% (que es conocido como mediana) (revisa la TABLA 2.4)? Solución: ### Para ver los cuartiles por defecto quantile(num1) # 0% 25% 50% 75% 100% # 15.38 18.19 19.01 19.86 23.18 ### Para obtener el cuartil 50% o mediana quantile(num1, probs=0.5) # 50% # 19.01 Utilizando los operadores relacionales, convierte el vector numérico num1 a vector lógico, aplicando la pregunta lógica números mayores a 20.0. Guarda el resultado en el ambiente con el nombre VL20 (revisa la TABLA 2.3). Solución: VL20 &lt;- num1 &gt; 20.0 ### La función head() permite ver los primeros N elementos del vector ### Aquí se define N como 35 elementos head(VL20, 35) # [1] FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE # [14] FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE # [27] TRUE FALSE FALSE TRUE FALSE FALSE TRUE TRUE TRUE Coloca el objeto VL20 dentro de la función mean(). La función mean calcula normalmente el promedio de un conjunto de datos numéricos. No obstante, cuando se le ofrece un vector lógico, contabiliza la cantidad de elementos TRUE y ofrece la proporción de verdaderos respecto al total de elemento del conjunto. ¿Cuál es la proporción de elementos FALSE del vector VL20? (revisa la TABLA 2.3). Solución: ### Proporción de TRUE en el conjunto mean(VL20) # [1] 0.221 ### Proporción de FALSE en el conjunto 1 - mean(VL20) # [1] 0.779 Utilizando los operadores lógicos y relacionales, convierte el vector numérico num1 a vector lógico, aplicando la pregunta lógica números menor igual a 19.5 y números mayor a 15.7. (revisa la TABLA 2.3). Si se sabe que son 1000 elementos los que contiene el vector, ¿Cuántos elementos del conjunto encajan dentro de la premisa lógica anterior?. Solución: ### Crear el vector lógico, dándole un nombre cualquiera num1LOGICO &lt;- (num1 &lt; 19 &amp; num1 &gt; 15.7) ### Proporción de elementos TRUE ### Es decir, que cumplieron la premisa anterior mean(num1LOGICO) # [1] 0.491 ### Convertir proporción a cantidad, ### multiplicando por el total de datos del vector mean(num1LOGICO) * length(num1LOGICO) # [1] 491 "],["preg-estructurasdatos.html", "A.2 Cap. 3: Estructuras de datos", " A.2 Cap. 3: Estructuras de datos Crea una variable llamada datosNumeros que contenga 200 números (decimales) entre el 20 y 80. Solución: datosNumeros &lt;- seq(20, 80, length=200) ### Función head() para ver los 20 primeros elementos del vector head(datosNumeros, 20) # [1] 20.00 20.30 20.60 20.90 21.21 21.51 21.81 22.11 22.41 22.71 23.02 23.32 23.62 # [14] 23.92 24.22 24.52 24.82 25.13 25.43 25.73 Utilizando la función sample(), crea una variable llamada muestr4 que contenga el muestreo de 10 elementos (con repetición) del objeto datosNumeros. Utiliza set.seed(123) antes del muestro para asegurar la replicabilidad del mismo. Solución: set.seed(123) muestr4 &lt;- sample(datosNumeros, 10, replace = TRUE) ### Revisar el contenido muestr4 # [1] 67.64 73.67 23.92 78.49 70.95 34.77 55.28 32.66 23.92 55.28 Redondea todos los elementos del vector datosNumeros a dos decimales, coerciona el objeto a texto, y guarda el resultado en el ambiente con el nombre coer. Solución: ### Redondear datosNumeros r &lt;- round(datosNumeros, 2) ### Coercer hacia texto coer &lt;- as.character(r) ### Revisar el contenido head(coer, 20) # [1] &quot;20&quot; &quot;20.3&quot; &quot;20.6&quot; &quot;20.9&quot; &quot;21.21&quot; &quot;21.51&quot; &quot;21.81&quot; &quot;22.11&quot; &quot;22.41&quot; &quot;22.71&quot; # [11] &quot;23.02&quot; &quot;23.32&quot; &quot;23.62&quot; &quot;23.92&quot; &quot;24.22&quot; &quot;24.52&quot; &quot;24.82&quot; &quot;25.13&quot; &quot;25.43&quot; &quot;25.73&quot; Se puede coercer un número a texto, dado que solo se necesita colocar el número entre comillas para sea considerado así. Utiliza coer para coercer el objeto hacia número nuevamente. Solución: ### Redondear datosNumeros as.numeric(coer) # [1] 20.00 20.30 20.60 20.90 21.21 21.51 21.81 22.11 22.41 22.71 23.02 23.32 23.62 # [14] 23.92 24.22 24.52 24.82 25.13 25.43 25.73 26.03 26.33 26.63 26.93 27.24 27.54 # [27] 27.84 28.14 28.44 28.74 29.05 29.35 29.65 29.95 30.25 30.55 30.85 31.16 31.46 # [40] 31.76 32.06 32.36 32.66 32.96 33.27 33.57 33.87 34.17 34.47 34.77 35.08 35.38 # [53] 35.68 35.98 36.28 36.58 36.88 37.19 37.49 37.79 38.09 38.39 38.69 38.99 39.30 # [66] 39.60 39.90 40.20 40.50 40.80 41.11 41.41 41.71 42.01 42.31 42.61 42.91 43.22 # [79] 43.52 43.82 44.12 44.42 44.72 45.03 45.33 45.63 45.93 46.23 46.53 46.83 47.14 # [92] 47.44 47.74 48.04 48.34 48.64 48.94 49.25 49.55 49.85 50.15 50.45 50.75 51.06 # [105] 51.36 51.66 51.96 52.26 52.56 52.86 53.17 53.47 53.77 54.07 54.37 54.67 54.97 # [118] 55.28 55.58 55.88 56.18 56.48 56.78 57.09 57.39 57.69 57.99 58.29 58.59 58.89 # [131] 59.20 59.50 59.80 60.10 60.40 60.70 61.01 61.31 61.61 61.91 62.21 62.51 62.81 # [144] 63.12 63.42 63.72 64.02 64.32 64.62 64.92 65.23 65.53 65.83 66.13 66.43 66.73 # [157] 67.04 67.34 67.64 67.94 68.24 68.54 68.84 69.15 69.45 69.75 70.05 70.35 70.65 # [170] 70.95 71.26 71.56 71.86 72.16 72.46 72.76 73.07 73.37 73.67 73.97 74.27 74.57 # [183] 74.87 75.18 75.48 75.78 76.08 76.38 76.68 76.98 77.29 77.59 77.89 78.19 78.49 # [196] 78.79 79.10 79.40 79.70 80.00 Como es notorio, se puede coercer un texto que contenga números hacia numeric sin problema, dado que R, al quitarle las comillas a cada elemento, se encuentra con un valor numérico correcto. Crea el vector miPais que contenga únicamente el nombre de tu país de residencia. Coerce miPaishacia vector numérico. ¿Notas la advertencia? Solución: ### Crear la variable miPais &lt;- &quot;Peru&quot; ### Coercer hacia número as.numeric(miPais) # Warning: NAs introduced by coercion # [1] NA La advertencia NAs introduced by coercion implica que como al quitar las comillas, lo que queda es una palabra en lugar de un número, R no puede darle valor numérico y lo reemplaza por un NA. Crea una data frame llamada DF10, cuyo contenido sea: una columna numérica, otra de texto, y otra lógica, todas de 5 elementos. Coerce DF10 hacia matriz. ¿Notas algo particular en los elementos de la matriz? Solución: ### Crear la variable DF10 &lt;- data.frame( COL1 = 1:5, COL2 = c(&quot;Text1&quot;, &quot;Text2&quot;, &quot;Text3&quot;, &quot;Text4&quot;, &quot;Text5&quot;), COL3 = c(T, F, T, F, T) ) ### Coercer hacia matriz as.matrix(DF10) # COL1 COL2 COL3 # [1,] &quot;1&quot; &quot;Text1&quot; &quot;TRUE&quot; # [2,] &quot;2&quot; &quot;Text2&quot; &quot;FALSE&quot; # [3,] &quot;3&quot; &quot;Text3&quot; &quot;TRUE&quot; # [4,] &quot;4&quot; &quot;Text4&quot; &quot;FALSE&quot; # [5,] &quot;5&quot; &quot;Text5&quot; &quot;TRUE&quot; Todos los elementos de una matriz deben pertenecer a la misma clase. No puede haber matrices con columnas numérica y de texto a la vez. Aquí entra en juego el concepto de supremacía de clase. Esto aplica cuando la estructura hacia la cual se está coerciendo tiene como limitación el contener solo una clase de elementos (i.e., vectores y matrices). La clase carácter prima sobre las demás clases en el lenguaje R. En presencia de tan solo un elemento de texto, toda la matriz se convierte en elementos textuales. En ausencia de elementos de clase carácter, los elementos numéricos (decimales o enteros) priman sobre los lógicos. Los TRUE se convierten en 1, y los FALSE en 0. Crea una lista que contenga los objetos: muestr4, datosNumeros,DF10. Para hacer el ejercicio replicable, respeta el orden mencionado. Luego, indexa las posiciones: - Fila 2, columna 3 del objeto DF10. - Elemento 150 del objeto datosNumeros. - El elemento 5 del objeto muestr4. Realiza esto utilizando tanto una lista nombra (list1) como no nombrada (list2). Solución: ### Crear la lista nombrada list1 &lt;- dplyr::lst(muestr4, datosNumeros, DF10) ### Ubicar las indexaciones de la lista nombrada list1$DF10$COL3[2] # [1] FALSE list1$datosNumeros[150] # [1] 64.92 list1$muestr4[5] # [1] 70.95 ### Crear la lista no nombrada list2 &lt;- list(muestr4, datosNumeros, DF10) ### Ubicar las indexaciones de la lista no nombrada list2[[3]][2,3] # [1] FALSE list2[[2]][150] # [1] 64.92 list2[[1]][5] # [1] 70.95 "],["cap.-5-programación-funcional.html", "A.3 Cap. 5: Programación funcional", " A.3 Cap. 5: Programación funcional Reproduce el resultado del siguiente loop for, utilizando la función replicate(): set.seed(123) lista1 &lt;- list() # Lista vacía for (i in 1:3) { # Número de iteraciones = 5 lista1[[i]] = rnorm(6, 0, 1) # Conjunto aleatorio normal para cada iteración } lista1 # [[1]] # [1] -0.56048 -0.23018 1.55871 0.07051 0.12929 1.71506 # # [[2]] # [1] 0.4609 -1.2651 -0.6869 -0.4457 1.2241 0.3598 # # [[3]] # [1] 0.4008 0.1107 -0.5558 1.7869 0.4979 -1.9666 Solución: # Importante simplify = FALSE para obtener una lista # de vectores y no un solo vector con todos los resultados set.seed(123) lista1 &lt;- replicate(3, { rnorm(6, 0, 1) }, simplify = FALSE) ### Resultado lista1 # [[1]] # [1] -0.56048 -0.23018 1.55871 0.07051 0.12929 1.71506 # # [[2]] # [1] 0.4609 -1.2651 -0.6869 -0.4457 1.2241 0.3598 # # [[3]] # [1] 0.4008 0.1107 -0.5558 1.7869 0.4979 -1.9666 Crea la base de datos DF numérica (código ya definido en el siguiente chunk), que tiene las dimensiones 12 (filas) x 5 (columnas). Esta base contiene valores no deseados: -999. Crea y utiliza una función llamada cambiarNA() que te permita cambiar estos valores por NA. # Base de datos DF set.seed(123) secuencia &lt;- c(seq(0.5, 7.9, length = 10), -999, 5555) DF &lt;- data.frame(replicate(5, sample(secuencia, 12, rep = TRUE))) DF &lt;- round(DF,2) # Darle nombre a sus columnas colnames(DF) &lt;- paste0(&quot;Var&quot;, 1:5) # Revisar el contenido de DF DF # Var1 Var2 Var3 Var4 Var5 # 1 2.14 3.79 7.08 7.90 6.26 # 2 2.14 2.14 2.14 5.43 5555.00 # 3 7.90 -999.00 2.97 -999.00 1.32 # 4 1.32 7.08 0.50 5555.00 0.50 # 5 4.61 5555.00 -999.00 3.79 7.08 # 6 -999.00 7.08 5.43 5.43 -999.00 # 7 3.79 7.08 3.79 3.79 7.08 # 8 2.97 2.14 5555.00 -999.00 4.61 # 9 4.61 6.26 7.90 4.61 3.79 # 10 7.08 7.90 5.43 7.08 7.08 # 11 7.90 5.43 7.08 1.32 7.90 # 12 -999.00 7.90 7.08 3.79 5555.00 Solución: ### Crear función cambiarNA &lt;- function(x) { x[x == -999] &lt;- NA print(x) } ### Usar la función cambiarNA(DF) # Var1 Var2 Var3 Var4 Var5 # 1 2.14 3.79 7.08 7.90 6.26 # 2 2.14 2.14 2.14 5.43 5555.00 # 3 7.90 NA 2.97 NA 1.32 # 4 1.32 7.08 0.50 5555.00 0.50 # 5 4.61 5555.00 NA 3.79 7.08 # 6 NA 7.08 5.43 5.43 NA # 7 3.79 7.08 3.79 3.79 7.08 # 8 2.97 2.14 5555.00 NA 4.61 # 9 4.61 6.26 7.90 4.61 3.79 # 10 7.08 7.90 5.43 7.08 7.08 # 11 7.90 5.43 7.08 1.32 7.90 # 12 NA 7.90 7.08 3.79 5555.00 ### Para guardar sus resultados permanentemente resultados &lt;- cambiarNA(DF) # Var1 Var2 Var3 Var4 Var5 # 1 2.14 3.79 7.08 7.90 6.26 # 2 2.14 2.14 2.14 5.43 5555.00 # 3 7.90 NA 2.97 NA 1.32 # 4 1.32 7.08 0.50 5555.00 0.50 # 5 4.61 5555.00 NA 3.79 7.08 # 6 NA 7.08 5.43 5.43 NA # 7 3.79 7.08 3.79 3.79 7.08 # 8 2.97 2.14 5555.00 NA 4.61 # 9 4.61 6.26 7.90 4.61 3.79 # 10 7.08 7.90 5.43 7.08 7.08 # 11 7.90 5.43 7.08 1.32 7.90 # 12 NA 7.90 7.08 3.79 5555.00 resultados # Var1 Var2 Var3 Var4 Var5 # 1 2.14 3.79 7.08 7.90 6.26 # 2 2.14 2.14 2.14 5.43 5555.00 # 3 7.90 NA 2.97 NA 1.32 # 4 1.32 7.08 0.50 5555.00 0.50 # 5 4.61 5555.00 NA 3.79 7.08 # 6 NA 7.08 5.43 5.43 NA # 7 3.79 7.08 3.79 3.79 7.08 # 8 2.97 2.14 5555.00 NA 4.61 # 9 4.61 6.26 7.90 4.61 3.79 # 10 7.08 7.90 5.43 7.08 7.08 # 11 7.90 5.43 7.08 1.32 7.90 # 12 NA 7.90 7.08 3.79 5555.00 Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA() para que no solo cambie -999 a NA, sino que cambie cualquier valor que tú le proporciones con un argumento. Llama a esta función cambiarNA2(). Utilízala para reemplazar los valores 5555 a NA. Solución: # Crear la función con un argumento extra que te # permita modificar el número a reemplazar por NA cambiarNA2 &lt;- function(x, valor) { x[x == valor] &lt;- NA print(x) } # Usar la función cambiarNA2(DF, 5555) # Var1 Var2 Var3 Var4 Var5 # 1 2.14 3.79 7.08 7.90 6.26 # 2 2.14 2.14 2.14 5.43 NA # 3 7.90 -999.00 2.97 -999.00 1.32 # 4 1.32 7.08 0.50 NA 0.50 # 5 4.61 NA -999.00 3.79 7.08 # 6 -999.00 7.08 5.43 5.43 -999.00 # 7 3.79 7.08 3.79 3.79 7.08 # 8 2.97 2.14 NA -999.00 4.61 # 9 4.61 6.26 7.90 4.61 3.79 # 10 7.08 7.90 5.43 7.08 7.08 # 11 7.90 5.43 7.08 1.32 7.90 # 12 -999.00 7.90 7.08 3.79 NA Utilizando la base de datos DF creada inicialmente en el ejercicio 2, modifica la función cambiarNA2() de tal manera que te permita definir más de un valor (un vector numérico) como elementos a ser reemplazados por NA. Llama a esta función cambiarNA3(). Cambia por NA los valores -999 y 5555. Pista: Esta función deberá contener un loop para aplicarle la función de cambio por NA a un elemento del vector a la vez en cada iteración. Solución: ### Crear la función con un argumento que admita ### un vector de varios elementos a cambiar por NA cambiarNA3 &lt;- function(x, vector) { for (i in seq_along(vector)) { x[x == vector[i]] &lt;- NA } print(x) } ### Usar la función cambiarNA3(DF, c(5555, -999)) # Var1 Var2 Var3 Var4 Var5 # 1 2.14 3.79 7.08 7.90 6.26 # 2 2.14 2.14 2.14 5.43 NA # 3 7.90 NA 2.97 NA 1.32 # 4 1.32 7.08 0.50 NA 0.50 # 5 4.61 NA NA 3.79 7.08 # 6 NA 7.08 5.43 5.43 NA # 7 3.79 7.08 3.79 3.79 7.08 # 8 2.97 2.14 NA NA 4.61 # 9 4.61 6.26 7.90 4.61 3.79 # 10 7.08 7.90 5.43 7.08 7.08 # 11 7.90 5.43 7.08 1.32 7.90 # 12 NA 7.90 7.08 3.79 NA Crea un loop for que itere sobre los números del 1 al 50 y calcule el cubo de cada número, de manera que los resultados se vayan guardando en un vector llamado preliminar. Luego, crea un segundo loop que te permita identificar y almacenar solamente los números menores a la mediana median() del conjunto de datos preliminar en un nuevo vector llamado final. Solución: ### Secuencia numérica secuencia &lt;- 1:50 ### Primer loop con for preliminar &lt;- c() for(i in seq_along(secuencia)){ preliminar[i] &lt;- secuencia[i]^3 } ### Resultado preliminar preliminar # [1] 1 8 27 64 125 216 343 512 729 1000 1331 # [12] 1728 2197 2744 3375 4096 4913 5832 6859 8000 9261 10648 # [23] 12167 13824 15625 17576 19683 21952 24389 27000 29791 32768 35937 # [34] 39304 42875 46656 50653 54872 59319 64000 68921 74088 79507 85184 # [45] 91125 97336 103823 110592 117649 125000 ### Segundo loop con for final &lt;- c() for( i in seq_along(preliminar)) { if(preliminar[i] &lt;= median(preliminar)){ final &lt;- c(final, preliminar[i]) } } ### Resultado final final # [1] 1 8 27 64 125 216 343 512 729 1000 1331 1728 2197 # [14] 2744 3375 4096 4913 5832 6859 8000 9261 10648 12167 13824 15625 En R ya existe una función para calcular la varianza y es var(). Pero este ejercicio se trata de poner en juego lo que aprendiste sobre programación en R. La fórmula matemática de la varianza poblacional, con denominador \\(n\\), Ecuación (5.1). Pero la función var() de R contiene la fórmula matemática para calcular la varianza de muestras, no de poblaciones enteras. La fórmula matemática de la varianza muestral que usa R tiene como denominador \\(n-1\\), Ecuación (5.2). Crea una función llamada var2() que calcule la varianza del conjunto de datos llamado vector. Finalmente, compara tus resultados con los obtenidos por var(). \\[\\begin{align} \\sigma^2 = \\frac{1}{n}*{\\displaystyle\\sum_{i=1}^{n}(x_i - \\mu)^2} \\tag{5.1} \\end{align}\\] \\[\\begin{equation} \\sigma^2 = \\frac{1}{n-1}*{\\displaystyle\\sum_{i=1}^{n}(x_i - \\mu)^2} \\tag{5.2} \\end{equation}\\] set.seed(123) vector &lt;- rnorm(50, 21, 1.6) Solución: Dentro de la función necesitas: Un código que calcule el promedio de los valores de vector. Una estructura que le reste el promedio a cada elemento de vector y eleve cada resta al cuadrado. Sumar todos los cuadrados obtenidos. Identificar la longitud de vector (denotada por n), y dividir la sumatoria de cuadrados entre n. ### Crear la función var2 &lt;- function(x) { promedio &lt;- mean(x) cuadrados &lt;- c() for(i in seq_along(x)) { valor &lt;- (x[i] - promedio)^2 cuadrados &lt;- c(cuadrados, valor) } n &lt;- length(x) sumatoria &lt;- sum(cuadrados) varianza &lt;- sumatoria / (n-1) return(varianza) } ### Usar la función var2(vector) # [1] 2.195 ### Comparar con la el resultado de var() var(vector) # [1] 2.195 Si necesitas en algún momento, ya conoces cómo crear la fórmula de la varianza poblacional en R. Carga la base de datos npk. Usando una función de la familia apply(), calcula la el promedio, mediana y desviación estándar de la columna yield para cada categoría (numérica) de la columna block. Con ello, se conocerá el promedio de producción que se obtuvo en cada bloque para un estudio de mejora fitogenética: data(&quot;npk&quot;) Solución: tapply(npk$yield, npk$block, FUN = mean) # 1 2 3 4 5 6 # 54.02 57.45 60.77 50.12 50.52 56.35 tapply(npk$yield, npk$block, FUN = median) # 1 2 3 4 5 6 # 53.25 57.25 59.30 47.15 50.65 56.60 tapply(npk$yield, npk$block, FUN = sd) # 1 2 3 4 5 6 # 7.269 2.044 6.790 8.150 1.486 2.435 Ejecuta el siguiente código para crear una lista llamada iris3Lista a partir de la base de datos de ejemplo iris3 (un array). Si revisas iris3Lista, notarás que continene 3 elementos, cada uno de ellos es una matriz de datos de cuatro columnas (Sepal L., Sepal W., Petal L., y Petal W.). Utilizando dos funciones de la familia apply(), calcula el promedio de cada columna de cada elemento de la lista iris3Lista. # Cargar iris3 data(&quot;iris3&quot;) # Convertirla a lista iris3Lista &lt;- list(setosa = iris3[,,1], versicolor = iris3[,,2], virginica = iris3[,,3]) Solución: lapply(iris3Lista, FUN = function(x) { apply(x, 2, mean) }) # $setosa # Sepal L. Sepal W. Petal L. Petal W. # 5.006 3.428 1.462 0.246 # # $versicolor # Sepal L. Sepal W. Petal L. Petal W. # 5.936 2.770 4.260 1.326 # # $virginica # Sepal L. Sepal W. Petal L. Petal W. # 6.588 2.974 5.552 2.026 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
