[{"path":"index.html","id":"bienvenida","chapter":"Bienvenida","heading":"Bienvenida","text":"\nEsta es la página web del libro Introducción R para Ciencias, publicado por IC Press, Fondo Editorial del Instituto de Ciencias Antonio Brack. Para solicitar una copia electrónica del libro en formato PDF, hacerlo través de Amazon o IC PRESS.Este libro busca:Democratizar el uso del lenguaje de programación R en investigación científica, través de una explicación amigable, con ejemplos sencillos y ejercicios de refuerzo.Democratizar el uso del lenguaje de programación R en investigación científica, través de una explicación amigable, con ejemplos sencillos y ejercicios de refuerzo.Ser el libro de referencia de los primeros módulos del programa Data Science: Análisis Estadístico para Ciencias con R, el cual contiene cinco cursos dictados por el profesor Irwing S. saldaña en el Instituto de Ciencias Antonio Brack través de la plataforma educativa online masterX.Ser el libro de referencia de los primeros módulos del programa Data Science: Análisis Estadístico para Ciencias con R, el cual contiene cinco cursos dictados por el profesor Irwing S. saldaña en el Instituto de Ciencias Antonio Brack través de la plataforma educativa online masterX.En tal sentido, para usar este libro, se necesita saber de antemano el lenguaje de programación R ni conocimientos estadísticos.Este libro ha sido completamente escrito en R Markdown, utilizando RStudio. Si tienes alguna sugerencia, o detectas algún fallo ortográfico, error de forma o de fondo, por favor envia un mensaje isaldanau@gmail.com con el asunto de correo “Corrección Libro Estadística”.Esta página web es de libre uso dentro de los términos autorizados bajo la Licencia Internacional Reconocimiento Comercial - Sin Derivadas 4.0. Además, esta obra utiliza un Código de conducta para colaboradores. Al contribuir este libro, acepta cumplir sus términos. Finalmente, esta obra está alojada en Netlify, con código abierto disponible en Github.La portada del libro ha sido creada utilizando una fotografía de acceso abierto de Pawel Czerwinski publicada en Unsplash.Photo Pawel Czerwinski Unsplash","code":""},{"path":"index.html","id":"el-paquete-del-libro","chapter":"Bienvenida","heading":"El paquete del libro","text":"Las bases de datos y funciones de soporte del programa de estudios aquí propuesto están disponibles en el paquete rbrack, disponible en el repositorio de Github.Si conoces como ejecutar código, puedes revisar la sección 2.1 Ejecutar código, y sigue las instrucciones mencionadas continuación.El paso paso:Abrir RStudio.En el teclado presionar: Control + shift + N o Command + shift + N. Esto creará un nuevo R script (para más información, revisa: Tipos de documentos en RStudio).Copiar en el R script el código mostrado continuación.Ejecutar el código (para más información, revisa: Ejecutar código) hasta la función instalar_paquetes_github().Una vez estén todas las librerías instaladas, se debe ejecutar la última función update.packages() para actualizar las que se encuentren desactualizadas.","code":"\n# Instalar la librería del libro\ninstall.packages(\"devtools\")\ndevtools::install_github(\"irwingss/rbrack\")\n\n# Activar la librería\nlibraries(rBrack)\n\n# Ejecutar las funciones\ninstalar_paquetes_cran()\ninstalar_paquetes_github()\n\n# Actualizar las librerías\nupdate.packages(ask = FALSE)"},{"path":"index.html","id":"cómo-usar-el-libro","chapter":"Bienvenida","heading":"¿Cómo usar el libro?","text":"El libro cuenta con capítulos secuenciales. Si es tu primera vez con R, se sugiere continuar la secuencia. La información está organizada de manera que permita al lector identificar la teoría y ejemplos, junto con ciertos contenidos resaltados como se muestra continuación:","code":""},{"path":"prefacio.html","id":"prefacio","chapter":"Prefacio","heading":"Prefacio","text":"","code":""},{"path":"prefacio.html","id":"por-qué-aprender-r","chapter":"Prefacio","heading":"¿Por qué aprender R?","text":"Sin importar tu carrera de origen, es más que seguro nunca pensaste que algún día terminarías queriendo aprender programar. Esta necesidad se está haciendo cada vez más frecuentes entre profesionales de distintas ramas de la ciencia. Las razones de aprender programar pueden ser diversas, pero casi siempre se centran en la necesidad de analizar datos, hacer ciencia, participar en un grupo de investigación, o para tener herramientas analíticas para el doctorado. Pero ¿Por qué R?.\nFIGURA 0.1: Fortalezas que presenta el lenguaje de programación R y lo destacan por sobre otros lenguajes como Python o Julia.\nR es uno de los lenguajes más populares para ciencia de datos e investigación científica. Es considerado uno de los lenguajes de programación más sencillos de aprender. Tres razones técnicas por las cuales aprender R por sobre otros lenguajes implican:Estuvo orientado al desarrollo estadístico desde su concepción. Casi cualquier análisis puede ejecutarse con él.Estuvo orientado al desarrollo estadístico desde su concepción. Casi cualquier análisis puede ejecutarse con él.necesita compilarse para interpretarse. Es suficiente con usar un interprete como RStudio para que las órdenes se ejecuten.necesita compilarse para interpretarse. Es suficiente con usar un interprete como RStudio para que las órdenes se ejecuten.Una de las particularidades del lenguajes que es basado en vectores. Esto simplifica el uso de funciones hacia conjuntos de datos, haciendo del lenguaje rápido en procesamientos básicos.Una de las particularidades del lenguajes que es basado en vectores. Esto simplifica el uso de funciones hacia conjuntos de datos, haciendo del lenguaje rápido en procesamientos básicos.Su amplia comunidad de desarrollo genera constantemente paquetes, manteniendo los usuarios en la vanguardia del avance científico.Su amplia comunidad de desarrollo genera constantemente paquetes, manteniendo los usuarios en la vanguardia del avance científico.Cuenta con una comunidad de soporte enorme en plataformas como StackOverflow, RStudio Community, R-Bloggers.Cuenta con una comunidad de soporte enorme en plataformas como StackOverflow, RStudio Community, R-Bloggers.Masiva cantidad de repositorios en la nube como GitHub, GitLab o Bioconductor donde se alberga toda la información que ha sido alguna vez creada y publicada con R.Masiva cantidad de repositorios en la nube como GitHub, GitLab o Bioconductor donde se alberga toda la información que ha sido alguna vez creada y publicada con R.","code":""},{"path":"prefacio.html","id":"a-quién-está-dirigido-este-libro","chapter":"Prefacio","heading":"¿A quién está dirigido este libro?","text":"El libro está planeado para llevarte desde cero en el manejo del lenguaje de programación R, sin importar el campo de la ciencia del que provengas. Los capítulos están diseñados para ser independientes entre sí. Siéntete libre de saltar entre los capítulos y seleccionar aquellos que sean de tu interés en el momento, si ya dominas conceptos más básicos.La progresión temática está adaptada los primeros cursos del programa Data Science: Estadística y Análisis de Datos en R, ofrecido por el autor del libro, Irwing S. Saldaña, través del Instituto de Ciencias Antonio Brack. El programa comenzó ser dictado en 2020, y ha recibido estudiantes de diferentes partes de Latinoamérica, El Caribe y España, de diversos perfiles profesionales: biólogos, médicos y otros profesionales de la salud, ingenieros, psicólogos, entre otros; además, profesionales de otras ramas tan afines las ciencias, como economistas, tecnólogos o especialistas en finanzas.","code":""},{"path":"prefacio.html","id":"agradecimientos","chapter":"Prefacio","heading":"Agradecimientos","text":"FALTA","code":""},{"path":"esencialesRRStudio.html","id":"esencialesRRStudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Capítulo 1 Esenciales de R y RStudio","text":"Este primer capítulo está enteramente dedicado conocer R y RStudio como programas. Se trabajará desde su instalación, configuración, uso de los paneles de RStudio, uso de librerías, repositorios, tipos de documentos en RStudio, proyectos, y cómo pedir ayuda. Este primer contacto con RStudio facilitará el uso del programa para escribir código en R (Sección 2 R básico).","code":""},{"path":"esencialesRRStudio.html","id":"instalación-de-r-y-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.1 Instalación de R y RStudio","text":"Para utilizar el lenguaje de programación R (en adelante R), proponemos el uso del ambiente de desarrollo integrado RStudio. Este programa mejorará enormemente el flujo, la velocidad y la eficiencia de trabajo con R. RStudio es más que un editor de texto que resalta la sintaxis del código de R, sino que también permite tener paneles de trabajo organizados que facilitan su uso.Requerimientos mínimos del sistema para ejecutar RStudio:Procesadores de 2 núcleos (equivalente Intel® Core™ i3 o AMD Ryzen™ 3).4 Gb RAM.Espacio en almacenamiento de 100 Gb.Requerimientos recomendados del sistema para ejecutar RStudio:Procesadores de 4 más núcleos (equivalente Intel® Core™ i5 más o AMD Ryzen™ 5 más).8 más Gb RAM.Más de 100 Gb de espacio de almacenamiento.\nPara efectos de este libro, se deberá utilizar las versiones listadas (o posteriores) de los siguientes programas, según el sistema operativo:","code":""},{"path":"esencialesRRStudio.html","id":"para-windows","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Para Windows:","text":"R version 4.1.2 (2021-11-01) – “Bird Hippie” DescargaRStudio Desktop 2021.09.1+372 DescargaRtools4.0 Descarga","code":""},{"path":"esencialesRRStudio.html","id":"para-macos","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Para macOS:","text":"R version 4.1.2 (2021-11-01) – “Bird Hippie” DescargaRStudio Desktop 2021.09.1+372 DescargaXQuartz 2.8.1. Descarga","code":""},{"path":"esencialesRRStudio.html","id":"para-ubuntudebian","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"Para Ubuntu/Debian:","text":"lo largo del libro brindamos comentarios o soporte para el uso de R o RStudio en UNIX/GNU/Linux/Ubuntu. Las principales razones son que la mayoría de usuarios que aprenden R suelen utilizar sistemas operativos de código libre, además de que algunos paquetes han presentado problemas al ser instalados.Primero, se debe preparar el índice de paquetes del sistema:Luego, ejecuta:Con lo anterior ya se tiene R instalado. Más adelante, cuando se desee actualizar R, ejecuta el código:Luego, añadir el repositorio de CRAN:Para Instalar RStudio para Ubuntu 18, Ubuntu 20 o Debian 10Los pasos aquí detallados están publicados en la web oficial de RStudio. Otros códigos interesantes puedes hallarlos en diferentes referencias como las del Center Open Middleware.","code":"sudo apt updatesudo apt -y upgradesudo apt -y install r-basesudo apt-get remove --purge r-base*sudo gedit /etc/apt/source.listsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-2021.09.2-382-amd64.deb\nsudo gdebi rstudio-server-2021.09.2-382-amd64.deb"},{"path":"esencialesRRStudio.html","id":"configuración-de-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.2 Configuración de RStudio","text":"La siguiente es una configuración sugerida para que RStudio sea visualizado de igual manera por todos los estudiantes que usen este libro, y se guíen mejor con la sintaxis del código, ordenamiento de paneles, codificación, idioma del texto, entre otros.\nFIGURA 1.1: Para iniciar la configuración de RStudio, clic en tools/ Global Options.\n\nFIGURA 1.2: Abrirá la ventana de configuraciones. En la pestaña General se verifica la versión de R que está ejecutando RStudio.\n\nFIGURA 1.3: En la pestaña Code se configura la mayor cantidad de puntos necesarios para que el código sea legible. Aquí se muestra la configuración de las pestañas Editing y Display. Las dos opciones nuevas en la versión de RStudio 1.4+ son (con flechas rojas), son importantes en mejorar la lectura del código para principiantes: una permite identificar los pares de paréntesis con colores diferenciables (Rainbow parentheses en pestaña Display), y la otra es un primer intento de crear un operador pipe nativo para el código básico de R (Use native pipe operator, |>). Este último lo habilitaremos para seguir usando el pipe de tidyverse %>%.\n\nFIGURA 1.4: En la pestaña Saving es importante definir la codificación que usarán los archivos generados por RStudio. Se recomienda dar clic en Change... y luego seleccionar la codificación UTF-8.\n\nFIGURA 0.1: Las pestañas Completion y Diagnóstico se modifican mucho, pero sí es necesario mencionar que si notáse que el programa se ejecuta muy lento, se debe considerar desactivar las opciones de diagnóstico (marcadas en rojo).\n\nFIGURA 1.5: La organización de los paneles descritos en la sección 1.4 Paneles de RStudio se configuran previamente en la pestaña Pane Layout. la izquierda: la organización por defecto. la derecha: se deberá seleccionar todas las pestañas (excepto VCS y Connections) con un check dentro del panel superior derecho. Eso hará que el panel inferior derecho cambie de nombre “TabSet”.\n\nFIGURA 1.6: El siguiente paso es cambiar la ubicación de TabSet haciendo clic y cambiando el panel por Console. Clic en Aplicar para definir los cambios.\n\nFIGURA 1.7: La configuración de R Markdown es solo para evitar que se cuelgue al usar los documentos. Definir todas las casillas y selectores como se muestra continuación en las pestañas Basic y Advanced.\n\nFIGURA 1.8: Para trabajar correctamente con los documentos R Markdown y evitar que se cuelguen, desmarcar la casilla con flecha roja. En la pestaña Spelling, se especifica el uso del lenguaje para el texto de los documentos. Selecciona de la lista “Spanish”. Clic en Aplicar para definir los cambios.\n","code":""},{"path":"esencialesRRStudio.html","id":"tema-brackinstitute-2022","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.3 Tema BrackInstitute (2022)","text":"Este es un requerimiento especial para los estudiantes que usen este libro en las clases, en vivo o grabadas, del Instituto de Ciencias Antonio Brack través de la plataforma educativa online masterX. Se les solicita instalen el tema de color de RStudio BrackInstitute para que la sintaxis del código sea del mismo color que el mostrado en clase, facilitando así su comprensión. Si eres un lector que está llevando el programa, sientete libre instalar el tema también.\nFIGURA 1.9: Vista previa del tema BrackInstitute.\nPara instalarlo, copia las líneas de código completas en la consola.Como se muestra continuación:\nFIGURA 1.10: Código de instalación del tema BrackInstitute en la consola, listo para ser ejecutado.\nFinalmente, presiona enter para comenzar su ejecución.Si todo va bien, el tema cambiará automáticamente. Para más temas desarrollados para el Instituto de Ciencias Antonio Brack, visita el repositorio Primolius-Theme de Irwing S. Saldaña.","code":"\ninstall.packages(\"rstudioapi\")\ntema_BrackInstitute <- fs::path_temp(\"tema_BrackInstitute\", ext = \"tmTheme\")\ndownload.file(\"https://raw.githubusercontent.com/irwingss/Primolius-Theme/main/BrackInstitute.tmTheme\",tema_BrackInstitute)\nrstudioapi::addTheme(tema_BrackInstitute, apply = TRUE)"},{"path":"esencialesRRStudio.html","id":"panelesRStudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.4 Paneles de RStudio","text":"Existen diversos editores de código que permiten trabajar con R, pero ninguno con la versatilidad de RStudio. El programa está dividido en paneles que uno puede reorganizar conveniencia. Más allá de la posición o el orden de los paneles, es necesario que se sepa reconocerlos por su contenido, las pestañas que contiene, entre otros. Aquí se presentan los paneles en su posición clásica, junto con algunas barras y botones que se deben conocer al iniciar con RStudio.\nFIGURA 1.11: Panel de Trabajo. Aquí aparecerán los archivos de trabajo de R, sean R script o R Markdown. Además, es donde aparecen las bases de datos cuando se pide visualizarlas en RStudio.\n\nFIGURA 1.12: Consola. Es el panel donde se imprimen los resultados textuales y numéricos junto con el código que los genera.\n\nFIGURA 1.13: Panel de pestañas: aquí encontrarás: el ambiente (Environment) donde se guardan los objetos creados o cargados en RStudio; la historia (History) de las ejecuciones realizadas durante la sesión de RStudio; archivos (Files) para visualizar los archivos de la carpeta de trabajo actual (definida como la carpeta “documentos” por defecto); la pestaña de visualización de gráficos estáticos (Plots); pestaña de instalación y actualización de paquetes (Packages); la pestaña de ayuda (Help); y el visualizador (Viewer) de gráficos animados, gráficos 3D, objetos HTML. las conexiones (Connections) que se pueden realizar con bases de datos (Oracle, SQL, Salesforce, Spark, Hipe, entre otros); tutoriales (tutorial) precargados usando shiny para el uso básico de R y RStudio.\n\nFIGURA 1.14: Barra de opciones rápidas.\n\nFIGURA 1.15: Barra de menús. De las pestañas más importantes: File nos permite crear o cargar archivos; Session, definir espacio de trabajo actual; y Tools, ingresar las configuraciones de RStudio. Usos más avanzados, como la depuración de código o el uso de versiones de control (Git), también se manejan desde las opciones de esta barra.\n","code":""},{"path":"esencialesRRStudio.html","id":"librerías-y-repositorios","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.5 Librerías y Repositorios","text":"Una de las mayores virtudes de R es la enorme comunidad de desarrollo que ha creado asombrosas funcionalidades para simplificarle el flujo de trabajo otras personas. Estas funcionalidades en realidad son funciones (para mayor detalle sobre ellas, visita la sección 2.7 Funciones). La estructura que almacena funciones se conoce como librería o paquete. Para poder una función en RStudio, se debe instalar previamente el paquete que la contiene. Los paquetes están publicados en repositorios. Los principales son:CRAN (de Comprehensive R Archive Network en inglés), el repositorio oficial de R. Solo los paquetes aprobados y con soporte de fallos constante son publicados aquí.CRAN (de Comprehensive R Archive Network en inglés), el repositorio oficial de R. Solo los paquetes aprobados y con soporte de fallos constante son publicados aquí.GitHub, el repositorio más grande oficial en el que se pueden encontrar paquetes de R. Muchos repositorios en CRAN mantienen versiones beta en GitHub para su testeo.GitHub, el repositorio más grande oficial en el que se pueden encontrar paquetes de R. Muchos repositorios en CRAN mantienen versiones beta en GitHub para su testeo.Bioconductor, el mayor repositorio de paquetes asociados bioinformática y ciencias afines.Bioconductor, el mayor repositorio de paquetes asociados bioinformática y ciencias afines.\nFIGURA 1.16: Instalación manual de paquetes.\nSi se requiere instalar paquetes de CRAN (e.g., tidyverse) con código, se utilizará un código similar este:Para paquetes desde GitHub (eg., rbrack del repositorio de la cuenta irwingss), se instalará previamente el paquete de CRAN devtools, para luego usar una función almacenada en él install_github():","code":"\ninstall.packages(\"tidyverse\")\ninstall.packages(\"devtools\")\ndevtools::install_github(\"irwingss/rbrack\")"},{"path":"esencialesRRStudio.html","id":"actualización-de-librerías","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.6 Actualización de librerías","text":"Es importante mantener actualizada la paquetería. En los repositorios de cada paquete se suelen reportar fallos o inconsistencias que son resueltas y liberadas como una actualización. Se recomienda hacer esto al menos una vez por mes.\nFIGURA 1.17: Actualización manual de paquetes de CRAN.\nLos paquetes instalados desde repositorio oficial, deberán ser actualizados “reinstalándolos” de manera forzada. Para forzar la instalación de un paquete ya instalado desde github, se usa el argumento force=TRUE:Para activar un paquete utiliza la función library():Desde el momento que se ejecuta el código anterior, tidyverse estará activo hasta que se cierre o reinicie el programa RStudio.Para acceder puntualmente la función bind_cols() de la librería dplyr, se usa:","code":"\ninstall.packages(\"devtools\")\ndevtools::install_github(\"irwingss/rbrack\", force=TRUE)\nlibrary(tidyverse)\ndplyr::bind_cols()"},{"path":"esencialesRRStudio.html","id":"tipos-de-documentos-en-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.7 Tipos de documentos en RStudio","text":"Luego de conocer los paneles de RStudio, es necesario crear los espacios donde se escribirán las órdenes modo de código. Estos documentos, como cualquier editor de texto, se pueden guardar o compartir, por ejemplo, mediante un correo electrónico.","code":""},{"path":"esencialesRRStudio.html","id":"r-script-.r","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.7.1 R Script (.R)","text":"Es el documento más simple donde puedo escribir R. Es un editor de texto como el bloc de notas de cualquier sistema operativo. obstante, este editor lee y colorea la sintaxis especial del código de R. Esto permite identificar cada parte del código según lo que sea: una variable, una función, un número, un texto, símbolos especiales, operadores, entre otros; simplificando enormemente la lectura del código y el aprendizaje de R.\nFIGURA 1.18: Procedimiento para abrir un documento de RScript usando el menú File/ New File/ R script.\n\nFIGURA 1.19: Apariencia de un R script con código. Notar los colores diferenciales para cada parte del código.\n","code":""},{"path":"esencialesRRStudio.html","id":"r-markdown-.rmd","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.7.2 R Markdown (.Rmd)","text":"Es un formato de archivo para la creación de documentos dinámicos. Estos pueden ser: páginas web, aplicaciones shiny, diapositivas, o cualquier tipo de reporte que puede ser exportado en formato .docx, .pdf o .html. Utiliza la sintaxis de Markdown pero posibilitando la inclusión de “pedacitos de código”, la traducción literal de code chunk. Los chunk se comportan como pequeños R scripts embebidos en el documento de texto plano escrito con sintaxis Markdown.Suena extremadamente complejo el decir “sintaxis Markdown”, pero lo es. Una vez uno sabe utilizar R, aprender Markdown resulta sencillo. Puedes aprender utilizar R Markdown con el libro en línea R Markdown: Definitive Guide en su versión de 2018, o el más actualizado R Markdown Cookbook de 2020. Ambos libros han sido escritos en colaboración de Yihui Xie, uno de las mentes brillantes de RStudio y quien le debemos el uso de documentos dinámicos en RStudio.se profundizará en el uso de R Markdown, dado que es el objetivo del programa, pero se utilizará frecuentemente durante las clases. Si eres un estudiante que ha está llevando el programa, podrás siempre utilizar tanto R script como R Markdown para ejecutar tus códigos. Se recomienda fuertemente comenzar utilizar este último dada la ventaja de permitir hacer anotaciones de texto plano como en cualquier editor de texto común.\nFIGURA 1.20: Procedimiento para abrir un documento de R Markdown usando el menú File/ New File/ R Markdown....\n\nFIGURA 1.21: Ventana emergente para darle nombre al documento R Markdown.\n\nFIGURA 1.22: Aparecerá un archivo R Markdown con texto de ejemplo para que tengamos una idea de qué se puede hacer con él.\n\nFIGURA 1.23: knit es una función del paquete knitr, desarrollado por Yihui Xie y colaboradores, para la generación de reportes dinámicos con R Markdown. Haciendo clic en el botón se despliega la lista de posibles exportaciones del documento. La exportación Knit HTML produce una página web de reporte.\n\nFIGURA 1.24: Tras hacer clic en Knit HTML, será necesario guardar en el almacenamiento de la computadora el documento, cuya extensión es .Rmd.\n\nFIGURA 1.25: En la consola, o en una pestaña Render, comenzará mostrarse la ejecución del código que knit desplegó para exportar el R Markdown página web HTML.\n\nFIGURA 1.26: Vista del archivo HTML generado partir del R Markdown de ejemplo.\n","code":""},{"path":"esencialesRRStudio.html","id":"proyectos-de-rstudio","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.8 Proyectos de RStudio","text":"Este es el santo grial del uso de RStudio para crear una diversidad de repositorios: de trabajo, colaboraciones, diapositivas, páginas web, blogs, libros, entre otros. Para poder usar un proyecto de RStudio con dichos propósitos, se necesita aprender usar las versiones de control de proyectos con Git y Shell. Puedes iniciar en este tema con una genial presentación de su uso, elaborado por University Zurich.Este apartado solo se centrará en el uso de proyectos para trabajos locales. Una vez se domine este uso, será más sencillo entender cómo elaborar otras cosas más complejas.Aquí se muestran los pasos para crear un proyecto local:\nFIGURA 1.27: Para crear un proyecto local, ir menu File/ New Project....\n\nFIGURA 1.28: Para efectos de este libro, selecciona la primera opción. Clic en New Directory para crear en el almacenamiento de tu computador una carpeta nueva donde se almacenará todo los respecto este proyecto. Existing Directory solo se usará cuando ya se ha creado de antemano una carpeta donde se quiere almacenar el proyecto. Para versiones de control con Git y GitHub, el proceso se inicia con Version Control, para crear la carpeta de trabajo (tal como las anteriores opciones), pero el proyecto estará casi listo para hacer commit y publicar los cambios en GitHub.\n\nFIGURA 1.29: En Directory name: escribe el nombre del proyecto, mismo que también tendrá la nueva carpeta de trabajo que se creará en tu computador. En el botón Browse..., podrás ubicar una carpeta madre donde irás creando proyectos para mantenerlos todos ordenados y accesibles. Puede ser una subcarpeta dentro de documentos, con algún nombre genérico como “proyectos”, “proyectos de R”, entre otros. Finalmente, clic en Create Project.\n\nFIGURA 1.30: Se abrirá una nueva sesión con título idéntico la carpeta de proyecto creada (aquí “Investigación ”). Nótese el ambiente (environment) en blanco. Todas las variables y funciones que se creen o carguen en el proyecto permanecerán en este ambiente específico del proyecto.\n\nFIGURA 1.31: En la pestaña de Files se verá el contenido de todo lo que copiemos dentro de la carpeta del proyecto. Puedes acceder la carpeta de trabajo haciendo clic en / Show Folder New Windows. Allí podrás pegar archivos o documentos que necesites cargar posteriormente en tu proyecto.\n\nFIGURA 1.32: Para crear un nuevo proyecto, abrir uno existente o cerrar el proyecto actual (flecha roja), existe el menú de acceso rápido que tiene el mismo nombre que tu proyecto actual. Para ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd().\nPara ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd().Para ver la dirección de la carpeta de trabajo en consola, ejecuta la función getwd().Si por el contrario necesitas definir un nuevo directorio de trabajo manualmente, ejecuta la función setwd() definiendo dentro de ella la dirección deseada. Por ejemplo:\n\nsetwd(\"C:/Users/irwin/Documents/Otra_Carpeta/Subcarpeta B\")\nSi por el contrario necesitas definir un nuevo directorio de trabajo manualmente, ejecuta la función setwd() definiendo dentro de ella la dirección deseada. Por ejemplo:setwd(\"C:/Users/irwin/Documents/Otra_Carpeta/Subcarpeta B\")olvides las comillas al inicio y final de la dirección, ni que los slash usados son forwardslash (hacia delante) /, backslash (hacia atrás) \\.\nolvides las comillas al inicio y final de la dirección, ni que los slash usados son forwardslash (hacia delante) /, backslash (hacia atrás) \\.","code":""},{"path":"esencialesRRStudio.html","id":"pedir-ayuda","chapter":"Capítulo 1 Esenciales de R y RStudio","heading":"1.9 Pedir ayuda","text":"Pedir ayuda sin internet es algo posible en RStudio. Todas las librerías instaladas contienen información de respaldo sobre el uso de cada función que almacenan.Para acceder ella, se debe acceder la pestaña Help.\nFIGURA 1.33: Accediendo la pestaña Help para buscar ayuda sobre la función mean(). Nótese que solo se busca el nombre de la función sin paréntesis.\n\nFIGURA 1.34: Detalle de la ayuda de la función mean(). Es muy útil revisar la sección Arguments donde se describen los argumentos, además los ejemplos de uso.\nPara pedir ayuda en internet, se recomienda el uso del buscador exclusivo de temas en R conocido como rseek.\nFIGURA 1.35: Búsqueda de ayuda para la función mean() en rseek. Puedes acceder directamente la viñeta (PDF o web) del uso de la función (que es la misma información que en la búsqueda en RStudio), documentación, funciones asociadas, paquetes populares que usen mean, wikipedia, blogs como R-Bloggers donde expliquen su uso, Issues que son problemas reportados para la función, o paquetes que contengan una función con el mismo nombre.\nEs posible pedir ayuda con código. Ejecutando la función help() conteniendo el nombre de la función que se desea buscar, abrirá automáticamente la página de ayuda en la pestaña Help. Por ejemplo:help(varimax).Es posible pedir ayuda con código. Ejecutando la función help() conteniendo el nombre de la función que se desea buscar, abrirá automáticamente la página de ayuda en la pestaña Help. Por ejemplo:help(varimax).Otra forma de obtener el mismo resultado es usando el símbolo ?. Por ejemplo: ?varimax.Otra forma de obtener el mismo resultado es usando el símbolo ?. Por ejemplo: ?varimax.Si se necesita buscar un término, una función, se usaría el simbolo doble ?? antes del término buscar. Esta búsqueda es más lenta porque es más profunda y nos da todas las funciones donde se use dicho término. Por ejemplo, para buscar en todos archivos de ayuda de R el término deviance: ??deviance.\nSi se necesita buscar un término, una función, se usaría el simbolo doble ?? antes del término buscar. Esta búsqueda es más lenta porque es más profunda y nos da todas las funciones donde se use dicho término. Por ejemplo, para buscar en todos archivos de ayuda de R el término deviance: ??deviance.","code":""},{"path":"rbasico.html","id":"rbasico","chapter":"Capítulo 2 Primer contacto con R","heading":"Capítulo 2 Primer contacto con R","text":"Este capítulo se centra en el manejo y comprensión del lenguaje de programación R (en adelante: “R”) en nivel introductorio. Se asume que el lector tiene instalados y configurados los programas R, RStudio y algún otro programa de soporte para el manejo de paquetes. Si cuentas con ninguno en tu computadora, visita el capítulo 1 Esenciales de R y RStudio.Una ventaja de los lenguajes de programación es que permiten al usuario definir una secuencia de órdenes (comandos) adaptadas los requerimientos analíticos que tenga. El flujo de trabajo completo, el paso paso, queda escrito en el código. Este puede ser compartido con colegas en trabajos colaborativos.Antes de aprender sobre los métodos estadísticos de análisis que se revisarán en este libro, se necesita “hablar” correctamente el lenguaje R. Aprenderás trabajar con el código básico en R, crear variables para almacenar información, crear funciones para agilizar el flujo de trabajo, utilizar tidyverse para el manejo y limpieza de bases de datos, entre otros códigos útiles para inicar con R.La forma simplificada de cómo funciona R se resume en escribir una orden, presionar “algo” para que la computadora comience procesar la orden, y luego recibir un resultado textual o gráfico. Básicamente lo que hace cualquier otro lenguaje de programación.obstante, R es considerada una de los mejores lenguajes informáticos si nuestra orientación es más la investigación científica que el desarrollo informático. Otros lenguajes informáticos populares entre científicos son Python, MATLAB, C, C++, JavaScript, SQL, Scala, Julia, SAS, pero ninguno esta tan orientado al desarrollo estadístico como R.\nFIGURA 2.1: Ejemplo de uso de RStudio en el análisis estadístico.\nR es considerada como una calculadora con esteroides dado que puedes aplicar matemáticas con él; aquella ciencia sobre la que se cimentan casi todas las demás. Si puedes hacer ello, tienes las puertas abiertas aplicar análisis estadísticos, generar gráficos y todo lo que te imagines. Y pues sí, también hay cosas algo bizarras en R, como poder crear tu propio calendario o usar gatitos en un gráfico de dispersión de puntos.diferencia de los lenguajes humanos (idiomas), un lenguaje de programación debe estar escrito la perfección. hay espacio para una coma mal puesta, un paréntesis olvidado, o un nombre errado. La computadora solo ejecutará la orden si todo está escrito exactamente, tal y como debe ser. Todos los ejemplos de este libro pueden ser ejecutados correctamente si se escriben como es mostrado, y si instalaste todo lo necesario para trabajar (revisa las secciones Prerrequisitos y 1 Esenciales de R y RStudio.","code":""},{"path":"rbasico.html","id":"ejecutar-código","chapter":"Capítulo 2 Primer contacto con R","heading":"2.1 Ejecutar código","text":"¿Alguna vez hiciste un histograma de frecuencias?. Hacer uno de manera exploratoria es muy sencillo en R. El siguiente código hará dos cosas en un solo paso:Creará un conjunto de 10,000 datos aleatorios que siguen en la distribución normal.Generará el gráfico del histograma de frecuencias utilizando el conjunto previamente creado.Por ahora se ahondará en el detalle de qué cosa es rnorm() o hist().Para replicarlo, es necesario escribir el código exacto, para luego dar la orden, es decir, ejecutar el código. La ejecución se hace presionando en el teclado de tu computador control + enter o command + enter (usuarios macOS).Existen otros atajos de teclado para ejecuciones especiales.Ejecutar todas las líneas de código del script: control (o command) + shift + enter.Ejecutar desde el inicio del script hasta la línea actual: control (o command) + Alt + B.Ejecutar desde la línea actual hasta el final del script: control (o command) + Alt + E.Una pregunta que siempre genera confusión es la presencia de unos corchetes [1] en los resultados vistos tanto en consola como en este libro. Esto es parte de un resultado por si mismo, es la posición del elemento mostrado justo la derecha del corchete.Si se ejecuta el símbolo : entre dos números, R generará el rango de valores enteros entre dichos números, incluyéndolos.El resultado muestra los confusos [] la izquierda del primer elemento de cada fila del conjunto de datos resultante, indicando su posición dentro de la secuencia de elementos.","code":"\nhist(rnorm(10000))\n1:100\n##   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19\n##  [20]  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38\n##  [39]  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57\n##  [58]  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76\n##  [77]  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95\n##  [96]  96  97  98  99 100"},{"path":"rbasico.html","id":"r-como-calculadora","chapter":"Capítulo 2 Primer contacto con R","heading":"2.2 R como calculadora","text":"Como ya se había mencionado antes, R nos permite operar con código. La cosa más sencilla para hacer en R es sumar.TABLA 2.1: Operaciones (símbolos) aritméticas en R","code":"\n10 + 10\n## [1] 20"},{"path":"rbasico.html","id":"funciones-matemáticas","chapter":"Capítulo 2 Primer contacto con R","heading":"2.2.1 Funciones matemáticas","text":"Operaciones más complejas necesitan el uso de funciones. Estas son “secuencias de ordenes empaquetadas con un nombre pequeño y recordable” — la información sobre las funciones será desarrollada más adelante (2.6 Funciones y 6.2 Creación de Funciones). En la siguiente tabla se presentan las funciones matemáticas más comunes en R:TABLA 2.2: Operaciones matemáticas en R. Estos procedimientos matemáticos vienen predefinidos como ordenes denominadas “Funciones”.","code":""},{"path":"rbasico.html","id":"operadores-lógicos-y-relacionales","chapter":"Capítulo 2 Primer contacto con R","heading":"2.3 Operadores lógicos y relacionales","text":"Además de poder operar matemáticamente dos objetos, los lenguajes de programación como R usan condiciones lógicas para definir estados de verdadero (TRUE) o falso (FALSE). Existen dos tipos de operadores en R para de definir un estado lógico:Los operadores relacionales permiten comparar dos objetos y definir si la condición solicitada es verdadera o falsa. Por ejemplo: al preguntar R si 10 es mayor que 9, definirá la condición lógica como verdadera. Este tipo de comparaciones pueden ser mayor, menor, mayor igual, menor igual, igual, es igual o negación de un valor.Los operadores lógicos permiten definir una condición lógica en base los resultados de dos comparativas relacionales. Por ejemplo, si se desea filtrar las filas de una tabla para que se cumpla la condición 1: valores mayores 10 en la columna y la condición 2: valores menores que 5 en la columna B, es preciso que ambas condiciones se cumplan para que una fila se muestre en el resultado final, gracias al operador y. Si la condición usa el operador o, tanto se cumpla una u otra condición, la fila se mostrará en el filtrado final.En la siguiente tabla se muestran los operadores lógicos (últimos dos) y relacionales.TABLA 2.3: Operadores relacionales y lógicos en R, modos de uso y resultado lógico esperado (Verdadero o Falso).","code":""},{"path":"rbasico.html","id":"comentar-el-código","chapter":"Capítulo 2 Primer contacto con R","heading":"2.4 Comentar el código","text":"Una forma de asegurar que en el futuro el código escrito sea entendible, incluso por nosotros mismos, es comentándolo. Dejar comentarios nos ayudará recordar la intención con la que se escribió una sección determinada de los comandos.Para comentar en R, se requiere colocar el símbolo # la izquierda del texto ser considerado comentario.Como queda en evidencia, importa si el comentario está en solitario en una línea de código, o si está la derecha de algo que sí se quiere ejecutar. Esto afecta el resultado de la operación.","code":"\n# Esta es una suma \n2 + 2 \n## [1] 4\n\n10 * 2 # + 3029\n## [1] 20"},{"path":"rbasico.html","id":"creación-de-variables","chapter":"Capítulo 2 Primer contacto con R","heading":"2.5 Creación de variables","text":"Las variables son espacios virtuales, que puede contener de elementos o estar vacíos. Imagina que en una tabla de datos es un objeto “contenedor de mediciones” de un trabajo de investigación. Dicha tabla puede ser considerada una variable u objeto en R. Más adelante se hablará sobre los tipos de variables que existen en R.Una forma sencilla de comenzar con variables es guardar un valor numérica en la memoria de trabajo de RStudio, también llamado ambiente (pestaña Environment). En este sentido, se necesita asignar el contenido un nombre para que RStudio lo “recuerde”, haciendo uso de un operador de asignación <-. Para crear una variable llamada NUM conteniendo el número 2022.Si se desea ver el contenido de una variable previamente guardada en el ambiente, basta con ejecutar el nombre d ela variable:o usar la función print() para imprimirla en la consola:Una versión frecuentemente usada en ejemplos de R, involucra colocar la asignación entre paréntesis para que hacer dos cosas la vez: guardar la variable en el ambiente y mostrar su contenido en la consola.Existe la posibilidad de asignar con un operador de asignación inverso ->. Toma en cuenta qué debe ir en la cola (contenido) y en la cabeza (nombre) del operador. En otras palabras, la “flecha” que se forma con este operador siempre apunta al futuro nombre de la variable. Recuerda, la variable existe hasta que se ejecute y aparezca dicho nombre en el ambiente de RStudio.El símbolo = también funciona, pero, por convención, este se debe usar para crear variables. Se usará dentro de las funciones para “asignar” contenido los argumentos de las mismas (se explicará continuación).es posible continuar hablando de variables sin antes hacer una introducción las funciones en R.","code":"\nNUM <- 2022\nNUM\n## [1] 2022\nprint(NUM)\n## [1] 2022\n(NUM <- 2022)\n## [1] 2022\n# Operador de asignación inverso\n2022 -> NUM\n# Mal uso del símbolo =\nNUM = 2022\n\n# Buen uso del símbolo = : siempre dentro de una función.\n# Calcular el logaritmo en base 2 de 10\nbs <- 2 + 8\nlog(10, base = bs)\n## [1] 1"},{"path":"rbasico.html","id":"funciones","chapter":"Capítulo 2 Primer contacto con R","heading":"2.6 Funciones","text":"Se puede idealizar una función como una secuencia de órdenes (líneas de código) que tienen como objetivo aplicarle un procedimiento (gráfico, estadístico, de modificación o transformación, entre otros) un objeto de entrada (input) para generar un resultado (ouput). Dichas líneas de código están empaquetadas y almacenadas con un nombre.Reconocer una función en R es tarea sencilla, siempre será un nombre seguido de paréntesis. Por ejemplo, la función para calcular la desviación estándar de un conjunto de datos es sd(), que proviene del inglés standard deviation. Dentro de los paréntesis se deben colocar los argumentos de la función. El argumento más sencillo que algunas funciones necesitan es un conjunto de datos, y es justamente lo único que necesita sd().Si se ejecuta únicamente el nombre de una función existente en RStudio, en la consola se mostrará el contenido de la misma, la secuencia de órdenes que le dan forma la función. Ejecuta el sd para ver su contenido:La secuencia de órdenes dentro de sd es corta. Básicamente utiliza la función sqrt() para sacarle la raíz cuadrada la función var(), esta última calcula la varianza de un conjunto de datos. La estructura del código es propiamente la fórmula matemática para el cálculo de la desviación estándar. Aunque, decir verdades, el código luce más complejo, y es debido que aquí la función var() contiene argumentos condicionales para pedir que evalúe si el objeto x es correcto para la función, o si se necesita un cambio antes de procesarx en sd(). Pierde cuidado si se entiende mucho por ahora, es necesario comprender las funciones este nivel al iniciar con R.","code":"\n# Para crear un conjunto de datos en R se usa la función c()\nx <- c(7,9,3,4,5,3,7,8)\n\n# Usando sd() para hallar la desviación estándar de x\nsd(x)\n## [1] 2.315\nsd\n## function (x, na.rm = FALSE) \n## sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n##     na.rm = na.rm))\n## <bytecode: 0x0000000030eeed18>\n## <environment: namespace:stats>"},{"path":"rbasico.html","id":"funciones-básica-útiles","chapter":"Capítulo 2 Primer contacto con R","heading":"2.7 Funciones básica útiles","text":"En gran medida, las primeras etapas del aprendizaje de R involucran entender, siendo prioritario comprender qué dice un código y cómo se interpreta, más allá de escribirlo de memoria. En este sentido, la mayoría de funciones están nombradas de tal manera que indican para qué se pueden usar. Un dominio básico del idioma inglés será de mucha utilidad, principalmente porque casi todas las funciones de R están nombradas en inglés.Para facilitar esta primera etapa de aprendizaje, aquí se muestra una lista de funciones básica útiles, tanto nivel de programación como de análisis de datos, que serán clave para iniciar con R.Los ejemplos de uso de la tabla son aplicables, siempre y cuando se ejecute antes el siguiente código para activar la base de datos iris, y crear los vectores x, y, y letras.TABLA 2.4: Cincuenta funciones básicas útiles en R.","code":"\ndata(\"iris\")\nset.seed(123)\nx <- rnorm(30,2,1)\ny <- rnorm(30,5,3)*x/2\nletras <- c(\"A\", \"B\", \"A\", \"A\")"},{"path":"estructurasdatos.html","id":"estructurasdatos","chapter":"Capítulo 3 Estructuras de datos","heading":"Capítulo 3 Estructuras de datos","text":"","code":""},{"path":"estructurasdatos.html","id":"clasificación-de-variables","chapter":"Capítulo 3 Estructuras de datos","heading":"3.1 Clasificación de variables","text":"Toda variable cuenta con dos atributos: clase y estructura. Para entender cómo se almacenan los datos en R, se necesita conocerlas detalle.\nFIGURA 2.1: Analogía del gato en la caja para entender las variables. Aquí, el gato es el contenido; la caja, la estructura. Esta “variable” puede ser de la clase “contenedora de gatos” y estructura “cartón”. Así mismo, habrán variables contenedoras de números, de caracteres, de valores lógicos, y estos estarán ordenados de diferente manera.\n","code":""},{"path":"estructurasdatos.html","id":"clases-atómicas","chapter":"Capítulo 3 Estructuras de datos","heading":"3.1.1 Clases atómicas","text":"Según su contenido, en R existen seis clases básicas (o atómicas) de variables:Clase lógica: identificado con el nombre logicalClase caracter o texto: identificado con el nombre characterClase número con decimales: conocidos como doubles, identificado con el nombre numericClase número entero: identificado con el nombre integerClase número complejo: identificado con el nombre complexClase crudo o en bits: identificado con el nombre rawDe estos, los últimos tres serán utilizando lo largo de este libro. Quizá surja la pregunta de por qué usar números enteros. En realidad una variable del tipo numeric ya incluye enteros y con decimales (es decir, todos los números reales). Para efectos de una gran cantidad de funciones estadísticas, en R es relevante brindarle números enteros como integer, o diferenciarlos de numeric.","code":""},{"path":"estructurasdatos.html","id":"estructuras-de-datos","chapter":"Capítulo 3 Estructuras de datos","heading":"3.1.2 Estructuras de datos","text":"Según su estructura, las variables pueden tener una forma de almacenamiento con diferente dimensionalidad.La estructura más básica de R es el vector, con una sola dimensión.El vector se convierte en un factor si es que contiene información categorizada, y sigue teniendo una dimensión.Si vectores se colocan verticalmente, y se apilan lado lado, se convierten en una estructura de dos dimensiones. Dependiendo de sus características estas pueden ser:\nmatrices, data frames o tibbles.Se puede considerar los arrays como arreglos multidimensionales de vectores.Finalmente, las listas son estructuras de datos básicas. se consideran dimensionales dado que almacena otras estructuras de datos secuencialmente. Una lista puede albergar vectores, factores, matrices, data frames, tibbles, arrays, incluso otras listas.\nFIGURA 1.1: Estructuras informáticas para almacenar de datos en el lenguaje R.\n","code":""},{"path":"estructurasdatos.html","id":"vectores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.2 Vectores","text":"R es un lenguaje basado en vectores. La estructura de almacenamiento de datos más básica es el vector. Un vector contiene elementos, que pueden ser números, textos, valores lógicos, y de cualquier clase atómica. obstante, solamente puede almacenar elementos de una única clase atómica la vez. Solo números, solo texto, solo valores lógicos.Para crear un vector, se utiliza la función c() donde especifíco los elementos directamente:Un operador de gran utilidad es : que permite crear rangos de números enteros.Además de c(), existe la función vector() para crear vectores vacíos de una longitud y clase atómica determinado.La razón para usar vector() es para crear un contenedo vacío de una longitud determinada, el cual podremos ir llenando con los resultados de un loop. Nos adelantaremos un poco con el código un tanto más avanzado, pero verás el uso de esta función.Otras formas especiales de crear vectores implica el uso de seq() para crear secuencias numéricas, o rep() para repetir de algún valor una determinada cantidad de veces.Para crear una secuencia del 10 al 100 cada 5 elementos, se usa el argument = dentro de seq()Para crear una secuencia del 36 números entre 10 y 100, se usa el argument length = dentro de seq()Las repeticiones implica definir dos argumentos: lo que se repetirá, y la cantidad de veces. Para repetir el carácter América 10 veces, se usa:","code":"\n# Vector numérico\nnumeros <- c(1,2,3,4,5,6)\nnumeros\n## [1] 1 2 3 4 5 6\n1:6\n## [1] 1 2 3 4 5 6\n# Vector lógico de longitud (length) 10\nvLog <- vector(\"logical\", length=10)\nvLog\n##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n# Vector de caracteres de longitud (length) 15\nvCha <- vector(\"character\", length=15)\nvCha\n##  [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n\n# Vector de números de longitud (length) 20\nvNum <- vector(\"numeric\", length=20)\nvNum\n##  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\nvNum <- vector(\"numeric\", length=6)\nvNum\n## [1] 0 0 0 0 0 0\n\n# Loop donde a una secuencia de números del 1 al 6\n# se le multiplica a cada uno por 100\nfor (i in 1:6){\n  vNum[i] <- i * 100\n}\n\n# Vector ya rellenado por el loop\nvNum\n## [1] 100 200 300 400 500 600\nseq(10, 100, by=5)\n##  [1]  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100\nseq(10, 100, length=36)\n##  [1]  10.00  12.57  15.14  17.71  20.29  22.86  25.43  28.00  30.57  33.14  35.71\n## [12]  38.29  40.86  43.43  46.00  48.57  51.14  53.71  56.29  58.86  61.43  64.00\n## [23]  66.57  69.14  71.71  74.29  76.86  79.43  82.00  84.57  87.14  89.71  92.29\n## [34]  94.86  97.43 100.00\nrep(\"América\", 10)\n##  [1] \"América\" \"América\" \"América\" \"América\" \"América\" \"América\" \"América\" \"América\"\n##  [9] \"América\" \"América\""},{"path":"estructurasdatos.html","id":"factores","chapter":"Capítulo 3 Estructuras de datos","heading":"3.3 Factores","text":"Los factores son tipos especiales de vectores, donde R evalúa los valores únicos de la secuencia y los define como categorías. Son muy útiles en programación dado que nos permiten graficar, por ejemplo, con un color diferenciado cada nivel de una variable categorica. Imagina que se requiere hacer un gráfico de dispersión de puntos para ver la relación entre dos variables, pero permitiendo que el color de los puntos refleje el grupo al que pertenece cada observación:\nFIGURA 1.8: Ejemplo de uso del conjunto de datos Grupos para colorear los puntos del gráfico de enfrentamiento de las variables Pétalo y Sépalo.\nPara crear un factor se utiliza la función factor(), y un vector dentro de ella. La función evaluará los valores únicos del vector y definirá los niveles del factor:Cada factor muestra sus niveles (Levels) al final de la secuencia. Se puede conocer cuales son los niveles de un factor guardado en el ambiente, utilizando la función levels():El orden de los niveles es importante. Por defecto se ordenan los niveles de menor mayor (si son números), o de la la Z (sin son texto). Para una regresión, para un gráfico, el orden afecta los resultados. En una regresión lineal, el primer nivel de un factor puede ser considerado como nivel base, y las interpretaciones se harán como factores de aumento o disminución de los otros niveles respecto al nivel base. En un gráfico, el orden de los colores, o las etiquetas de un eje, seguirán este orden.Para cambiar el orden, las alternativas son variadas. Si solo se desea definir un nivel base, y el orden de los demás niveles es importante, se usa relevel() con el segundo argumento especificando el nivel que será el nuevo nivel base.Si se necesita especificar un orden definido manualmente para todos los niveles, es mejor definirlo al momento de crear el factor, usando el argumento levels=:Por otro lado, si hay necesidad de cambiar el nombre de algún (o algunos) nivel(es), se puede usar un vector con los cambios deseados como contenido del argumento labels=. El orden de las etiquetas cambiadas debe seguir el mismo orden original de los niveles:Como fue evidente, al crear un factor se puede usar como insumo un vector, como vectorN, u otro factor previamente creado, como F1.","code":"\n# Crear un vector de texto cualquiera \nvectorC <- c(\"A\",\"B\",\"A\",\"A\",\"A\",\"A\",\"B\",\"A\",\"C\",\"C\",\"B\")\n\n# Crear un vector de texto cualquiera\nvectorN <- c(1,1,2,1,2,2,1,1,2,1,2,1,2,2,2,1)\n\n# Crear factores en base a los vectores\nfactor(vectorC)\n##  [1] A B A A A A B A C C B\n## Levels: A B C\nfactor(vectorN)\n##  [1] 1 1 2 1 2 2 1 1 2 1 2 1 2 2 2 1\n## Levels: 1 2\n# Guardar el factor\nF1 <- factor(vectorC)\n\n# Revisar los niveles del factor\nlevels(F1)\n## [1] \"A\" \"B\" \"C\"\n# Especificando el primer nivel como \"C\" \nF1_cambiado <- relevel(F1, \"C\")\nF1_cambiado\n##  [1] A B A A A A B A C C B\n## Levels: C A B\n# Crear un factor con niveles ordenados manualmente\nF2 <- factor(vectorC, levels=c(\"B\",\"C\",\"A\"))\n\n# Revisar los niveles de F2\nlevels(F2)\n## [1] \"B\" \"C\" \"A\"\n# Crear un factor con cambie de etiqueta\nF3 <- factor(F1, labels=c(\"Absoluto\", \"B\", \"Cambio\"))\n\n# Revisar los niveles de F3\nlevels(F3)\n## [1] \"Absoluto\" \"B\"        \"Cambio\"\n\n# Revisando el contenido original (sin cambios) en F1\nF1\n##  [1] A B A A A A B A C C B\n## Levels: A B C\n\n# Revisar el contenido de F3\nF3\n##  [1] Absoluto B        Absoluto Absoluto Absoluto Absoluto B        Absoluto\n##  [9] Cambio   Cambio   B       \n## Levels: Absoluto B Cambio"},{"path":"estructurasdatos.html","id":"matrices","chapter":"Capítulo 3 Estructuras de datos","heading":"3.4 Matrices","text":"Las matrices son la primera estructura de dos dimensiones aquí presentada. Son útiles cuando se desee aplicar álgebra de matrices. Pero en el día día, son rudimentarias y limitantes. Sobre esto último, se comporta como un vector: permiten almacenar solamente un tipo de elemento en toda la tabla.Para crear una matriz, podemos tomar un vector e ir ordenando los elementos de manera vertical u horizontal en una tabla de \\(n*p\\) dimensiones (donde: \\(n\\) es la cantidad de filas y \\(p\\) de columnas), utilizando la función matrix().Al encajar el contenido del vector de longitud \\(n\\) en forma de matriz (dos dimensiones) sin especificar la cantidad de columnas o filas, crea una matriz de una sola columna con \\(n\\) filas.Para definir la cantidad de columnas y filas se usan los argumentos ncol= y nrow=, respectivamente:Por defecto las columnas se llenan columna por columna. Para cambiar el comportamiento de llenado fila por fila, se usa:En este libro se hace uso extenso de matrices, por lo que es necesario conocerlas mayor detalle.","code":"\n# Crear un rango de valores cualquiera\nvector1<-1:10\nmatrix(vector1)\n##       [,1]\n##  [1,]    1\n##  [2,]    2\n##  [3,]    3\n##  [4,]    4\n##  [5,]    5\n##  [6,]    6\n##  [7,]    7\n##  [8,]    8\n##  [9,]    9\n## [10,]   10\nmatrix(vector1, ncol=2, nrow=5)\n##      [,1] [,2]\n## [1,]    1    6\n## [2,]    2    7\n## [3,]    3    8\n## [4,]    4    9\n## [5,]    5   10\nmatrix(vector1, ncol=2, nrow=5, byrow=TRUE)\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n## [3,]    5    6\n## [4,]    7    8\n## [5,]    9   10"},{"path":"estructurasdatos.html","id":"data-frames","chapter":"Capítulo 3 Estructuras de datos","heading":"3.5 Data Frames","text":"Esta estructura de datos de dos dimensiones es la más parecida lo que una hoja de cálculo permite: colocar diferentes tipos de elementos dentro de la tabla, como texto, números, elementos lógicos, entre otros. Al cargar en RStudio una base de datos de un estudio, esta se almacenará como data frame casi siempre (cuando , podrá ser un tibble o una lista).Para crear data frames manualmente en R, se utiliza la función data.frame(), especificando como elementos el contenido de cada columna.Cargar una base de datos de un archivo como data frame en R, dependerá del tipo de archivoPara cargar un excel, se recomienda usar","code":"\nDF <- data.frame(Col1 = 1:5, \n                 Col2 = c(\"Sit1\",\"Sit1\",\"Sit2\",\"Sit2\",\"Sit3\"),\n                 Log = c(T,T,F,F,T),\n                 Fct = factor(c(\"A\",\"B\",\"C\",\"B\",\"A\")))\n\nDF\n##   Col1 Col2   Log Fct\n## 1    1 Sit1  TRUE   A\n## 2    2 Sit1  TRUE   B\n## 3    3 Sit2 FALSE   C\n## 4    4 Sit2 FALSE   B\n## 5    5 Sit3  TRUE   A"},{"path":"estructurasdatos.html","id":"tibbles","chapter":"Capítulo 3 Estructuras de datos","heading":"3.6 Tibbles","text":"","code":""},{"path":"estructurasdatos.html","id":"listas","chapter":"Capítulo 3 Estructuras de datos","heading":"3.7 Listas","text":"","code":""},{"path":"estructurasdatos.html","id":"indexación-de-variables","chapter":"Capítulo 3 Estructuras de datos","heading":"3.8 Indexación de variables","text":"","code":""},{"path":"estructurasdatos.html","id":"indexación-en-variables-1d","chapter":"Capítulo 3 Estructuras de datos","heading":"3.8.1 Indexación en variables 1D","text":"","code":""},{"path":"estructurasdatos.html","id":"indexación-en-variables-2d","chapter":"Capítulo 3 Estructuras de datos","heading":"3.8.2 Indexación en variables 2D","text":"","code":""},{"path":"estructurasdatos.html","id":"indexación-en-listas","chapter":"Capítulo 3 Estructuras de datos","heading":"3.8.3 Indexación en listas","text":"","code":""},{"path":"estructurasdatos.html","id":"coerción-de-variables","chapter":"Capítulo 3 Estructuras de datos","heading":"3.9 Coerción de variables","text":"","code":""},{"path":"carga-y-exportación-de-datos.html","id":"carga-y-exportación-de-datos","chapter":"Capítulo 4 Carga y exportación de datos","heading":"Capítulo 4 Carga y exportación de datos","text":"","code":""},{"path":"carga-y-exportación-de-datos.html","id":"directorios-de-trabajo","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.1 Directorios de trabajo","text":"","code":""},{"path":"carga-y-exportación-de-datos.html","id":"lectura-de-bases-de-datos","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.2 Lectura de bases de datos","text":"","code":""},{"path":"carga-y-exportación-de-datos.html","id":"exportar-basas-de-datos","chapter":"Capítulo 4 Carga y exportación de datos","heading":"4.3 Exportar basas de datos","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"manejo-de-datos-con-tidyverse","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"Capítulo 5 Manejo de datos con tidyverse","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"datos-ordenados-tidy","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.1 Datos ordenados (tidy)","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"pipelines-con-tidyverse","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.2 Pipelines con tidyverse","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"tablas-anchas-y-largas-con-tidyr","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.3 Tablas anchas y largas con tidyr","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"filtrado","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.4 Filtrado","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"selección","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.5 Selección","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"agrupamiento","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.6 Agrupamiento","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"reordenamiento","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.7 Reordenamiento","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"conteo","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.8 Conteo","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"creación-y-transformación-de-columnas","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.9 Creación y transformación de columnas","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"resúmenes-estadísticos","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.10 Resúmenes estadísticos","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"combinar-bases-de-datos","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.11 Combinar bases de datos","text":"","code":""},{"path":"manejo-de-datos-con-tidyverse.html","id":"valores-perdidos","chapter":"Capítulo 5 Manejo de datos con tidyverse","heading":"5.12 Valores perdidos","text":"","code":""},{"path":"programación-funcional-e-iteraciones.html","id":"programación-funcional-e-iteraciones","chapter":"Capítulo 6 Programación Funcional e iteraciones","heading":"Capítulo 6 Programación Funcional e iteraciones","text":"","code":""},{"path":"programación-funcional-e-iteraciones.html","id":"control-de-flujo","chapter":"Capítulo 6 Programación Funcional e iteraciones","heading":"6.1 Control de flujo","text":"","code":""},{"path":"programación-funcional-e-iteraciones.html","id":"creacion-fun","chapter":"Capítulo 6 Programación Funcional e iteraciones","heading":"6.2 Creación de funciones","text":"La gran comunidad de desarrollo detrás de R ha creado una infinidad de funciones, almacenados en los miles de paquetes, o librerías, disponibles en el repositorio oficial CRAN y otras fuentes (ver sección Librerías y repositorios. obstante, algunas veces se necesita crear funciones personalizadas los requerimientos del usuario.Cuando se detecta que algunas secuencias de órdenes se suelen repetir en el código, crear una función que empaquete dicha secuencia permitirá\nautomatizar procedimientos y simplificar el código. Como regla general, si copias y pegas una secuencia de órdenes para usarla más de 2 veces, ya se debería pensar en crear una función que compile la tarea.Crear un función involucra los siguientes pasos:Darle un nombre. Crear una función es como crear una variable: hay que asignarle un contenido un nombre.Luego de escribir el nombre, se tiene que usar la función llamada function()para indicar qué argumentos tendrá la nueva función.Definir el contenido de la función, la secuencia de órdenes, dentro de corchetes. Dentro de ellos se usarán los argumentos establecidos en function().\nPara crear una función que le sume 100 un número, se puede usar:Para recrear la famosa función de Carl Friedrich Gauss para calcular la suma de todos los números dentro de un rango numérico, usaremos la fórmula matemática:\\[ k = \\frac{n * ( n + 1 )}{2} \\]Adicionalmente, se puede predefinir valores por defecto en function(), mismos que se podrán modificar al usar la función ya creada.Como es notorio, se pueden crear variables dentro de una función, pero estas serán temporales. Una vez se imprime el resultado en consola, la variable desaparece. Para que algún paso realizado dentro de la función se guarde como una variable permanentemente en el ambiente, usa el símbolo especial <<-.","code":"\n# Esta función admitirá como objeto de entrada un \n# valor x, definido en function(), para sumarle 100\nmi.fun <- function(x){\n  x+100\n}\n\n# Usando mi.fun() con 10\nmi.fun(10)\n## [1] 110\nk.Gauss <- function(n) {\n  (n * (n+1))/2\n}\n\nk.Gauss(100)\n## [1] 5050\n# Esta función hallará el logaritmo con base 2 \n# (por defecto) de la función matemática de Gauss\nlog.Gauss <- function(n, base = 2) {\n  resultado.Gauss <- (n * (n+1))/2\n  logaritmo <- log(resultado.Gauss, base=base)\n  print(logaritmo)\n}\n\n# Aplicando la función al valor 100\nlog.Gauss(100)\n## [1] 12.3\n# Se guardará resultado.Gauss en la consola\nlog.Gauss <- function(n, base = 2) {\n  resultado.Gauss <<- (n * (n+1))/2\n  logaritmo <- log(resultado.Gauss, base=base)\n  print(logaritmo)\n}\n\n# Aplicando la función al valor 100\nlog.Gauss(100)\n## [1] 12.3\n\n# Mostrando el objeto que se creó automáticamente\n# en el ambiente tras ejecutar log.Gauss()\nprint(resultado.Gauss)\n## [1] 5050"},{"path":"programación-funcional-e-iteraciones.html","id":"ifelse","chapter":"Capítulo 6 Programación Funcional e iteraciones","heading":"6.3 ifelse()","text":"","code":""},{"path":"programación-funcional-e-iteraciones.html","id":"iteraciones-con-for-loops","chapter":"Capítulo 6 Programación Funcional e iteraciones","heading":"6.4 Iteraciones con for loops","text":"","code":""},{"path":"programación-funcional-e-iteraciones.html","id":"aplicación-de-purrrmap","chapter":"Capítulo 6 Programación Funcional e iteraciones","heading":"6.5 Aplicación de purrr::map()","text":"","code":""},{"path":"potencialidades-de-r-markdown.html","id":"potencialidades-de-r-markdown","chapter":"Capítulo 7 Potencialidades de R Markdown","heading":"Capítulo 7 Potencialidades de R Markdown","text":"","code":""},{"path":"potencialidades-de-r-markdown.html","id":"diapositivas-con-xaringan","chapter":"Capítulo 7 Potencialidades de R Markdown","heading":"7.1 Diapositivas con Xaringan","text":"","code":""},{"path":"potencialidades-de-r-markdown.html","id":"crear-blogs-con-blogdown","chapter":"Capítulo 7 Potencialidades de R Markdown","heading":"7.2 Crear blogs con Blogdown","text":"","code":""},{"path":"potencialidades-de-r-markdown.html","id":"crear-libros-bookdown","chapter":"Capítulo 7 Potencialidades de R Markdown","heading":"7.3 Crear libros Bookdown","text":"","code":""},{"path":"visualización-avanzada-de-gráficos.html","id":"visualización-avanzada-de-gráficos","chapter":"Capítulo 8 Visualización avanzada de gráficos","heading":"Capítulo 8 Visualización avanzada de gráficos","text":"","code":""},{"path":"visualización-avanzada-de-gráficos.html","id":"gramática-de-gráficos-sintaxis-de-ggplot2","chapter":"Capítulo 8 Visualización avanzada de gráficos","heading":"8.1 Gramática de gráficos: sintaxis de ggplot2","text":"","code":""},{"path":"visualización-avanzada-de-gráficos.html","id":"visualización-por-capas","chapter":"Capítulo 8 Visualización avanzada de gráficos","heading":"8.2 Visualización por capas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"componentes-clave-de-un-gráfico-con-ggplot2","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"Capítulo 9 Componentes clave de un gráfico con ggplot2","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"geométricas","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"9.1 Geométricas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"stats","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"9.2 Stats","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"coloreo-rellenado-formas-y-tipos-de-línea","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"9.3 Coloreo, rellenado, formas y tipos de línea","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"facetas","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"9.4 Facetas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"etiquetas","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"9.5 Etiquetas","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"modificando-los-ejes","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"9.6 Modificando los ejes","text":"","code":""},{"path":"componentes-clave-de-un-gráfico-con-ggplot2.html","id":"temas","chapter":"Capítulo 9 Componentes clave de un gráfico con ggplot2","heading":"9.7 Temas ","text":"","code":""},{"path":"creando-gráficos.html","id":"creando-gráficos","chapter":"Capítulo 10 Creando gráficos","heading":"Capítulo 10 Creando gráficos","text":"","code":""},{"path":"creando-gráficos.html","id":"una-variable-x-continua","chapter":"Capítulo 10 Creando gráficos","heading":"10.1 Una variable X continua","text":"","code":""},{"path":"creando-gráficos.html","id":"polígonos-de-frecuencias","chapter":"Capítulo 10 Creando gráficos","heading":"10.1.1 Polígonos de frecuencias","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-área","chapter":"Capítulo 10 Creando gráficos","heading":"10.1.2 Gráfico de área","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-densidad","chapter":"Capítulo 10 Creando gráficos","heading":"10.1.3 Gráfico de densidad","text":"","code":""},{"path":"creando-gráficos.html","id":"histograma-de-frecuencias","chapter":"Capítulo 10 Creando gráficos","heading":"10.1.4 Histograma de frecuencias","text":"","code":""},{"path":"creando-gráficos.html","id":"una-variable-x-discreta","chapter":"Capítulo 10 Creando gráficos","heading":"10.2 Una variable X discreta","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-barras","chapter":"Capítulo 10 Creando gráficos","heading":"10.2.1 Gráficos de barras","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-barras-polares","chapter":"Capítulo 10 Creando gráficos","heading":"10.2.2 Gráficos de barras polares","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfios-de-discrepancia","chapter":"Capítulo 10 Creando gráficos","heading":"10.2.3 Gráfios de discrepancia","text":"","code":""},{"path":"creando-gráficos.html","id":"dos-variables-x-vs-y-continuas","chapter":"Capítulo 10 Creando gráficos","heading":"10.3 Dos variables: X vs Y continuas","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-dispersión-de-puntos","chapter":"Capítulo 10 Creando gráficos","heading":"10.3.1 Gráfico de dispersión de puntos","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-etiquetas-y-texto","chapter":"Capítulo 10 Creando gráficos","heading":"10.3.2 Gráfico de etiquetas y texto","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-densidad-2d","chapter":"Capítulo 10 Creando gráficos","heading":"10.3.3 Gráficos de densidad 2D","text":"","code":""},{"path":"creando-gráficos.html","id":"dos-variables-x-discreta-vs-y-continua","chapter":"Capítulo 10 Creando gráficos","heading":"10.4 Dos variables: X discreta vs Y continua","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-cajas","chapter":"Capítulo 10 Creando gráficos","heading":"10.4.1 Gráficos de cajas","text":"","code":""},{"path":"creando-gráficos.html","id":"gráfico-de-violín","chapter":"Capítulo 10 Creando gráficos","heading":"10.4.2 Gráfico de violín","text":"","code":""},{"path":"creando-gráficos.html","id":"dos-variables-x-vs-y-discretas","chapter":"Capítulo 10 Creando gráficos","heading":"10.5 Dos variables: X vs Y discretas","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-conteos","chapter":"Capítulo 10 Creando gráficos","heading":"10.5.1 Gráficos de conteos","text":"","code":""},{"path":"creando-gráficos.html","id":"gráficos-de-calor","chapter":"Capítulo 10 Creando gráficos","heading":"10.5.2 Gráficos de calor","text":"","code":""},{"path":"adicionando-líneas.html","id":"adicionando-líneas","chapter":"Capítulo 11 Adicionando Líneas","heading":"Capítulo 11 Adicionando Líneas","text":"","code":""},{"path":"adicionando-líneas.html","id":"gráficos-de-regresión","chapter":"Capítulo 11 Adicionando Líneas","heading":"11.1 Gráficos de Regresión","text":"","code":""},{"path":"adicionando-líneas.html","id":"segmentos-y-flechas","chapter":"Capítulo 11 Adicionando Líneas","heading":"11.2 Segmentos y flechas","text":"","code":""},{"path":"adicionando-líneas.html","id":"curvas-y-flechas","chapter":"Capítulo 11 Adicionando Líneas","heading":"11.3 Curvas y flechas","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"gráficos-estadísticos-semiautomáticos","chapter":"Capítulo 12 Gráficos estadísticos semiautomáticos","heading":"Capítulo 12 Gráficos estadísticos semiautomáticos","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"funciones-de-ggpubr","chapter":"Capítulo 12 Gráficos estadísticos semiautomáticos","heading":"12.1 Funciones de ggpubr","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"funciones-de-ggstatsplot","chapter":"Capítulo 12 Gráficos estadísticos semiautomáticos","heading":"12.2 Funciones de ggstatsplot","text":"","code":""},{"path":"gráficos-estadísticos-semiautomáticos.html","id":"funciones-de-ggcorplot","chapter":"Capítulo 12 Gráficos estadísticos semiautomáticos","heading":"12.3 Funciones de ggcorplot","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"exportación-de-gráficos","chapter":"Capítulo 13 Exportación de Gráficos","heading":"Capítulo 13 Exportación de Gráficos","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"composición-de-múltiples-gráficos","chapter":"Capítulo 13 Exportación de Gráficos","heading":"13.1 Composición de múltiples gráficos","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"utilizando-patchwork","chapter":"Capítulo 13 Exportación de Gráficos","heading":"13.1.1 Utilizando patchwork","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"utilizando-ggpubr","chapter":"Capítulo 13 Exportación de Gráficos","heading":"13.1.2 Utilizando ggpubr","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"exportacion-en-png-o-jpeg","chapter":"Capítulo 13 Exportación de Gráficos","heading":"13.2 Exportaci[on] en PNG o JPEG","text":"","code":""},{"path":"exportación-de-gráficos.html","id":"exportación-en-pdf","chapter":"Capítulo 13 Exportación de Gráficos","heading":"13.3 Exportación en PDF","text":"","code":""}]
