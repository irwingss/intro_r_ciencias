iFoodTreatment.ij   <- FoodTreatment.ij - 1
Owls2$Cen.AT <- Owls2$ArrivalTime-mean(Owls2$ArrivalTime)
NObservationsInNest <- as.numeric(tapply(Owls2$NCalls, FUN = length, INDEX = Owls2$Nest))
#Bundle data
win.data <- list(NCalls             = NCalls.ij,
ArrivalTime         = ArrivalTime.ij,
LBroodSize          = LBroodSize.ij,
NNest               = length(levels(Owls2$Nest)),
NObservationsInNest = NObservationsInNest,
iSexParent          = iSexParent.ij,
iFoodTreatment      = iFoodTreatment.ij)
#####################################
#Model
# The code below contains slightly more things than in the
# book, e.g. the Pearson residuals etc.
sink("modelglm.txt")
cat("
model{
#Priors
for (i in 1:5) { beta[i]  ~ dnorm(0, 0.001) }
alpha ~ dnorm(0, 0.001)
#Likelihood
for (i in 1:NNest) {
for (j in 1:NObservationsInNest[i]) {
NCalls[j,i] ~ dpois(mu[j,i])
log(mu[j,i]) <- max(-20, min(20, eta[j,i]))
eta[j,i] <- alpha + beta[1] * iSexParent[j,i] +
beta[2] * iFoodTreatment[j,i] +
beta[3] * ArrivalTime[j,i] +
beta[4] * iFoodTreatment[j,i] * iSexParent[j,i] +
beta[5] * iSexParent[j,i]     * ArrivalTime[j,i] +
1 * LBroodSize[j,i]
#Discrepancy measures
YNew[j,i] ~ dpois(mu[j,i])
PRes[j,i]    <- (NCalls[j,i] - mu[j,i]) / sqrt(mu[j,i])
PResNew[j,i] <- (YNew[j,i] - mu[j,i]) / sqrt(mu[j,i])
D[j,i]     <- pow(PRes[j,i], 2)
DNew[j, i] <- pow(PResNew[j,i], 2)
}
Fiti[i] <- sum(D[1:NObservationsInNest[i], i])
FitiNew[i] <- sum(DNew[1:NObservationsInNest[i], i])
}
Fit <- sum(Fiti[1:NNest])
FitNew <- sum(FitiNew[1:NNest])
}
",fill = TRUE)
sink()
#Inits function
inits  <- function () {
list(
alpha      = rnorm(1),
beta       = rnorm(5))  }
#Parameters to estimate
params <- c("alpha","beta", "PRes", "Fit", "FitNew")
#MCMC settings
nc <- 3           #Number of chains
ni <- 100000       #Number of draws from posterior (for each chain)
nb <- 10000         #Number of draws to discard as burn-in
nt <- 100           #Thinning rate
library(R2WinBUGS)
#Start Gibbs sampler
out1 <- bugs(data = win.data,
inits = inits,
parameters = params,
model = "modelglm.txt",
n.thin = nt,
n.chains = nc,
n.burnin = nb,
n.iter = ni,
debug = FALSE)
print(out1, digits = 2)
#Section 2.6.7
Chains <- out1$sims.array[,, beta[1]]
plot(x=X, y = Y2)
plot(Y,Y2)
plot(Y1,Y2)
rep(1:20, each = 15)
#Now apply the random intercept Poisson GLMM on these data.
#This should give an overdispersed model
M4 <- glmer(Y2 ~ X + (1|RE), family = poisson)
summary(M4)
#Plot fitted values versus residuals
plot(residuals(M4) ~ fitted(M4))
#Plot fitted values versus residuals
plot(residuals(M4) ~ fitted(M4))
#Add smoother
rvec <- seq(0,30,length=101)
Sm1 <- loess(residuals(M4) ~ fitted(M4))
lines(rvec, predict(Sm1, newdata = rvec), col = 2, lwd = 2)
abline(h = 0)
seq(0,30,length=101)
lines(rvec, predict(Sm1, newdata = rvec), col = 2, lwd = 2)
abline(h = 0)
E4 <- resid(M4, type = "pearson")
p4 <- length(fixef(M4)) + 1
sum(E4^2)/(N-p4)
NoiseEps <- rnorm(N, mean = 0, sd = 1.4)
a1 <- rnorm(20, mean = 0, sd = 0.1)
a  <- rep(a1, each = 15)
RE <- rep(1:20, each = 15)
eta <- alpha + beta * X + a + NoiseEps
mu  <- exp(eta)
Y2  <- rpois(N, lambda = mu)
plot(x=X, y = Y2)
plot(Y,Y2)
plot(Y1,Y2)
#Now apply the random intercept Poisson GLMM on these data.
#This should give an overdispersed model
M4 <- glmer(Y2 ~ X + (1|RE), family = poisson)
summary(M4)
#Plot fitted values versus residuals
plot(residuals(M4) ~ fitted(M4))
#Add smoother
rvec <- seq(0,30,length=101)
Sm1 <- loess(residuals(M4) ~ fitted(M4))
lines(rvec, predict(Sm1, newdata = rvec), col = 2, lwd = 2)
abline(h = 0)
#Add smoother
rvec <- seq(0,90,length=101)
Sm1 <- loess(residuals(M4) ~ fitted(M4))
lines(rvec, predict(Sm1, newdata = rvec), col = 2, lwd = 2)
abline(h = 0)
E4 <- resid(M4, type = "pearson")
p4 <- length(fixef(M4)) + 1
sum(E4^2)/(N-p4)
openxlsx::write.xlsx(Owls2, "Owls2.xlsx")
names(Owls2)
M1 <- glmer(NCalls ~ SexParent * FoodTreatment +
SexParent * ArrivalTime +
offset(LogBroodSize) +
(1| Nest),
family = poisson, data = Owls2)
sjPlot::tab_model(M1)
library(emmeans)
emmeans(M1)
emmeans(M1, "Male")
emmeans(M1, "SexParent")
emmeans(M1, c("SexParent","FoodTreatment"))
sp.oats <- read.csv("oats.csv")
sp.oats <- within(sp.oats,nitroF <- factor(nitro))
head(sp.oats)
library(lattice)  # Can only list one package at a time
library(car)
library(agricolae)
with(sp.oats,xyplot(yield~nitroF|variety))
with(sp.oats,xyplot(yield~nitroF|variety))
with(sp.oats,xyplot(yield~nitroF|variety,groups=replicate))
with(sp.oats,xyplot(yield~nitroF|variety,groups=replicate,aspect="xy"))
with(sp.oats,xyplot(yield~nitroF|variety,groups=replicate,aspect="xy",type="o"))
with(sp.oats,xyplot(yield~nitroF|variety,groups=replicate,aspect="xy",type="a"))
res.bad <- lm(yield~variety*nitroF,data=sp.oats)
anova(res.bad)
res.good <- aov(yield~variety*nitroF+Error(replicate:variety),data=sp.oats)
summary(res.good)
emmeans(M1, c("SexParent","FoodTreatment", "Satiated"))
emmeans(M1, c("SexParent","FoodTreatment", "ArrivalTime"))
emmeans(M1, c("SexParent","FoodTreatment", "ArrivalTime[24,28]"))
emmeans(M1, c("SexParent","FoodTreatment", "ArrivalTime"))
library(xfun)
remove.packages("xfun", lib="~/R/win-library/4.1")
install.packages("xfun")
install.packages("xfun")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(tidyverse)
as_tibble(DF)
DF <- data.frame(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
as_tibble(DF)
TB <- tibble(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
TB
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")colorPal <- c("#b41214","#007588","#ffc000")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
primeraLista <- list(TB = TB, DF = DF, vec = vector1, factor = F2)
primeraLista
primeraLista <- list(TB = TB, DF = DF, vec = vector1, factor = F2)
primeraLista
primeraLista <- list(TB, DF, vector1, F2)
primeraLista
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
primeraLista <- list(TB = TB, DF = DF, vec = vector1, factor = F2)
primeraLista
TB <- tibble(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
TB
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
TB <- tibble(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
TB
DF <- data.frame(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
# Crear un factor con niveles ordenados manualmente
F2 <- factor(vectorC, levels=c("B","C","A"))
# Crear un rango de valores cualquiera
vector1<-1:10
# Crear un vector de texto cualquiera
vectorC <- c("A","B","A","A","A","A","B","A","C","C","B")
# Crear un factor con niveles ordenados manualmente
F2 <- factor(vectorC, levels=c("B","C","A"))
L2 <- dplyr::lst(TB, DF, vector1, F2)
L2
unlist(L2)
is(unlist(L2))
fix(unlist(L2))
fix(d<-unlist(L2))
fix(d<-unlist(L2);d)
d<-unlist(L2)
fix(d)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
colorPal <- c("#b41214","#007588","#ffc000")
colorPal
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
s
sd
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
if (TRUE) {
2 + 2
}
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
DF <- data.frame(Col1 = 1:5,
+                  Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
+                  Log = c(T,T,F,F,T),
+                  Fct = factor(c("A","B","C","B","A")))
DF <- data.frame(Col1 = 1:5,
+                  Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
+                  Log = c(T,T,F,F,T),
+                  Fct = factor(c("A","B","C","B","A")))
DF <- data.frame(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
DF <- data.frame(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
5    5 Sit3  TRUE   A
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
letters
LETTERS
paste(LETTERS[1:5], 1:5)
paste(LETTERS[1:5], 1:5, sep="_")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
vectorNA <- c(10, 20, NA, 40)
vectorNA <- c(10, 20, NA, 40, 50)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("ind.ex.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
vector4 <- 1:3
comment(vector4) <- "este es un vector"
vector4
attributes(vector4)
vectorNA[1,3]
vectorNA[c(1,3)]
vectorNA[where(vectorNA>=25)]
vectorNA[which(vectorNA>=25)]
vectorNA>=25
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(tidyverse)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
levels(iris$Species)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
data("iris")
colorPal <- c("#b41214","#007588","#ffc000")
iris$Species <- factor(iris$Species, labels=c("setosa"="I. setosa",
"versicolor"="I. versicolor",
"virginica"="I. virginica"))
ggplot(data=iris,
aes(x=Petal.Length, y=Sepal.Length, color=Species))+
geom_point(size=3, alpha=0.5)+
scale_color_manual(values=colorPal)+
labs(x="Pétalo", y="Sépalo", color="Grupos")+
theme(legend.text=element_text(face=3))
ggplot(data=iris,
aes(x=Petal.Length, y=Sepal.Length, color=Species))+
geom_point(size=3, alpha=0.5)+
scale_color_manual(values=colorPal)+
labs(x="Pétalo", y="Sépalo", color="Grupos")+
theme(legend.text=element_text(face=3))+
theme_minimal()
ggplot(data=iris,
aes(x=Petal.Length, y=Sepal.Length, color=Species))+
geom_point(size=3, alpha=0.5)+
scale_color_manual(values=colorPal)+
labs(x="Pétalo", y="Sépalo", color="Grupos")+
theme_minimal()+
theme(legend.text=element_text(face=3),
legend.position="top")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
factor(c(1,2,1,1,NA,2,1,NA))
factor(c(1,2,1,1,NA,2,1,"NA"))
conjunto1 <- c(1,2,1,1,NA,2,1,NA,3,2,1,3,2,3,3,NA)
# Indexar varios elementos a la vez
conjunto1[c(3,5)]
# Indexar varios elementos a la vez
conjunto1[c(3,5,10)]
# Indexar con operaciones lógicas
index <- conjunto1 < 3
conjunto1[index]
# Lo anterior se simplifica a
conjunto1[which(conjunto1 < 3)]
conjunto2 <- c(1,2,1,1,"NA",2,1,"NA",3,2,1,3,2,3,3,"NA")
# Si los NA son texto, el resultado con which() es identico
conjunto2[which(conjunto2 < 3)]
d <- conjunto2[which(conjunto2 < 3)]
levels(d)
d
# Lo anterior se simplifica a si queremos mantener los NA
conjunto1[conjunto1 < 3]
# Indexar con operaciones lógicas
index <- conjunto1 < 3
conjunto1[index]
fctConjunto1 <- factor(conjunto1)
fctConjunto1
conjunto2 <- c(1,2,1,1,"NA",2,1,"NA",3,2,1,3,2,3,3,"NA")
fctConjunto2 <- factor(conjunto2)
fctConjunto2
conjunto1 <- c(1,2,1,1,NA,2,1,NA,3,2,1,3,2,3,3,NA)
fctConjunto1 <- factor(conjunto1)
fctConjunto1
conjunto2 <- c(1,2,1,1,"NA",2,1,"NA",3,2,1,3,2,3,3,"NA")
fctConjunto2 <- factor(conjunto2)
fctConjunto2
fctConjunto1[3]
fctConjunto1[5]
# Indexar varios elementos a la vez
fctConjunto1[c(3,5,10)]
fctConjunto2[3]
fctConjunto2[5]
# Indexar varios elementos a la vez
fctConjunto2[c(3,5,10)]
# Indexar con operaciones lógicas
index <- fctConjunto2 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto2 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto1 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto1 == 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto2 == 3
fctConjunto2[index]
# Indexar con operaciones lógicas relacionales
# no es factible dado que los niveles ya no son números
# son texto (por ser categorías) a pesar que no tengan las ""
index <- fctConjunto1 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas relacionales
# no es factible dado que los niveles ya no son números
# son texto (por ser categorías) a pesar que no tengan las ""
index <- fctConjunto2 < 3
fctConjunto2[index]
# Pero si se puede indexar operaciones lógicas de identidad
index <- fctConjunto2 == 3
# Pero si se puede indexar operaciones lógicas de identidad
index <- fctConjunto2 == 3
fctConjunto2[index]
# Si se lidia con factores conteniendo NA
# (no su versión en texto "NA"),
# el indexar sin which() genera que se muestren
# los NA cuando no son requeridos
index <- fctConjunto1 == 3
fctConjunto1[index]
# Esto no ocurre al usar which()
fctConjunto1[which(index)]
bookdown::render_book("index.Rmd", "bookdown::gitbook")
# Utilizando el operador %in% podemos pedir
# varias igualdades a la vez
index <- fctConjunto2 %in% c(1,2)
fctConjunto2[index]
bookdown::render_book("index.Rmd", "bookdown::gitbook")
1 %in% c(2,3,1)
1 %in% c(2,3)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
as.logical("S")
as.vector(iris)
is(as.vector(iris))
as.list(iris)
as.roman(23)
matrix(npois(100,5), ncol=10, nrow=10)
matrix(rpois(100,5), ncol=10, nrow=10)
as.raster(matrix(rpois(100,5), ncol=10, nrow=10))
help("as.raster")
as.raster(matrix(c(TRUE, FALSE), nrow = 3, ncol = 2))}
as.raster(matrix(c(TRUE, FALSE), nrow = 3, ncol = 2))}
as.raster(matrix(c(TRUE, FALSE), nrow = 3, ncol = 2))
as.raster(matrix(1:3/4, nrow = 3, ncol = 4))
image(as.raster(matrix(1:3/4, nrow = 3, ncol = 4)))
image(matrix(1:3/4, nrow = 3, ncol = 4))
image(matrix(rpois(100,5), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
1:3/4
help(as.raster)
as.raster(array(c(0:1, rep(0.5, 4)), c(2, 1, 3)))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
datosNumeros <- seq(1,100, by=5)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
help(quantile)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
(24+12)/(2*3)^2
(24+12)/(2*3)^6
sqrt((24+12)/(2*3)^3)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
num1 < 19 & num1 >15.7
set.seed(123)
num1 <- rnorm(1000, mean=19, sd=1.29)
num1 < 19 & num1 > 15.7
num1LOGICO <- num1 < 19 & num1 > 15.7
mean(num1LOGICO)
mean(num1LOGICO) * 1000
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
# Creando el conjunto de datos a muestrear
conjuntoInicial2 <- rep(c("A","Z"), c(18,20))
# Creando el conjunto de datos a muestrear
conjuntoInicial2 <- rep(c("A","Z"), c(10,20))
conjuntoInicial2
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
colorPal <- c("#b41214","#007588","#ffc000")
