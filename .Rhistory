Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
TB
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
TB <- tibble(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
TB
DF <- data.frame(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
# Crear un factor con niveles ordenados manualmente
F2 <- factor(vectorC, levels=c("B","C","A"))
# Crear un rango de valores cualquiera
vector1<-1:10
# Crear un vector de texto cualquiera
vectorC <- c("A","B","A","A","A","A","B","A","C","C","B")
# Crear un factor con niveles ordenados manualmente
F2 <- factor(vectorC, levels=c("B","C","A"))
L2 <- dplyr::lst(TB, DF, vector1, F2)
L2
unlist(L2)
is(unlist(L2))
fix(unlist(L2))
fix(d<-unlist(L2))
fix(d<-unlist(L2);d)
d<-unlist(L2)
fix(d)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
colorPal <- c("#b41214","#007588","#ffc000")
colorPal
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
s
sd
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
if (TRUE) {
2 + 2
}
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
DF <- data.frame(Col1 = 1:5,
+                  Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
+                  Log = c(T,T,F,F,T),
+                  Fct = factor(c("A","B","C","B","A")))
DF <- data.frame(Col1 = 1:5,
+                  Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
+                  Log = c(T,T,F,F,T),
+                  Fct = factor(c("A","B","C","B","A")))
DF <- data.frame(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
DF <- data.frame(Col1 = 1:5,
Col2 = c("Sit1","Sit1","Sit2","Sit2","Sit3"),
Log = c(T,T,F,F,T),
Fct = factor(c("A","B","C","B","A")))
5    5 Sit3  TRUE   A
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
letters
LETTERS
paste(LETTERS[1:5], 1:5)
paste(LETTERS[1:5], 1:5, sep="_")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
vectorNA <- c(10, 20, NA, 40)
vectorNA <- c(10, 20, NA, 40, 50)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("ind.ex.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
vector4 <- 1:3
comment(vector4) <- "este es un vector"
vector4
attributes(vector4)
vectorNA[1,3]
vectorNA[c(1,3)]
vectorNA[where(vectorNA>=25)]
vectorNA[which(vectorNA>=25)]
vectorNA>=25
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(tidyverse)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
levels(iris$Species)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
data("iris")
colorPal <- c("#b41214","#007588","#ffc000")
iris$Species <- factor(iris$Species, labels=c("setosa"="I. setosa",
"versicolor"="I. versicolor",
"virginica"="I. virginica"))
ggplot(data=iris,
aes(x=Petal.Length, y=Sepal.Length, color=Species))+
geom_point(size=3, alpha=0.5)+
scale_color_manual(values=colorPal)+
labs(x="Pétalo", y="Sépalo", color="Grupos")+
theme(legend.text=element_text(face=3))
ggplot(data=iris,
aes(x=Petal.Length, y=Sepal.Length, color=Species))+
geom_point(size=3, alpha=0.5)+
scale_color_manual(values=colorPal)+
labs(x="Pétalo", y="Sépalo", color="Grupos")+
theme(legend.text=element_text(face=3))+
theme_minimal()
ggplot(data=iris,
aes(x=Petal.Length, y=Sepal.Length, color=Species))+
geom_point(size=3, alpha=0.5)+
scale_color_manual(values=colorPal)+
labs(x="Pétalo", y="Sépalo", color="Grupos")+
theme_minimal()+
theme(legend.text=element_text(face=3),
legend.position="top")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
factor(c(1,2,1,1,NA,2,1,NA))
factor(c(1,2,1,1,NA,2,1,"NA"))
conjunto1 <- c(1,2,1,1,NA,2,1,NA,3,2,1,3,2,3,3,NA)
# Indexar varios elementos a la vez
conjunto1[c(3,5)]
# Indexar varios elementos a la vez
conjunto1[c(3,5,10)]
# Indexar con operaciones lógicas
index <- conjunto1 < 3
conjunto1[index]
# Lo anterior se simplifica a
conjunto1[which(conjunto1 < 3)]
conjunto2 <- c(1,2,1,1,"NA",2,1,"NA",3,2,1,3,2,3,3,"NA")
# Si los NA son texto, el resultado con which() es identico
conjunto2[which(conjunto2 < 3)]
d <- conjunto2[which(conjunto2 < 3)]
levels(d)
d
# Lo anterior se simplifica a si queremos mantener los NA
conjunto1[conjunto1 < 3]
# Indexar con operaciones lógicas
index <- conjunto1 < 3
conjunto1[index]
fctConjunto1 <- factor(conjunto1)
fctConjunto1
conjunto2 <- c(1,2,1,1,"NA",2,1,"NA",3,2,1,3,2,3,3,"NA")
fctConjunto2 <- factor(conjunto2)
fctConjunto2
conjunto1 <- c(1,2,1,1,NA,2,1,NA,3,2,1,3,2,3,3,NA)
fctConjunto1 <- factor(conjunto1)
fctConjunto1
conjunto2 <- c(1,2,1,1,"NA",2,1,"NA",3,2,1,3,2,3,3,"NA")
fctConjunto2 <- factor(conjunto2)
fctConjunto2
fctConjunto1[3]
fctConjunto1[5]
# Indexar varios elementos a la vez
fctConjunto1[c(3,5,10)]
fctConjunto2[3]
fctConjunto2[5]
# Indexar varios elementos a la vez
fctConjunto2[c(3,5,10)]
# Indexar con operaciones lógicas
index <- fctConjunto2 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto2 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto1 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto1 == 3
fctConjunto2[index]
# Indexar con operaciones lógicas
index <- fctConjunto2 == 3
fctConjunto2[index]
# Indexar con operaciones lógicas relacionales
# no es factible dado que los niveles ya no son números
# son texto (por ser categorías) a pesar que no tengan las ""
index <- fctConjunto1 < 3
fctConjunto2[index]
# Indexar con operaciones lógicas relacionales
# no es factible dado que los niveles ya no son números
# son texto (por ser categorías) a pesar que no tengan las ""
index <- fctConjunto2 < 3
fctConjunto2[index]
# Pero si se puede indexar operaciones lógicas de identidad
index <- fctConjunto2 == 3
# Pero si se puede indexar operaciones lógicas de identidad
index <- fctConjunto2 == 3
fctConjunto2[index]
# Si se lidia con factores conteniendo NA
# (no su versión en texto "NA"),
# el indexar sin which() genera que se muestren
# los NA cuando no son requeridos
index <- fctConjunto1 == 3
fctConjunto1[index]
# Esto no ocurre al usar which()
fctConjunto1[which(index)]
bookdown::render_book("index.Rmd", "bookdown::gitbook")
# Utilizando el operador %in% podemos pedir
# varias igualdades a la vez
index <- fctConjunto2 %in% c(1,2)
fctConjunto2[index]
bookdown::render_book("index.Rmd", "bookdown::gitbook")
1 %in% c(2,3,1)
1 %in% c(2,3)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
as.logical("S")
as.vector(iris)
is(as.vector(iris))
as.list(iris)
as.roman(23)
matrix(npois(100,5), ncol=10, nrow=10)
matrix(rpois(100,5), ncol=10, nrow=10)
as.raster(matrix(rpois(100,5), ncol=10, nrow=10))
help("as.raster")
as.raster(matrix(c(TRUE, FALSE), nrow = 3, ncol = 2))}
as.raster(matrix(c(TRUE, FALSE), nrow = 3, ncol = 2))}
as.raster(matrix(c(TRUE, FALSE), nrow = 3, ncol = 2))
as.raster(matrix(1:3/4, nrow = 3, ncol = 4))
image(as.raster(matrix(1:3/4, nrow = 3, ncol = 4)))
image(matrix(1:3/4, nrow = 3, ncol = 4))
image(matrix(rpois(100,5), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
image(matrix(rnorm(100,5,1), ncol=10, nrow=10))
1:3/4
help(as.raster)
as.raster(array(c(0:1, rep(0.5, 4)), c(2, 1, 3)))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
datosNumeros <- seq(1,100, by=5)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
help(quantile)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
(24+12)/(2*3)^2
(24+12)/(2*3)^6
sqrt((24+12)/(2*3)^3)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
num1 < 19 & num1 >15.7
set.seed(123)
num1 <- rnorm(1000, mean=19, sd=1.29)
num1 < 19 & num1 > 15.7
num1LOGICO <- num1 < 19 & num1 > 15.7
mean(num1LOGICO)
mean(num1LOGICO) * 1000
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
# Creando el conjunto de datos a muestrear
conjuntoInicial2 <- rep(c("A","Z"), c(18,20))
# Creando el conjunto de datos a muestrear
conjuntoInicial2 <- rep(c("A","Z"), c(10,20))
conjuntoInicial2
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
colorPal <- c("#b41214","#007588","#ffc000")
sessionInfo()
A <- 10 != 9
B <- 10 < 5
A | B
A & B
A != B
A || B
!A == B
A >= B
A
B
A > B
!A == !B
rep("Alojomora","Levioosaa", 15, 2)
rep(c("Alojomora","Levioosaa"), 15, 2)
rep(c("Alojomora","Levioosaa"), c(15, 2))
seq(c("Alojomora","Levioosaa"), 15:2)
rep(c("Alojomora","Levioosaa"), 15:2)
datosNumeros
as.character(datosNumeros)
as.character(datosNumeros) -> coer
as.numeric(coer)
as.numeric("Peru")
as.matrix(data.frame(A="DD",B=10,C=TRUE))
as.data.frame(as.matrix(data.frame(A="DD",B=10,C=TRUE)))
dplyr::as_tibble(as.matrix(data.frame(A="DD",B=10,C=TRUE)))
tibble(A="DD",B=10,C=TRUE)
dplyr::tibble(A="DD",B=10,C=TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
datosNumeros <- seq(20, 80, lenght=200)
datosNumeros <- seq(20, 80, length = 200)
datosNumeros <- seq(20, 80, length=200)
muestr4 <- sample(datosNumeros, 10, replace = TRUE)
set.seed(123)
coer <- as.character(datosNumeros)
# Revisar el contenido
coer
# Revisar el contenido
head(coer, 20)
# Redondear datosNumeros
r <- round(datosNumeros, 2)
# Coercer hacia texto
coer <- as.character(r)
# Revisar el contenido
head(coer, 20)
# Crear la variable
miPais <- "Peru"
# Coercer hacia número
as.numeric(miPais)
# Crear la variable
DF10 <- data.frame(
COL1 = 1:5
COL2 = c("Text1", "Text2", "Text3", "Text4", "Text5"),
COL3 = c(T, F, T, F, T)
)
# Crear la variable
DF10 <- data.frame(
COL1 = 1:5,
COL2 = c("Text1", "Text2", "Text3", "Text4", "Text5"),
COL3 = c(T, F, T, F, T)
)
# Coercer hacia matriz
as.matrix(DF10)
# Crear la variable
DF10 <- data.frame(
COL1 = 1:5,
COL3 = c(T, F, T, F, T)
)
# Coercer hacia matriz
as.matrix(DF10)
list1
# Ubicar las indexaciones
list1[[3]][2,3]
# Crear la lista nombrada
list1 <- dplyr::lst(muestr4, datosNumeros, DF10)
# Ubicar las indexaciones
list1[[3]][2,3]
# Crear la lista no nombrada
list2 <- list(muestr4, datosNumeros, DF10)
# Ubicar las indexaciones
list2[[3]][2,3]
list2
# Crear la variable
DF10 <- data.frame(
COL1 = 1:5,
COL2 = c("Text1", "Text2", "Text3", "Text4", "Text5"),
COL3 = c(T, F, T, F, T)
)
# Ubicar las indexaciones
list2[[3]][2,3]
# Crear la lista no nombrada
list2 <- list(muestr4, datosNumeros, DF10)
# Ubicar las indexaciones
list2[[3]][2,3]
list2
list2[[2]][150]
list2[[1]][5]
# Ubicar las indexaciones
list1$DF10[2,3]
# Crear la lista nombrada
list1 <- dplyr::lst(muestr4, datosNumeros, DF10)
# Ubicar las indexaciones
list1$DF10$COL3[2]
list1$datosNumeros[150]
list2[[2]][150]
list1$datosNumeros[5]
list2[[1]][5]
list1$muestr4[5]
data("BOD")
BOD
bookdown::render_book("index.Rmd", "bookdown::gitbook")
z = -1.69 + 1*0.56
z
1 / (1 + exp(-z))
exp(10)**2
(exp(10)**2)+ (25*pi)
(exp(10)**2/(25*pi)
(exp(10)**2)/(25*pi)
(exp(10)**2)/(259*pi)
(exp(10)**2)/(25*(9^16))
(exp(10)**2)/(10*(9^16))
(exp(10)**2)/(10*(9^6))
(exp(-10)**2)/(10*(9^6))
(exp(10)**-2)/(10*(9^6))
(exp(10)**2)/(-10*(9^6))
log10(abs((exp(10)**2)/(-10*(9^6))))
f=expression(x^2+3*x)
D(f,'x')
f=expression(5)
f
D(F)
D(f)
D(f, x)
D(f, 5)
f=expression(-2x)
f=expression(2x*-1)
f=expression(-x^2+3*x)
f=expression(-2x^2+3*x)
f=expression(-2*x+1)
D(f, x)
D(f, "x")
# Crear la expresión matemática
eMat <- expression(-2*x+2)
# Crear la expresión matemática
eMat1 <- expression(-2*x+2)
# Función D() para derivar eMat1 sobre x
D(eMat1, "x")
# Crear la expresión matemática
eMat1 <- expression((-2*x)+2)
# Función D() para derivar eMat1 sobre x
D(eMat1, "x")
eMat2 <- expression((-2*x^2)-5)
D(eMat2, "x")
eMat2 <- expression(-2*x^2-5)
D(eMat2, "x")
eMat2 <- expression((-2*(x^2))-5)
D(eMat2, "x")
eval(eMat2)
eMat3 <- expression((x**3+2)/3)
D(eMat3, "x")
eMat3 <- expression(((x^3)+2)/3)
D(eMat3, "x")
eval(D(eMat3, "x"))
eval(eMat3)
3*(1.6610087)**(2/3)
3*((1.6610087)**(2/3))
D(expression(sinpi(x^2)), "x")
deriv(expression(sinpi(x^2)), "x")
# Crear la expresión matemática para obtener segunda derivada
eMat5 <- expression((x^2+3*x)
# Función D() para derivar la expresiones sobre x
D(D(eMat5,'x'),'x')
# Crear la expresión matemática para obtener segunda derivada
eMat5 <- expression((x^2+3*x)
# Función D() para derivar la expresiones sobre x
D(D(eMat5,'x'),'x')
D(eMat5, "x")
# Crear la expresión matemática para obtener segunda derivada
eMat5 <- expression((x^2+3*x)
# Crear la expresión matemática para obtener segunda derivada
eMat5 <- expression(x^2+3*x)
# Función D() para derivar la expresiones sobre x
D(D(eMat5, "x"),'x')
# Crear la expresión matemática para obtener segunda derivada
eMat5 <- expression(x^2+3*x)
# Función D() para derivar la expresiones sobre x
D(D(eMat5, "x"),'x')
# Primera derivada
D(eMat5, "x")
# Segunda derivada
D(D(eMat5, "x"),'x')
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
antiD(1/(a * x + b) ~ x)
integrand <- function(x) {1/((x+1)*sqrt(x))}
integrate(integrand, lower = 0, upper = Inf)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
read.csv
misDatos <- read.csv(file.choose())
library(openxlsx)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
colorPal <- c("#b41214","#007588","#ffc000")
